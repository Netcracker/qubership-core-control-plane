[plantuml, er-diagram, png]
....
@startuml
hide circle

skinparam linetype ortho
skinparam shadowing false

entity "clusters" as clusters {
    *id : integer <<generated>>
    ==
    *name: varchar(500)
    *lbPolicy: varchar(50)
    *type: varchar(50)
    version : integer <<hibernate field>>
    enableh2 : boolean
}

entity "endpoints" as endpoints {
    *id : integer
    ==
    *clusterId : integer
    *address : varchar(500)
    *port : smallint
    *deployment_version: varchar(50)
    *initialdeploymentversion: varchar(64)
}

entity "routes" as routes {
    *id: integer <<generated>>
    ==
    *virtualHostId : integer <<FK>>
    *<color GREEN>**rate_limit_id : integer <<FK>>**</color>
    *routeKey : varchar(500) = hash(rm_* + header_matchers + initialdeploymentversion)
    rm_prefix : varchar(500)
    rm_regexp : varchar(500)
    rm_path: varchar(100)
    ra_clustername : varchar(100)
    ra_hostrewrite : varchar(100)
    ra_hostautorewrite : boolean
    ra_prefixrewrite : varchar(100)
    ra_pathrewrite : varchar(100)
    ra_regexpRewrite: varchar(100)
    version : integer
    timeout : integer
    deployment_version: varchar(50) <<FK>>
    initialdeploymentversion varchar(50)
    request_header_to_add: jsonb
    request_header_to_remove: jsonb
    autogenerated : boolean
}

entity "header_matchers" as headerMatchers {
    *id: integer <<generated>>
    ==
    *routeId : integer <<FK>>
    name : varchar(100)
    exactmatch: varchar(100)
    saferegexmatch: varchar(255)
    rangematch: jsonb
    presentmatch: boolean
    prefixmatch: varchar(255)
    suffixmatch: varchar(255)
    invertmatch: boolean
    version : integer
}

entity "route_configurations" as routeConfig {
    *id: integer <<generated>>
    ==
    *nodegroup : varchar(100) <<FK>>
    *name : varchar(100)
    version: integer
}

entity "node_groups" as nodeGroups {
    *name : varchar(100)
}

entity "virtual_hosts" as vh {
    *id : integer <<generated>>
    ==
    *routeconfigid: integer <<FK>>
    *<color GREEN>**rate_limit_id : integer <<FK>>**</color>
    *name : varchar(100)
    request_header_to_add: jsonb
    request_header_to_remove: jsonb
    version: integer
}

entity "virtual_hosts_domains" as vhd {
    ==
    *virtualhostid : integer <<FK>>
    *domain : varchar(100)
    version : integer
}

entity "deployment_versions" as versions {
    *version : varchar(50)
    ==
    *stage : varchar(50)
    createdwhen : timestamp
    updatedwhen : timestamp
}

entity "listeners" as listeners {
    *id : integer <<generated>>
    ==
    *nodegroup : varchar(100)
    *bindhost : varchar(100)
    *bindport : varchar(5)
    *name : varchar(100)
    *routeconfigname : varchar(100) <<FK>>
    version : int
}

entity "hash_policy" as hash_policy {
    *id : integer <<generated>>
    ==
    h_headerName : varchar(255)
    c_name : varchar(255)
    c_ttl : integer
    c_path : varchar(255)
    qp_sourceIp : varchar(255)
    qp_name : varchar(255)
    terminal : boolean
    routeId : integer <<FK>>
    endpointId : integer <<FK>>
}

entity "election" as election {
    *id: integer
    ==
    name: text
    node_info:  jsonb
    sync_clock: timestamp
    namespace: text
}

entity "envoy_config_version" as envoy_config_version {
    *node_group: text
    *entity_type: text
    --
    *version: bigint
}

entity "rate_limits" as rateLimits {
    *<color GREEN>**id : integer <<generated>> **</color>
    ==
    <color GREEN>**name : varchar(100) **</color>
    <color GREEN>**limit_requests_per_second : int **</color>
}

clusters ||--|{ endpoints
routes ||--o{ headerMatchers
routeConfig ||--|{ vh
vh ||--|{ vhd
vh ||--o{ routes
nodeGroups ||--o| routeConfig
nodeGroups ||--o| listeners
nodeGroups }|--|{ clusters
listeners ||..|| routeConfig
versions ||--|{ routes
versions ||--|{ endpoints
endpoints ||--o{ hash_policy
routes ||--o{ hash_policy
vh }|--o| rateLimits
routes }|--o| rateLimits
@enduml
....

[plantuml, routing-model-v1-active, png]
....
!include <cloudinsight/java>

title Routing model - v1 is ACTIVE

note "This is envoyproxy" as N1
actor User as user
rectangle "API Gateway\n" as facade
rectangle "<$java>\nms-v1" as msv1
rectangle "<$java>\nms-v2" as msv2

facade .. N1

user -[#orange]> facade : /api/v1/test x-version:v2
user -[#green]> facade : /api/v1/test
facade -[#green]> msv1 : /api/v1/test
facade -[#orange]> msv2 : /api/v1/test X-Version: v2

legend
|= |= Traffic direction |
|<back:#green>   </back>| To Active version |
|<back:#orange>   </back>| To Candidate version |
endlegend
....

[plantuml, routing-model-v2-active, png]
....
!include <cloudinsight/java>

title Routing model - v2 is ACTIVE

note "This is envoyproxy" as N1
actor User as user
rectangle "API Gateway\n" as facade
rectangle "<$java>\nms-v1" as msv1
rectangle "<$java>\nms-v2" as msv2

facade .. N1

user -[#green]> facade : /api/v1/test
user -[#blue]> facade : /api/v1/test x-version:v1
facade -[#green]> msv2 : /api/v1/test
facade -[#blue]> msv1 : /api/v1/test x-version:v1

legend
|= |= Traffic direction |
|<back:#green>   </back>| To Active version |
|<back:#blue>   </back>| To Legacy version |
endlegend
....

[plantuml, routing-model-v2-active-2-candidates, png]
....
!include <cloudinsight/java>

title Routing model - v2 is ACTIVE with 2 candidates

note "This is envoyproxy" as N1
actor User as user
rectangle "API Gateway\n" as facade
rectangle "<$java>\nms-v1" as msv1
rectangle "<$java>\nms-v2" as msv2
rectangle "<$java>\nms-v3" as msv3
rectangle "<$java>\nms-v4" as msv4

facade .. N1

user -[#black]> facade : /api/v1/test x-version:v4
user -[#orange]> facade : /api/v1/test x-version:v3
user -[#green]> facade : /api/v1/test
user -[#blue]> facade : /api/v1/test x-version:v1

facade --[#black]> msv4 : /api/v1/test x-version:v4
facade --[#orange]> msv3 : /api/v1/test x-version:v3
facade -[#green]> msv2 : /api/v1/test
facade -[#blue]> msv1 : /api/v1/test x-version:v1

legend
|= |= Traffic direction |
|<back:#green>   </back>| To Active version |
|<back:#blue>   </back>| To Legacy version |
|<back:#orange>   </back>| To Candidate v3 |
|<back:#black>   </back>| To Candidate v4 |
endlegend
....


[plantuml, routing-model-v4-active, png]
....
!include <cloudinsight/java>

title Routing model - v4 is ACTIVE

note "This is envoyproxy" as N1
actor User as user
rectangle "API Gateway\n" as facade
rectangle "<$java>\nms-v2" as msv4
rectangle "<$java>\nms-v4" as msv2

facade .. N1

user -[#green]> facade : /api/v1/test
user -[#blue]> facade : /api/v1/test x-version:v2

facade -[#blue]> msv4 : /api/v1/test x-version:v2
facade -[#green]> msv2 : /api/v1/test

legend
|= |= Traffic direction |
|<back:#green>   </back>| To Active version |
|<back:#blue>   </back>| To Legacy version |
endlegend
....

[plantuml, routing-model-rolled-back, png]
....
!include <cloudinsight/java>

title Routing model - v2 is ACTIVE

note "This is envoyproxy" as N1
actor User as user
rectangle "API Gateway\n" as facade
rectangle "<$java>\nms-v2" as msv2
rectangle "<$java>\nms-v4" as msv4

facade .. N1

user -[#green]> facade : /api/v1/test
user -[#orange]> facade : /api/v1/test x-version:v4

facade -[#orange]> msv4 : /api/v1/test x-version:v4
facade -[#green]> msv2 : /api/v1/test

legend
|= |= Traffic direction |
|<back:#green>   </back>| To Active version |
|<back:#orange>   </back>| To Candidate version |
endlegend
....
