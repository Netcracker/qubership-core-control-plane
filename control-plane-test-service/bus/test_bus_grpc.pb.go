// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0--rc1
// source: test_bus.proto

package bus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestEventBus_Subscribe_FullMethodName       = "/com.netcracker.mesh.v3.test.bus.TestEventBus/Subscribe"
	TestEventBus_GetLastSnapshot_FullMethodName = "/com.netcracker.mesh.v3.test.bus.TestEventBus/GetLastSnapshot"
)

// TestEventBusClient is the client API for TestEventBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestEventBusClient interface {
	Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	GetLastSnapshot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Event, error)
}

type testEventBusClient struct {
	cc grpc.ClientConnInterface
}

func NewTestEventBusClient(cc grpc.ClientConnInterface) TestEventBusClient {
	return &testEventBusClient{cc}
}

func (c *testEventBusClient) Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestEventBus_ServiceDesc.Streams[0], TestEventBus_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Topic, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestEventBus_SubscribeClient = grpc.ServerStreamingClient[Event]

func (c *testEventBusClient) GetLastSnapshot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, TestEventBus_GetLastSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestEventBusServer is the server API for TestEventBus service.
// All implementations must embed UnimplementedTestEventBusServer
// for forward compatibility.
type TestEventBusServer interface {
	Subscribe(*Topic, grpc.ServerStreamingServer[Event]) error
	GetLastSnapshot(context.Context, *Empty) (*Event, error)
	mustEmbedUnimplementedTestEventBusServer()
}

// UnimplementedTestEventBusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestEventBusServer struct{}

func (UnimplementedTestEventBusServer) Subscribe(*Topic, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTestEventBusServer) GetLastSnapshot(context.Context, *Empty) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSnapshot not implemented")
}
func (UnimplementedTestEventBusServer) mustEmbedUnimplementedTestEventBusServer() {}
func (UnimplementedTestEventBusServer) testEmbeddedByValue()                      {}

// UnsafeTestEventBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestEventBusServer will
// result in compilation errors.
type UnsafeTestEventBusServer interface {
	mustEmbedUnimplementedTestEventBusServer()
}

func RegisterTestEventBusServer(s grpc.ServiceRegistrar, srv TestEventBusServer) {
	// If the following call pancis, it indicates UnimplementedTestEventBusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestEventBus_ServiceDesc, srv)
}

func _TestEventBus_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestEventBusServer).Subscribe(m, &grpc.GenericServerStream[Topic, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestEventBus_SubscribeServer = grpc.ServerStreamingServer[Event]

func _TestEventBus_GetLastSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEventBusServer).GetLastSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestEventBus_GetLastSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEventBusServer).GetLastSnapshot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TestEventBus_ServiceDesc is the grpc.ServiceDesc for TestEventBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestEventBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.netcracker.mesh.v3.test.bus.TestEventBus",
	HandlerType: (*TestEventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastSnapshot",
			Handler:    _TestEventBus_GetLastSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TestEventBus_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test_bus.proto",
}
