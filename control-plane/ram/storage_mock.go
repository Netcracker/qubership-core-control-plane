// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package ram is a generated GoMock package.
package ram

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_memdb "github.com/hashicorp/go-memdb"
	data "github.com/netcracker/qubership-core-control-plane/control-plane/v2/data"
)

// MockRamStorage is a mock of RamStorage interface.
type MockRamStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRamStorageMockRecorder
}

// MockRamStorageMockRecorder is the mock recorder for MockRamStorage.
type MockRamStorageMockRecorder struct {
	mock *MockRamStorage
}

// NewMockRamStorage creates a new mock instance.
func NewMockRamStorage(ctrl *gomock.Controller) *MockRamStorage {
	mock := &MockRamStorage{ctrl: ctrl}
	mock.recorder = &MockRamStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRamStorage) EXPECT() *MockRamStorageMockRecorder {
	return m.recorder
}

// Backup mocks base method.
func (m *MockRamStorage) Backup() (*data.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup")
	ret0, _ := ret[0].(*data.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backup indicates an expected call of Backup.
func (mr *MockRamStorageMockRecorder) Backup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockRamStorage)(nil).Backup))
}

// Clear mocks base method.
func (m *MockRamStorage) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockRamStorageMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRamStorage)(nil).Clear))
}

// FindAll mocks base method.
func (m *MockRamStorage) FindAll(txn Txn, table string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", txn, table)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRamStorageMockRecorder) FindAll(txn, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRamStorage)(nil).FindAll), txn, table)
}

// FindById mocks base method.
func (m *MockRamStorage) FindById(tx Txn, table string, ids ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx, table}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindById", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRamStorageMockRecorder) FindById(tx, table interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx, table}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRamStorage)(nil).FindById), varargs...)
}

// FindByIndex mocks base method.
func (m *MockRamStorage) FindByIndex(tx Txn, table, index string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx, table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIndex", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIndex indicates an expected call of FindByIndex.
func (mr *MockRamStorageMockRecorder) FindByIndex(tx, table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx, table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIndex", reflect.TypeOf((*MockRamStorage)(nil).FindByIndex), varargs...)
}

// FindFirstByIndex mocks base method.
func (m *MockRamStorage) FindFirstByIndex(tx Txn, table, index string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx, table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindFirstByIndex", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByIndex indicates an expected call of FindFirstByIndex.
func (mr *MockRamStorageMockRecorder) FindFirstByIndex(tx, table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx, table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByIndex", reflect.TypeOf((*MockRamStorage)(nil).FindFirstByIndex), varargs...)
}

// ReadTx mocks base method.
func (m *MockRamStorage) ReadTx() Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTx")
	ret0, _ := ret[0].(Txn)
	return ret0
}

// ReadTx indicates an expected call of ReadTx.
func (mr *MockRamStorageMockRecorder) ReadTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTx", reflect.TypeOf((*MockRamStorage)(nil).ReadTx))
}

// Restore mocks base method.
func (m *MockRamStorage) Restore(snapshot data.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockRamStorageMockRecorder) Restore(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockRamStorage)(nil).Restore), snapshot)
}

// Save mocks base method.
func (m *MockRamStorage) Save(txn Txn, table string, entity interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", txn, table, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRamStorageMockRecorder) Save(txn, table, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRamStorage)(nil).Save), txn, table, entity)
}

// Tx mocks base method.
func (m *MockRamStorage) Tx(write bool) Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", write)
	ret0, _ := ret[0].(Txn)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockRamStorageMockRecorder) Tx(write interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockRamStorage)(nil).Tx), write)
}

// WriteTx mocks base method.
func (m *MockRamStorage) WriteTx() Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTx")
	ret0, _ := ret[0].(Txn)
	return ret0
}

// WriteTx indicates an expected call of WriteTx.
func (mr *MockRamStorageMockRecorder) WriteTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTx", reflect.TypeOf((*MockRamStorage)(nil).WriteTx))
}

// MockTxn is a mock of Txn interface.
type MockTxn struct {
	ctrl     *gomock.Controller
	recorder *MockTxnMockRecorder
}

// MockTxnMockRecorder is the mock recorder for MockTxn.
type MockTxnMockRecorder struct {
	mock *MockTxn
}

// NewMockTxn creates a new mock instance.
func NewMockTxn(ctrl *gomock.Controller) *MockTxn {
	mock := &MockTxn{ctrl: ctrl}
	mock.recorder = &MockTxnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxn) EXPECT() *MockTxnMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockTxn) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockTxnMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockTxn)(nil).Abort))
}

// Changes mocks base method.
func (m *MockTxn) Changes() go_memdb.Changes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(go_memdb.Changes)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockTxnMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockTxn)(nil).Changes))
}

// Commit mocks base method.
func (m *MockTxn) Commit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit")
}

// Commit indicates an expected call of Commit.
func (mr *MockTxnMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxn)(nil).Commit))
}

// Defer mocks base method.
func (m *MockTxn) Defer(fn func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Defer", fn)
}

// Defer indicates an expected call of Defer.
func (mr *MockTxnMockRecorder) Defer(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defer", reflect.TypeOf((*MockTxn)(nil).Defer), fn)
}

// Delete mocks base method.
func (m *MockTxn) Delete(table string, obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", table, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTxnMockRecorder) Delete(table, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTxn)(nil).Delete), table, obj)
}

// DeleteAll mocks base method.
func (m *MockTxn) DeleteAll(table, index string, args ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAll", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockTxnMockRecorder) DeleteAll(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTxn)(nil).DeleteAll), varargs...)
}

// DeletePrefix mocks base method.
func (m *MockTxn) DeletePrefix(table, prefix_index, prefix string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrefix", table, prefix_index, prefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrefix indicates an expected call of DeletePrefix.
func (mr *MockTxnMockRecorder) DeletePrefix(table, prefix_index, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrefix", reflect.TypeOf((*MockTxn)(nil).DeletePrefix), table, prefix_index, prefix)
}

// First mocks base method.
func (m *MockTxn) First(table, index string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockTxnMockRecorder) First(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockTxn)(nil).First), varargs...)
}

// FirstWatch mocks base method.
func (m *MockTxn) FirstWatch(table, index string, args ...interface{}) (<-chan struct{}, interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstWatch", varargs...)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FirstWatch indicates an expected call of FirstWatch.
func (mr *MockTxnMockRecorder) FirstWatch(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstWatch", reflect.TypeOf((*MockTxn)(nil).FirstWatch), varargs...)
}

// Get mocks base method.
func (m *MockTxn) Get(table, index string, args ...interface{}) (go_memdb.ResultIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(go_memdb.ResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxnMockRecorder) Get(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxn)(nil).Get), varargs...)
}

// GetReverse mocks base method.
func (m *MockTxn) GetReverse(table, index string, args ...interface{}) (go_memdb.ResultIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReverse", varargs...)
	ret0, _ := ret[0].(go_memdb.ResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReverse indicates an expected call of GetReverse.
func (mr *MockTxnMockRecorder) GetReverse(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReverse", reflect.TypeOf((*MockTxn)(nil).GetReverse), varargs...)
}

// Insert mocks base method.
func (m *MockTxn) Insert(table string, obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", table, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTxnMockRecorder) Insert(table, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTxn)(nil).Insert), table, obj)
}

// Last mocks base method.
func (m *MockTxn) Last(table, index string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockTxnMockRecorder) Last(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockTxn)(nil).Last), varargs...)
}

// LastWatch mocks base method.
func (m *MockTxn) LastWatch(table, index string, args ...interface{}) (<-chan struct{}, interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LastWatch", varargs...)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastWatch indicates an expected call of LastWatch.
func (mr *MockTxnMockRecorder) LastWatch(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastWatch", reflect.TypeOf((*MockTxn)(nil).LastWatch), varargs...)
}

// LongestPrefix mocks base method.
func (m *MockTxn) LongestPrefix(table, index string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LongestPrefix", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LongestPrefix indicates an expected call of LongestPrefix.
func (mr *MockTxnMockRecorder) LongestPrefix(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LongestPrefix", reflect.TypeOf((*MockTxn)(nil).LongestPrefix), varargs...)
}

// LowerBound mocks base method.
func (m *MockTxn) LowerBound(table, index string, args ...interface{}) (go_memdb.ResultIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LowerBound", varargs...)
	ret0, _ := ret[0].(go_memdb.ResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LowerBound indicates an expected call of LowerBound.
func (mr *MockTxnMockRecorder) LowerBound(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LowerBound", reflect.TypeOf((*MockTxn)(nil).LowerBound), varargs...)
}

// ReverseLowerBound mocks base method.
func (m *MockTxn) ReverseLowerBound(table, index string, args ...interface{}) (go_memdb.ResultIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{table, index}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseLowerBound", varargs...)
	ret0, _ := ret[0].(go_memdb.ResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseLowerBound indicates an expected call of ReverseLowerBound.
func (mr *MockTxnMockRecorder) ReverseLowerBound(table, index interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table, index}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseLowerBound", reflect.TypeOf((*MockTxn)(nil).ReverseLowerBound), varargs...)
}

// Snapshot mocks base method.
func (m *MockTxn) Snapshot() Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(Txn)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockTxnMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockTxn)(nil).Snapshot))
}

// TrackChanges mocks base method.
func (m *MockTxn) TrackChanges() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackChanges")
}

// TrackChanges indicates an expected call of TrackChanges.
func (mr *MockTxnMockRecorder) TrackChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackChanges", reflect.TypeOf((*MockTxn)(nil).TrackChanges))
}
