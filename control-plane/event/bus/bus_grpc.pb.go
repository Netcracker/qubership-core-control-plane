// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EventBusClient is the client API for EventBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventBusClient interface {
	Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (EventBus_SubscribeClient, error)
	GetLastSnapshot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Event, error)
}

type eventBusClient struct {
	cc grpc.ClientConnInterface
}

func NewEventBusClient(cc grpc.ClientConnInterface) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (EventBus_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventBus_serviceDesc.Streams[0], "/bus.EventBus/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventBusSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventBus_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventBusSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventBusSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventBusClient) GetLastSnapshot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/bus.EventBus/GetLastSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventBusServer is the server API for EventBus service.
// All implementations must embed UnimplementedEventBusServer
// for forward compatibility
type EventBusServer interface {
	Subscribe(*Topic, EventBus_SubscribeServer) error
	GetLastSnapshot(context.Context, *Empty) (*Event, error)
	mustEmbedUnimplementedEventBusServer()
}

// UnimplementedEventBusServer must be embedded to have forward compatible implementations.
type UnimplementedEventBusServer struct {
}

func (UnimplementedEventBusServer) Subscribe(*Topic, EventBus_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventBusServer) GetLastSnapshot(context.Context, *Empty) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSnapshot not implemented")
}
func (UnimplementedEventBusServer) mustEmbedUnimplementedEventBusServer() {}

// UnsafeEventBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventBusServer will
// result in compilation errors.
type UnsafeEventBusServer interface {
	mustEmbedUnimplementedEventBusServer()
}

func RegisterEventBusServer(s grpc.ServiceRegistrar, srv EventBusServer) {
	s.RegisterService(&_EventBus_serviceDesc, srv)
}

func _EventBus_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).Subscribe(m, &eventBusSubscribeServer{stream})
}

type EventBus_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventBusSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventBusSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventBus_GetLastSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).GetLastSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bus.EventBus/GetLastSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).GetLastSnapshot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bus.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastSnapshot",
			Handler:    _EventBus_GetLastSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventBus_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bus.proto",
}
