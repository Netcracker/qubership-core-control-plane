package migration

import (
	"context"
	"database/sql"
	"github.com/google/uuid"
	"github.com/netcracker/qubership-core-control-plane/domain"
	"github.com/pkg/errors"
	"github.com/uptrace/bun"
)

func init() {
	migrations.MustRegister(func(ctx context.Context, db *bun.DB) error {
		err := db.RunInTx(ctx, &sql.TxOptions{}, func(ctx context.Context, tx bun.Tx) error {
			log.Infof("#10 Add column uuid to routes")
			_, err := tx.Exec("ALTER TABLE routes ADD COLUMN IF NOT EXISTS uuid varchar")
			if err != nil {
				return errors.Wrapf(err, "Can't add uuid column to routes table")
			}

			routesToSave := make([]v10Route, 0)
			rows, err := tx.NewSelect().Model((*v10Route)(nil)).Rows(ctx)
			for rows.Next() {
				var r v10Route
				err := rows.Scan(&r)
				if err != nil {
					break
				}
				r.Uuid = uuid.New().String()
				routesToSave = append(routesToSave, r)
			}
			for _, r := range routesToSave {
				_, err = tx.Exec("UPDATE routes set uuid=? where id=?", r.Uuid, r.Id)
				if err != nil {
					log.Panic("can not update route uuid: %s", err.Error())
				}
			}
			_, err = tx.Exec("ALTER TABLE routes DROP CONSTRAINT IF EXISTS unique_uuid;")
			if err != nil {
				return errors.Wrapf(err, "Can't drop existing constraint to uuid column on routes table")
			}
			_, err = tx.Exec("ALTER TABLE routes ADD CONSTRAINT unique_uuid UNIQUE (uuid);")
			if err != nil {
				return errors.Wrapf(err, "Can't add constraint to uuid column on routes table")
			}
			_, err = tx.Exec("ALTER TABLE routes ALTER COLUMN uuid SET NOT NULL;")
			if err != nil {
				return errors.Wrapf(err, "Can't alter uuid column on routes table")
			}
			return nil
		})
		return err
	}, func(ctx context.Context, db *bun.DB) error {
		return nil
	})
}

type v10Route struct {
	bun.BaseModel            `bun:"routes"`
	Id                       int32
	Uuid                     string          `bun:"uuid,notnull,type:varchar,unique"`
	VirtualHostId            int32           `bun:"virtualhostid,notnull"`
	RouteKey                 string          `bun:"routekey,notnull"`
	DirectResponseCode       uint32          `bun:"directresponse_status"`
	Prefix                   string          `bun:"rm_prefix"`
	Regexp                   string          `bun:"rm_regexp"`
	Path                     string          `bun:"rm_path"`
	ClusterName              string          `bun:"ra_clustername"`
	HostRewrite              string          `bun:"ra_hostrewrite"`
	HostAutoRewrite          domain.NullBool `bun:"ra_hostautorewrite"`
	PrefixRewrite            string          `bun:"ra_prefixrewrite"`
	PathRewrite              string          `bun:"ra_pathrewrite"`
	Version                  int32           `bun:",notnull"`
	Timeout                  domain.NullInt
	DeploymentVersion        string `bun:"deployment_version,notnull"`
	InitialDeploymentVersion string `bun:"initialdeploymentversion,notnull"`
	Autogenerated            bool   `bun:"autogenerated,default:false"`
}
