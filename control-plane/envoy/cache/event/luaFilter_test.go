package event

import (
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/google/uuid"
	"github.com/hashicorp/go-memdb"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/envoy/cache/action"
	mock_builder "github.com/netcracker/qubership-core-control-plane/control-plane/v2/test/mock/envoy/cache/builder"
)

func TestCompositeUpdateBuilder_processLuaFilterChanges(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockDao := getMockDao(ctrl)
	nodeGroupId1 := "nodeId1"
	nodeGroupId2 := "nodeId2"
	versionsByNodeGroup := nodeGroupEntityVersions{
		nodeGroupId1: {
			action.EnvoyListener: "test1",
		},
		nodeGroupId2: {
			action.EnvoyListener: "test2",
		},
	}
	mockUpdateAction := getMockUpdateAction(ctrl)
	mockBuilder := mock_builder.NewMockEnvoyConfigBuilder(ctrl)
	compositeUpdateBuilder := newCompositeUpdateBuilder(mockDao, versionsByNodeGroup, mockBuilder, mockUpdateAction)

	changes := []memdb.Change{
		{
			Before: &domain.LuaFilter{
				Id:   int32(1),
				Name: "before",
			},
			After: &domain.LuaFilter{
				Id:   int32(2),
				Name: "after",
			},
		},
	}
	
	routes := []*domain.Route{
		{
			Id:                int32(1),
			Uuid:              uuid.New().String(),
			VirtualHostId:     1,
			RouteKey:          "/api/v1/test",
			DeploymentVersion: "v1",
			ClusterName:       "clusterName1",
			LuaFilterName:     "test-lua-filter1",
		},
		{
			Id:                int32(2),
			Uuid:              uuid.New().String(),
			VirtualHostId:     1,
			RouteKey:          "/api/v1",
			DeploymentVersion: "v1",
			ClusterName:       "clusterName2",
			LuaFilterName:     "test-lua-filter2",
			Autogenerated:     true,
		},
	}

	mockDao.EXPECT().FindRoutesByLuaFilter("test-lua-filter1").Return([]*domain.Route{routes[0]}, nil)
	mockDao.EXPECT().FindRoutesByLuaFilter("test-lua-filter2").Return([]*domain.Route{routes[1]}, nil)

	compositeUpdateBuilder.processLuaFilterChanges(changes)
}

func TestChangeEventParser_processLuaFilterChanges(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockDao := getMockDao(ctrl)
	mockUpdateAction := getMockUpdateAction(ctrl)
	mockBuilder := mock_builder.NewMockEnvoyConfigBuilder(ctrl)
	changeEventParser := NewChangeEventParser(mockDao, mockUpdateAction, mockBuilder)

	actions := getMockActionsMap(ctrl)
	entityVersions := map[string]string{
		domain.ListenerTable: "test",
	}
	nodeGroup := "nodeGroup"

	changes := []memdb.Change{
		{
			After: &domain.LuaFilter{
				Id:   int32(2),
				Name: "test-lua-filter",
			},
		},
	}
	routes := []*domain.Route{
		{
			Id:                int32(1),
			VirtualHostId:     1,
			RouteKey:          "/api/v1/test",
			DeploymentVersion: "v1",
			ClusterName:       "clusterName1",
			LuaFilterName:     "test-lua-filter",
		},
	}

	routeConfig := &domain.RouteConfiguration{Id: int32(1), NodeGroupId: "nodeGroup"}
	mockDao.EXPECT().FindRoutesByLuaFilter("test-lua-filter").Return(routes, nil)
	mockDao.EXPECT().FindVirtualHostById(int32(1)).Return(&domain.VirtualHost{Id: int32(1), RouteConfigurationId: int32(1)}, nil)
	mockDao.EXPECT().FindRouteConfigById(int32(1)).Return(routeConfig, nil)
	granularUpdate := action.GranularEntityUpdate{}
	mockUpdateAction.EXPECT().RouteConfigUpdate(nodeGroup, entityVersions[domain.RouteConfigurationTable], routeConfig).Times(1).Return(granularUpdate)

	changeEventParser.processLuaFilterChanges(actions, entityVersions, nodeGroup, changes)
}
