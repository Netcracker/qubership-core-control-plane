// Code generated by MockGen. DO NOT EDIT.
// Source: ../../event/bus/bus.go

// Package mock_bus is a generated GoMock package.
package mock_bus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBusPublisher is a mock of BusPublisher interface.
type MockBusPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockBusPublisherMockRecorder
}

// MockBusPublisherMockRecorder is the mock recorder for MockBusPublisher.
type MockBusPublisherMockRecorder struct {
	mock *MockBusPublisher
}

// NewMockBusPublisher creates a new mock instance.
func NewMockBusPublisher(ctrl *gomock.Controller) *MockBusPublisher {
	mock := &MockBusPublisher{ctrl: ctrl}
	mock.recorder = &MockBusPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusPublisher) EXPECT() *MockBusPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockBusPublisher) Publish(topic string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockBusPublisherMockRecorder) Publish(topic, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBusPublisher)(nil).Publish), topic, data)
}

// Shutdown mocks base method.
func (m *MockBusPublisher) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBusPublisherMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBusPublisher)(nil).Shutdown))
}

// MockBusSubscriber is a mock of BusSubscriber interface.
type MockBusSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockBusSubscriberMockRecorder
}

// MockBusSubscriberMockRecorder is the mock recorder for MockBusSubscriber.
type MockBusSubscriberMockRecorder struct {
	mock *MockBusSubscriber
}

// NewMockBusSubscriber creates a new mock instance.
func NewMockBusSubscriber(ctrl *gomock.Controller) *MockBusSubscriber {
	mock := &MockBusSubscriber{ctrl: ctrl}
	mock.recorder = &MockBusSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusSubscriber) EXPECT() *MockBusSubscriberMockRecorder {
	return m.recorder
}

// Shutdown mocks base method.
func (m *MockBusSubscriber) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBusSubscriberMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBusSubscriber)(nil).Shutdown))
}

// Subscribe mocks base method.
func (m *MockBusSubscriber) Subscribe(topic string, handler func(interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", topic, handler)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockBusSubscriberMockRecorder) Subscribe(topic, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockBusSubscriber)(nil).Subscribe), topic, handler)
}
