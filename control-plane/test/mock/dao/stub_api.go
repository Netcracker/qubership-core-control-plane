// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	memdb "github.com/hashicorp/go-memdb"
	dao "github.com/netcracker/qubership-core-control-plane/control-plane/v2/dao"
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	msaddr "github.com/netcracker/qubership-core-control-plane/control-plane/v2/util/msaddr"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// DeleteCircuitBreakerById mocks base method.
func (m *MockDao) DeleteCircuitBreakerById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCircuitBreakerById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCircuitBreakerById indicates an expected call of DeleteCircuitBreakerById.
func (mr *MockDaoMockRecorder) DeleteCircuitBreakerById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCircuitBreakerById", reflect.TypeOf((*MockDao)(nil).DeleteCircuitBreakerById), Id)
}

// DeleteCluster mocks base method.
func (m *MockDao) DeleteCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockDaoMockRecorder) DeleteCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockDao)(nil).DeleteCluster), cluster)
}

// DeleteClusterByName mocks base method.
func (m *MockDao) DeleteClusterByName(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterByName", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterByName indicates an expected call of DeleteClusterByName.
func (mr *MockDaoMockRecorder) DeleteClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterByName", reflect.TypeOf((*MockDao)(nil).DeleteClusterByName), key)
}

// DeleteClustersNodeGroup mocks base method.
func (m *MockDao) DeleteClustersNodeGroup(relation *domain.ClustersNodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClustersNodeGroup", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClustersNodeGroup indicates an expected call of DeleteClustersNodeGroup.
func (mr *MockDaoMockRecorder) DeleteClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClustersNodeGroup", reflect.TypeOf((*MockDao)(nil).DeleteClustersNodeGroup), relation)
}

// DeleteClustersNodeGroupByClusterId mocks base method.
func (m *MockDao) DeleteClustersNodeGroupByClusterId(clusterId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClustersNodeGroupByClusterId", clusterId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClustersNodeGroupByClusterId indicates an expected call of DeleteClustersNodeGroupByClusterId.
func (mr *MockDaoMockRecorder) DeleteClustersNodeGroupByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClustersNodeGroupByClusterId", reflect.TypeOf((*MockDao)(nil).DeleteClustersNodeGroupByClusterId), clusterId)
}

// DeleteCompositeSatellite mocks base method.
func (m *MockDao) DeleteCompositeSatellite(namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompositeSatellite", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompositeSatellite indicates an expected call of DeleteCompositeSatellite.
func (mr *MockDaoMockRecorder) DeleteCompositeSatellite(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompositeSatellite", reflect.TypeOf((*MockDao)(nil).DeleteCompositeSatellite), namespace)
}

// DeleteDeploymentVersion mocks base method.
func (m *MockDao) DeleteDeploymentVersion(dVersion *domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentVersion", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentVersion indicates an expected call of DeleteDeploymentVersion.
func (mr *MockDaoMockRecorder) DeleteDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentVersion", reflect.TypeOf((*MockDao)(nil).DeleteDeploymentVersion), dVersion)
}

// DeleteDeploymentVersions mocks base method.
func (m *MockDao) DeleteDeploymentVersions(dVersion []*domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentVersions", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentVersions indicates an expected call of DeleteDeploymentVersions.
func (mr *MockDaoMockRecorder) DeleteDeploymentVersions(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentVersions", reflect.TypeOf((*MockDao)(nil).DeleteDeploymentVersions), dVersion)
}

// DeleteEndpoint mocks base method.
func (m *MockDao) DeleteEndpoint(endpoint *domain.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockDaoMockRecorder) DeleteEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockDao)(nil).DeleteEndpoint), endpoint)
}

// DeleteExtAuthzFilter mocks base method.
func (m *MockDao) DeleteExtAuthzFilter(extAuthzFilterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtAuthzFilter", extAuthzFilterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthzFilter indicates an expected call of DeleteExtAuthzFilter.
func (mr *MockDaoMockRecorder) DeleteExtAuthzFilter(extAuthzFilterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthzFilter", reflect.TypeOf((*MockDao)(nil).DeleteExtAuthzFilter), extAuthzFilterName)
}

// DeleteHashPolicyByEndpointId mocks base method.
func (m *MockDao) DeleteHashPolicyByEndpointId(endpointId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyByEndpointId", endpointId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashPolicyByEndpointId indicates an expected call of DeleteHashPolicyByEndpointId.
func (mr *MockDaoMockRecorder) DeleteHashPolicyByEndpointId(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyByEndpointId", reflect.TypeOf((*MockDao)(nil).DeleteHashPolicyByEndpointId), endpointId)
}

// DeleteHashPolicyById mocks base method.
func (m *MockDao) DeleteHashPolicyById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHashPolicyById indicates an expected call of DeleteHashPolicyById.
func (mr *MockDaoMockRecorder) DeleteHashPolicyById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyById", reflect.TypeOf((*MockDao)(nil).DeleteHashPolicyById), Id)
}

// DeleteHashPolicyByRouteId mocks base method.
func (m *MockDao) DeleteHashPolicyByRouteId(routeId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyByRouteId", routeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashPolicyByRouteId indicates an expected call of DeleteHashPolicyByRouteId.
func (mr *MockDaoMockRecorder) DeleteHashPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyByRouteId", reflect.TypeOf((*MockDao)(nil).DeleteHashPolicyByRouteId), routeId)
}

// DeleteHeaderMatcher mocks base method.
func (m *MockDao) DeleteHeaderMatcher(headerMatcher *domain.HeaderMatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatcher", headerMatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderMatcher indicates an expected call of DeleteHeaderMatcher.
func (mr *MockDaoMockRecorder) DeleteHeaderMatcher(headerMatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatcher", reflect.TypeOf((*MockDao)(nil).DeleteHeaderMatcher), headerMatcher)
}

// DeleteHeaderMatcherById mocks base method.
func (m *MockDao) DeleteHeaderMatcherById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatcherById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderMatcherById indicates an expected call of DeleteHeaderMatcherById.
func (mr *MockDaoMockRecorder) DeleteHeaderMatcherById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatcherById", reflect.TypeOf((*MockDao)(nil).DeleteHeaderMatcherById), Id)
}

// DeleteHeaderMatchersByRouteId mocks base method.
func (m *MockDao) DeleteHeaderMatchersByRouteId(routeId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatchersByRouteId", routeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHeaderMatchersByRouteId indicates an expected call of DeleteHeaderMatchersByRouteId.
func (mr *MockDaoMockRecorder) DeleteHeaderMatchersByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatchersByRouteId", reflect.TypeOf((*MockDao)(nil).DeleteHeaderMatchersByRouteId), routeId)
}

// DeleteHealthCheckById mocks base method.
func (m *MockDao) DeleteHealthCheckById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHealthCheckById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHealthCheckById indicates an expected call of DeleteHealthCheckById.
func (mr *MockDaoMockRecorder) DeleteHealthCheckById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHealthCheckById", reflect.TypeOf((*MockDao)(nil).DeleteHealthCheckById), Id)
}

// DeleteHealthChecksByClusterId mocks base method.
func (m *MockDao) DeleteHealthChecksByClusterId(clusterId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHealthChecksByClusterId", clusterId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHealthChecksByClusterId indicates an expected call of DeleteHealthChecksByClusterId.
func (mr *MockDaoMockRecorder) DeleteHealthChecksByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHealthChecksByClusterId", reflect.TypeOf((*MockDao)(nil).DeleteHealthChecksByClusterId), clusterId)
}

// DeleteListenerById mocks base method.
func (m *MockDao) DeleteListenerById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerById indicates an expected call of DeleteListenerById.
func (mr *MockDaoMockRecorder) DeleteListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerById", reflect.TypeOf((*MockDao)(nil).DeleteListenerById), id)
}

// DeleteListenerByNodeGroupName mocks base method.
func (m *MockDao) DeleteListenerByNodeGroupName(nodeGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerByNodeGroupName", nodeGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerByNodeGroupName indicates an expected call of DeleteListenerByNodeGroupName.
func (mr *MockDaoMockRecorder) DeleteListenerByNodeGroupName(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerByNodeGroupName", reflect.TypeOf((*MockDao)(nil).DeleteListenerByNodeGroupName), nodeGroupId)
}

// DeleteListenerLuaFilter mocks base method.
func (m *MockDao) DeleteListenerLuaFilter(relation *domain.ListenersLuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerLuaFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerLuaFilter indicates an expected call of DeleteListenerLuaFilter.
func (mr *MockDaoMockRecorder) DeleteListenerLuaFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerLuaFilter", reflect.TypeOf((*MockDao)(nil).DeleteListenerLuaFilter), relation)
}

// DeleteListenerWasmFilter mocks base method.
func (m *MockDao) DeleteListenerWasmFilter(relation *domain.ListenersWasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerWasmFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerWasmFilter indicates an expected call of DeleteListenerWasmFilter.
func (mr *MockDaoMockRecorder) DeleteListenerWasmFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWasmFilter", reflect.TypeOf((*MockDao)(nil).DeleteListenerWasmFilter), relation)
}

// DeleteLuaFilterById mocks base method.
func (m *MockDao) DeleteLuaFilterById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLuaFilterById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLuaFilterById indicates an expected call of DeleteLuaFilterById.
func (mr *MockDaoMockRecorder) DeleteLuaFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLuaFilterById", reflect.TypeOf((*MockDao)(nil).DeleteLuaFilterById), id)
}

// DeleteLuaFilterByName mocks base method.
func (m *MockDao) DeleteLuaFilterByName(filterName string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLuaFilterByName", filterName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLuaFilterByName indicates an expected call of DeleteLuaFilterByName.
func (mr *MockDaoMockRecorder) DeleteLuaFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLuaFilterByName", reflect.TypeOf((*MockDao)(nil).DeleteLuaFilterByName), filterName)
}

// DeleteMicroserviceVersion mocks base method.
func (m *MockDao) DeleteMicroserviceVersion(name string, namespace msaddr.Namespace, initialVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicroserviceVersion", name, namespace, initialVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMicroserviceVersion indicates an expected call of DeleteMicroserviceVersion.
func (mr *MockDaoMockRecorder) DeleteMicroserviceVersion(name, namespace, initialVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicroserviceVersion", reflect.TypeOf((*MockDao)(nil).DeleteMicroserviceVersion), name, namespace, initialVersion)
}

// DeleteNodeGroupByName mocks base method.
func (m *MockDao) DeleteNodeGroupByName(nodeGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeGroupByName", nodeGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeGroupByName indicates an expected call of DeleteNodeGroupByName.
func (mr *MockDaoMockRecorder) DeleteNodeGroupByName(nodeGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroupByName", reflect.TypeOf((*MockDao)(nil).DeleteNodeGroupByName), nodeGroupName)
}

// DeleteRateLimitByNameAndPriority mocks base method.
func (m *MockDao) DeleteRateLimitByNameAndPriority(name string, priority domain.ConfigPriority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateLimitByNameAndPriority", name, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitByNameAndPriority indicates an expected call of DeleteRateLimitByNameAndPriority.
func (mr *MockDaoMockRecorder) DeleteRateLimitByNameAndPriority(name, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitByNameAndPriority", reflect.TypeOf((*MockDao)(nil).DeleteRateLimitByNameAndPriority), name, priority)
}

// DeleteRetryPolicyById mocks base method.
func (m *MockDao) DeleteRetryPolicyById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryPolicyById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryPolicyById indicates an expected call of DeleteRetryPolicyById.
func (mr *MockDaoMockRecorder) DeleteRetryPolicyById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryPolicyById", reflect.TypeOf((*MockDao)(nil).DeleteRetryPolicyById), Id)
}

// DeleteRetryPolicyByRouteId mocks base method.
func (m *MockDao) DeleteRetryPolicyByRouteId(routeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryPolicyByRouteId", routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryPolicyByRouteId indicates an expected call of DeleteRetryPolicyByRouteId.
func (mr *MockDaoMockRecorder) DeleteRetryPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryPolicyByRouteId", reflect.TypeOf((*MockDao)(nil).DeleteRetryPolicyByRouteId), routeId)
}

// DeleteRouteById mocks base method.
func (m *MockDao) DeleteRouteById(routeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteById", routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteById indicates an expected call of DeleteRouteById.
func (mr *MockDaoMockRecorder) DeleteRouteById(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteById", reflect.TypeOf((*MockDao)(nil).DeleteRouteById), routeId)
}

// DeleteRouteByUUID mocks base method.
func (m *MockDao) DeleteRouteByUUID(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteByUUID", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteByUUID indicates an expected call of DeleteRouteByUUID.
func (mr *MockDaoMockRecorder) DeleteRouteByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteByUUID", reflect.TypeOf((*MockDao)(nil).DeleteRouteByUUID), uuid)
}

// DeleteRouteConfigById mocks base method.
func (m *MockDao) DeleteRouteConfigById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteConfigById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteConfigById indicates an expected call of DeleteRouteConfigById.
func (mr *MockDaoMockRecorder) DeleteRouteConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteConfigById", reflect.TypeOf((*MockDao)(nil).DeleteRouteConfigById), id)
}

// DeleteRoutesByAutoGeneratedAndDeploymentVersion mocks base method.
func (m *MockDao) DeleteRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated bool, dVersion string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutesByAutoGeneratedAndDeploymentVersion", autoGenerated, dVersion)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutesByAutoGeneratedAndDeploymentVersion indicates an expected call of DeleteRoutesByAutoGeneratedAndDeploymentVersion.
func (mr *MockDaoMockRecorder) DeleteRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutesByAutoGeneratedAndDeploymentVersion", reflect.TypeOf((*MockDao)(nil).DeleteRoutesByAutoGeneratedAndDeploymentVersion), autoGenerated, dVersion)
}

// DeleteStatefulSessionConfig mocks base method.
func (m *MockDao) DeleteStatefulSessionConfig(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSessionConfig", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSessionConfig indicates an expected call of DeleteStatefulSessionConfig.
func (mr *MockDaoMockRecorder) DeleteStatefulSessionConfig(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSessionConfig", reflect.TypeOf((*MockDao)(nil).DeleteStatefulSessionConfig), id)
}

// DeleteTcpKeepaliveById mocks base method.
func (m *MockDao) DeleteTcpKeepaliveById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTcpKeepaliveById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTcpKeepaliveById indicates an expected call of DeleteTcpKeepaliveById.
func (mr *MockDaoMockRecorder) DeleteTcpKeepaliveById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTcpKeepaliveById", reflect.TypeOf((*MockDao)(nil).DeleteTcpKeepaliveById), Id)
}

// DeleteThresholdById mocks base method.
func (m *MockDao) DeleteThresholdById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThresholdById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThresholdById indicates an expected call of DeleteThresholdById.
func (mr *MockDaoMockRecorder) DeleteThresholdById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThresholdById", reflect.TypeOf((*MockDao)(nil).DeleteThresholdById), Id)
}

// DeleteTlsConfigById mocks base method.
func (m *MockDao) DeleteTlsConfigById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTlsConfigById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTlsConfigById indicates an expected call of DeleteTlsConfigById.
func (mr *MockDaoMockRecorder) DeleteTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTlsConfigById", reflect.TypeOf((*MockDao)(nil).DeleteTlsConfigById), id)
}

// DeleteTlsConfigByIdAndNodeGroupName mocks base method.
func (m *MockDao) DeleteTlsConfigByIdAndNodeGroupName(relation *domain.TlsConfigsNodeGroups) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTlsConfigByIdAndNodeGroupName", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTlsConfigByIdAndNodeGroupName indicates an expected call of DeleteTlsConfigByIdAndNodeGroupName.
func (mr *MockDaoMockRecorder) DeleteTlsConfigByIdAndNodeGroupName(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTlsConfigByIdAndNodeGroupName", reflect.TypeOf((*MockDao)(nil).DeleteTlsConfigByIdAndNodeGroupName), relation)
}

// DeleteVirtualHost mocks base method.
func (m *MockDao) DeleteVirtualHost(host *domain.VirtualHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualHost", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHost indicates an expected call of DeleteVirtualHost.
func (mr *MockDaoMockRecorder) DeleteVirtualHost(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHost", reflect.TypeOf((*MockDao)(nil).DeleteVirtualHost), host)
}

// DeleteVirtualHostsDomain mocks base method.
func (m *MockDao) DeleteVirtualHostsDomain(virtualHostDomain *domain.VirtualHostDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualHostsDomain", virtualHostDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHostsDomain indicates an expected call of DeleteVirtualHostsDomain.
func (mr *MockDaoMockRecorder) DeleteVirtualHostsDomain(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHostsDomain", reflect.TypeOf((*MockDao)(nil).DeleteVirtualHostsDomain), virtualHostDomain)
}

// DeleteWasmFilterById mocks base method.
func (m *MockDao) DeleteWasmFilterById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmFilterById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmFilterById indicates an expected call of DeleteWasmFilterById.
func (mr *MockDaoMockRecorder) DeleteWasmFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmFilterById", reflect.TypeOf((*MockDao)(nil).DeleteWasmFilterById), id)
}

// DeleteWasmFilterByName mocks base method.
func (m *MockDao) DeleteWasmFilterByName(filterName string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmFilterByName", filterName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWasmFilterByName indicates an expected call of DeleteWasmFilterByName.
func (mr *MockDaoMockRecorder) DeleteWasmFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmFilterByName", reflect.TypeOf((*MockDao)(nil).DeleteWasmFilterByName), filterName)
}

// FindAllCircuitBreakers mocks base method.
func (m *MockDao) FindAllCircuitBreakers() ([]*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCircuitBreakers")
	ret0, _ := ret[0].([]*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCircuitBreakers indicates an expected call of FindAllCircuitBreakers.
func (mr *MockDaoMockRecorder) FindAllCircuitBreakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCircuitBreakers", reflect.TypeOf((*MockDao)(nil).FindAllCircuitBreakers))
}

// FindAllClusterWithNodeGroup mocks base method.
func (m *MockDao) FindAllClusterWithNodeGroup() ([]*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusterWithNodeGroup")
	ret0, _ := ret[0].([]*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusterWithNodeGroup indicates an expected call of FindAllClusterWithNodeGroup.
func (mr *MockDaoMockRecorder) FindAllClusterWithNodeGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusterWithNodeGroup", reflect.TypeOf((*MockDao)(nil).FindAllClusterWithNodeGroup))
}

// FindAllClusters mocks base method.
func (m *MockDao) FindAllClusters() ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusters")
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusters indicates an expected call of FindAllClusters.
func (mr *MockDaoMockRecorder) FindAllClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusters", reflect.TypeOf((*MockDao)(nil).FindAllClusters))
}

// FindAllCompositeSatellites mocks base method.
func (m *MockDao) FindAllCompositeSatellites() ([]*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCompositeSatellites")
	ret0, _ := ret[0].([]*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCompositeSatellites indicates an expected call of FindAllCompositeSatellites.
func (mr *MockDaoMockRecorder) FindAllCompositeSatellites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCompositeSatellites", reflect.TypeOf((*MockDao)(nil).FindAllCompositeSatellites))
}

// FindAllDeploymentVersions mocks base method.
func (m *MockDao) FindAllDeploymentVersions() ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDeploymentVersions")
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDeploymentVersions indicates an expected call of FindAllDeploymentVersions.
func (mr *MockDaoMockRecorder) FindAllDeploymentVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDeploymentVersions", reflect.TypeOf((*MockDao)(nil).FindAllDeploymentVersions))
}

// FindAllEndpoints mocks base method.
func (m *MockDao) FindAllEndpoints() ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEndpoints")
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEndpoints indicates an expected call of FindAllEndpoints.
func (mr *MockDaoMockRecorder) FindAllEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEndpoints", reflect.TypeOf((*MockDao)(nil).FindAllEndpoints))
}

// FindAllExtAuthzFilters mocks base method.
func (m *MockDao) FindAllExtAuthzFilters() ([]*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllExtAuthzFilters")
	ret0, _ := ret[0].([]*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllExtAuthzFilters indicates an expected call of FindAllExtAuthzFilters.
func (mr *MockDaoMockRecorder) FindAllExtAuthzFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllExtAuthzFilters", reflect.TypeOf((*MockDao)(nil).FindAllExtAuthzFilters))
}

// FindAllListenerLuaFilter mocks base method.
func (m *MockDao) FindAllListenerLuaFilter() ([]*domain.ListenersLuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerLuaFilter")
	ret0, _ := ret[0].([]*domain.ListenersLuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerLuaFilter indicates an expected call of FindAllListenerLuaFilter.
func (mr *MockDaoMockRecorder) FindAllListenerLuaFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerLuaFilter", reflect.TypeOf((*MockDao)(nil).FindAllListenerLuaFilter))
}

// FindAllListenerWasmFilter mocks base method.
func (m *MockDao) FindAllListenerWasmFilter() ([]*domain.ListenersWasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerWasmFilter")
	ret0, _ := ret[0].([]*domain.ListenersWasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerWasmFilter indicates an expected call of FindAllListenerWasmFilter.
func (mr *MockDaoMockRecorder) FindAllListenerWasmFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerWasmFilter", reflect.TypeOf((*MockDao)(nil).FindAllListenerWasmFilter))
}

// FindAllListeners mocks base method.
func (m *MockDao) FindAllListeners() ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListeners")
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListeners indicates an expected call of FindAllListeners.
func (mr *MockDaoMockRecorder) FindAllListeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListeners", reflect.TypeOf((*MockDao)(nil).FindAllListeners))
}

// FindAllLuaFilters mocks base method.
func (m *MockDao) FindAllLuaFilters() ([]*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLuaFilters")
	ret0, _ := ret[0].([]*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLuaFilters indicates an expected call of FindAllLuaFilters.
func (mr *MockDaoMockRecorder) FindAllLuaFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLuaFilters", reflect.TypeOf((*MockDao)(nil).FindAllLuaFilters))
}

// FindAllMicroserviceVersions mocks base method.
func (m *MockDao) FindAllMicroserviceVersions() ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMicroserviceVersions")
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMicroserviceVersions indicates an expected call of FindAllMicroserviceVersions.
func (mr *MockDaoMockRecorder) FindAllMicroserviceVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMicroserviceVersions", reflect.TypeOf((*MockDao)(nil).FindAllMicroserviceVersions))
}

// FindAllNodeGroups mocks base method.
func (m *MockDao) FindAllNodeGroups() ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNodeGroups")
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNodeGroups indicates an expected call of FindAllNodeGroups.
func (mr *MockDaoMockRecorder) FindAllNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNodeGroups", reflect.TypeOf((*MockDao)(nil).FindAllNodeGroups))
}

// FindAllRateLimits mocks base method.
func (m *MockDao) FindAllRateLimits() ([]*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRateLimits")
	ret0, _ := ret[0].([]*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRateLimits indicates an expected call of FindAllRateLimits.
func (mr *MockDaoMockRecorder) FindAllRateLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRateLimits", reflect.TypeOf((*MockDao)(nil).FindAllRateLimits))
}

// FindAllRouteConfigs mocks base method.
func (m *MockDao) FindAllRouteConfigs() ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRouteConfigs")
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRouteConfigs indicates an expected call of FindAllRouteConfigs.
func (mr *MockDaoMockRecorder) FindAllRouteConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRouteConfigs", reflect.TypeOf((*MockDao)(nil).FindAllRouteConfigs))
}

// FindAllRoutes mocks base method.
func (m *MockDao) FindAllRoutes() ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRoutes")
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRoutes indicates an expected call of FindAllRoutes.
func (mr *MockDaoMockRecorder) FindAllRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRoutes", reflect.TypeOf((*MockDao)(nil).FindAllRoutes))
}

// FindAllStatefulSessionConfigs mocks base method.
func (m *MockDao) FindAllStatefulSessionConfigs() ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStatefulSessionConfigs")
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStatefulSessionConfigs indicates an expected call of FindAllStatefulSessionConfigs.
func (mr *MockDaoMockRecorder) FindAllStatefulSessionConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStatefulSessionConfigs", reflect.TypeOf((*MockDao)(nil).FindAllStatefulSessionConfigs))
}

// FindAllTcpKeepalives mocks base method.
func (m *MockDao) FindAllTcpKeepalives() ([]*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTcpKeepalives")
	ret0, _ := ret[0].([]*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTcpKeepalives indicates an expected call of FindAllTcpKeepalives.
func (mr *MockDaoMockRecorder) FindAllTcpKeepalives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTcpKeepalives", reflect.TypeOf((*MockDao)(nil).FindAllTcpKeepalives))
}

// FindAllThresholds mocks base method.
func (m *MockDao) FindAllThresholds() ([]*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllThresholds")
	ret0, _ := ret[0].([]*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllThresholds indicates an expected call of FindAllThresholds.
func (mr *MockDaoMockRecorder) FindAllThresholds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllThresholds", reflect.TypeOf((*MockDao)(nil).FindAllThresholds))
}

// FindAllTlsConfigs mocks base method.
func (m *MockDao) FindAllTlsConfigs() ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigs")
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigs indicates an expected call of FindAllTlsConfigs.
func (mr *MockDaoMockRecorder) FindAllTlsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigs", reflect.TypeOf((*MockDao)(nil).FindAllTlsConfigs))
}

// FindAllTlsConfigsByNodeGroup mocks base method.
func (m *MockDao) FindAllTlsConfigsByNodeGroup(nodeGroup string) ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigsByNodeGroup", nodeGroup)
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigsByNodeGroup indicates an expected call of FindAllTlsConfigsByNodeGroup.
func (mr *MockDaoMockRecorder) FindAllTlsConfigsByNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigsByNodeGroup", reflect.TypeOf((*MockDao)(nil).FindAllTlsConfigsByNodeGroup), nodeGroup)
}

// FindAllVirtualHosts mocks base method.
func (m *MockDao) FindAllVirtualHosts() ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHosts")
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHosts indicates an expected call of FindAllVirtualHosts.
func (mr *MockDaoMockRecorder) FindAllVirtualHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHosts", reflect.TypeOf((*MockDao)(nil).FindAllVirtualHosts))
}

// FindAllVirtualHostsDomain mocks base method.
func (m *MockDao) FindAllVirtualHostsDomain() ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHostsDomain")
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHostsDomain indicates an expected call of FindAllVirtualHostsDomain.
func (mr *MockDaoMockRecorder) FindAllVirtualHostsDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHostsDomain", reflect.TypeOf((*MockDao)(nil).FindAllVirtualHostsDomain))
}

// FindAllWasmFilters mocks base method.
func (m *MockDao) FindAllWasmFilters() ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWasmFilters")
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWasmFilters indicates an expected call of FindAllWasmFilters.
func (mr *MockDaoMockRecorder) FindAllWasmFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWasmFilters", reflect.TypeOf((*MockDao)(nil).FindAllWasmFilters))
}

// FindCircuitBreakerById mocks base method.
func (m *MockDao) FindCircuitBreakerById(Id int32) (*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCircuitBreakerById", Id)
	ret0, _ := ret[0].(*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCircuitBreakerById indicates an expected call of FindCircuitBreakerById.
func (mr *MockDaoMockRecorder) FindCircuitBreakerById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCircuitBreakerById", reflect.TypeOf((*MockDao)(nil).FindCircuitBreakerById), Id)
}

// FindClusterByEndpointIn mocks base method.
func (m *MockDao) FindClusterByEndpointIn(endpoints []*domain.Endpoint) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByEndpointIn", endpoints)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByEndpointIn indicates an expected call of FindClusterByEndpointIn.
func (mr *MockDaoMockRecorder) FindClusterByEndpointIn(endpoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByEndpointIn", reflect.TypeOf((*MockDao)(nil).FindClusterByEndpointIn), endpoints)
}

// FindClusterById mocks base method.
func (m *MockDao) FindClusterById(id int32) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterById", id)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterById indicates an expected call of FindClusterById.
func (mr *MockDaoMockRecorder) FindClusterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterById", reflect.TypeOf((*MockDao)(nil).FindClusterById), id)
}

// FindClusterByName mocks base method.
func (m *MockDao) FindClusterByName(key string) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByName", key)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByName indicates an expected call of FindClusterByName.
func (mr *MockDaoMockRecorder) FindClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByName", reflect.TypeOf((*MockDao)(nil).FindClusterByName), key)
}

// FindClusterByNodeGroup mocks base method.
func (m *MockDao) FindClusterByNodeGroup(group *domain.NodeGroup) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByNodeGroup", group)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByNodeGroup indicates an expected call of FindClusterByNodeGroup.
func (mr *MockDaoMockRecorder) FindClusterByNodeGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByNodeGroup", reflect.TypeOf((*MockDao)(nil).FindClusterByNodeGroup), group)
}

// FindClustersByFamilyNameAndNamespace mocks base method.
func (m *MockDao) FindClustersByFamilyNameAndNamespace(familyName string, namespace msaddr.Namespace) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersByFamilyNameAndNamespace", familyName, namespace)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersByFamilyNameAndNamespace indicates an expected call of FindClustersByFamilyNameAndNamespace.
func (mr *MockDaoMockRecorder) FindClustersByFamilyNameAndNamespace(familyName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersByFamilyNameAndNamespace", reflect.TypeOf((*MockDao)(nil).FindClustersByFamilyNameAndNamespace), familyName, namespace)
}

// FindClustersNodeGroup mocks base method.
func (m *MockDao) FindClustersNodeGroup(relation *domain.ClustersNodeGroup) (*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersNodeGroup", relation)
	ret0, _ := ret[0].(*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersNodeGroup indicates an expected call of FindClustersNodeGroup.
func (mr *MockDaoMockRecorder) FindClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersNodeGroup", reflect.TypeOf((*MockDao)(nil).FindClustersNodeGroup), relation)
}

// FindCompositeSatelliteByNamespace mocks base method.
func (m *MockDao) FindCompositeSatelliteByNamespace(namespace string) (*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompositeSatelliteByNamespace", namespace)
	ret0, _ := ret[0].(*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompositeSatelliteByNamespace indicates an expected call of FindCompositeSatelliteByNamespace.
func (mr *MockDaoMockRecorder) FindCompositeSatelliteByNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompositeSatelliteByNamespace", reflect.TypeOf((*MockDao)(nil).FindCompositeSatelliteByNamespace), namespace)
}

// FindDeploymentVersion mocks base method.
func (m *MockDao) FindDeploymentVersion(version string) (*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersion", version)
	ret0, _ := ret[0].(*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersion indicates an expected call of FindDeploymentVersion.
func (mr *MockDaoMockRecorder) FindDeploymentVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindDeploymentVersion), version)
}

// FindDeploymentVersionsByStage mocks base method.
func (m *MockDao) FindDeploymentVersionsByStage(stage string) ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersionsByStage", stage)
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersionsByStage indicates an expected call of FindDeploymentVersionsByStage.
func (mr *MockDaoMockRecorder) FindDeploymentVersionsByStage(stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersionsByStage", reflect.TypeOf((*MockDao)(nil).FindDeploymentVersionsByStage), stage)
}

// FindEndpointById mocks base method.
func (m *MockDao) FindEndpointById(endpointId int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointById", endpointId)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointById indicates an expected call of FindEndpointById.
func (mr *MockDaoMockRecorder) FindEndpointById(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointById", reflect.TypeOf((*MockDao)(nil).FindEndpointById), endpointId)
}

// FindEndpointByStatefulSession mocks base method.
func (m *MockDao) FindEndpointByStatefulSession(statefulSessionId int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointByStatefulSession", statefulSessionId)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointByStatefulSession indicates an expected call of FindEndpointByStatefulSession.
func (mr *MockDaoMockRecorder) FindEndpointByStatefulSession(statefulSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointByStatefulSession", reflect.TypeOf((*MockDao)(nil).FindEndpointByStatefulSession), statefulSessionId)
}

// FindEndpointsByAddressAndPortAndDeploymentVersion mocks base method.
func (m *MockDao) FindEndpointsByAddressAndPortAndDeploymentVersion(address string, port int32, dVersion string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByAddressAndPortAndDeploymentVersion", address, port, dVersion)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByAddressAndPortAndDeploymentVersion indicates an expected call of FindEndpointsByAddressAndPortAndDeploymentVersion.
func (mr *MockDaoMockRecorder) FindEndpointsByAddressAndPortAndDeploymentVersion(address, port, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByAddressAndPortAndDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindEndpointsByAddressAndPortAndDeploymentVersion), address, port, dVersion)
}

// FindEndpointsByClusterId mocks base method.
func (m *MockDao) FindEndpointsByClusterId(clusterId int32) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterId", clusterId)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterId indicates an expected call of FindEndpointsByClusterId.
func (mr *MockDaoMockRecorder) FindEndpointsByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterId", reflect.TypeOf((*MockDao)(nil).FindEndpointsByClusterId), clusterId)
}

// FindEndpointsByClusterIdAndDeploymentVersion mocks base method.
func (m *MockDao) FindEndpointsByClusterIdAndDeploymentVersion(clusterId int32, dVersions *domain.DeploymentVersion) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterIdAndDeploymentVersion", clusterId, dVersions)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterIdAndDeploymentVersion indicates an expected call of FindEndpointsByClusterIdAndDeploymentVersion.
func (mr *MockDaoMockRecorder) FindEndpointsByClusterIdAndDeploymentVersion(clusterId, dVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterIdAndDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindEndpointsByClusterIdAndDeploymentVersion), clusterId, dVersions)
}

// FindEndpointsByClusterName mocks base method.
func (m *MockDao) FindEndpointsByClusterName(clusterName string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterName", clusterName)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterName indicates an expected call of FindEndpointsByClusterName.
func (mr *MockDaoMockRecorder) FindEndpointsByClusterName(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterName", reflect.TypeOf((*MockDao)(nil).FindEndpointsByClusterName), clusterName)
}

// FindEndpointsByDeploymentVersion mocks base method.
func (m *MockDao) FindEndpointsByDeploymentVersion(version string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByDeploymentVersion", version)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByDeploymentVersion indicates an expected call of FindEndpointsByDeploymentVersion.
func (mr *MockDaoMockRecorder) FindEndpointsByDeploymentVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindEndpointsByDeploymentVersion), version)
}

// FindEndpointsByDeploymentVersionsIn mocks base method.
func (m *MockDao) FindEndpointsByDeploymentVersionsIn(dVersions []*domain.DeploymentVersion) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByDeploymentVersionsIn", dVersions)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByDeploymentVersionsIn indicates an expected call of FindEndpointsByDeploymentVersionsIn.
func (mr *MockDaoMockRecorder) FindEndpointsByDeploymentVersionsIn(dVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByDeploymentVersionsIn", reflect.TypeOf((*MockDao)(nil).FindEndpointsByDeploymentVersionsIn), dVersions)
}

// FindEnvoyConfigVersion mocks base method.
func (m *MockDao) FindEnvoyConfigVersion(nodeGroup, entityType string) (*domain.EnvoyConfigVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEnvoyConfigVersion", nodeGroup, entityType)
	ret0, _ := ret[0].(*domain.EnvoyConfigVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEnvoyConfigVersion indicates an expected call of FindEnvoyConfigVersion.
func (mr *MockDaoMockRecorder) FindEnvoyConfigVersion(nodeGroup, entityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEnvoyConfigVersion", reflect.TypeOf((*MockDao)(nil).FindEnvoyConfigVersion), nodeGroup, entityType)
}

// FindExtAuthzFilterByName mocks base method.
func (m *MockDao) FindExtAuthzFilterByName(name string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByName", name)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByName indicates an expected call of FindExtAuthzFilterByName.
func (mr *MockDaoMockRecorder) FindExtAuthzFilterByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByName", reflect.TypeOf((*MockDao)(nil).FindExtAuthzFilterByName), name)
}

// FindExtAuthzFilterByNodeGroup mocks base method.
func (m *MockDao) FindExtAuthzFilterByNodeGroup(nodeGroup string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByNodeGroup", nodeGroup)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByNodeGroup indicates an expected call of FindExtAuthzFilterByNodeGroup.
func (mr *MockDaoMockRecorder) FindExtAuthzFilterByNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByNodeGroup", reflect.TypeOf((*MockDao)(nil).FindExtAuthzFilterByNodeGroup), nodeGroup)
}

// FindFirstVirtualHostByNameAndRouteConfigurationId mocks base method.
func (m *MockDao) FindFirstVirtualHostByNameAndRouteConfigurationId(name string, id int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstVirtualHostByNameAndRouteConfigurationId", name, id)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstVirtualHostByNameAndRouteConfigurationId indicates an expected call of FindFirstVirtualHostByNameAndRouteConfigurationId.
func (mr *MockDaoMockRecorder) FindFirstVirtualHostByNameAndRouteConfigurationId(name, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstVirtualHostByNameAndRouteConfigurationId", reflect.TypeOf((*MockDao)(nil).FindFirstVirtualHostByNameAndRouteConfigurationId), name, id)
}

// FindFirstVirtualHostByRouteConfigurationId mocks base method.
func (m *MockDao) FindFirstVirtualHostByRouteConfigurationId(routeConfigId int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstVirtualHostByRouteConfigurationId", routeConfigId)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstVirtualHostByRouteConfigurationId indicates an expected call of FindFirstVirtualHostByRouteConfigurationId.
func (mr *MockDaoMockRecorder) FindFirstVirtualHostByRouteConfigurationId(routeConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstVirtualHostByRouteConfigurationId", reflect.TypeOf((*MockDao)(nil).FindFirstVirtualHostByRouteConfigurationId), routeConfigId)
}

// FindHashPolicyByClusterAndVersions mocks base method.
func (m *MockDao) FindHashPolicyByClusterAndVersions(clusterName string, versions ...string) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{clusterName}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindHashPolicyByClusterAndVersions", varargs...)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByClusterAndVersions indicates an expected call of FindHashPolicyByClusterAndVersions.
func (mr *MockDaoMockRecorder) FindHashPolicyByClusterAndVersions(clusterName interface{}, versions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{clusterName}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByClusterAndVersions", reflect.TypeOf((*MockDao)(nil).FindHashPolicyByClusterAndVersions), varargs...)
}

// FindHashPolicyByEndpointId mocks base method.
func (m *MockDao) FindHashPolicyByEndpointId(endpointId int32) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyByEndpointId", endpointId)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByEndpointId indicates an expected call of FindHashPolicyByEndpointId.
func (mr *MockDaoMockRecorder) FindHashPolicyByEndpointId(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByEndpointId", reflect.TypeOf((*MockDao)(nil).FindHashPolicyByEndpointId), endpointId)
}

// FindHashPolicyByRouteId mocks base method.
func (m *MockDao) FindHashPolicyByRouteId(routeId int32) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyByRouteId", routeId)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByRouteId indicates an expected call of FindHashPolicyByRouteId.
func (mr *MockDaoMockRecorder) FindHashPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByRouteId", reflect.TypeOf((*MockDao)(nil).FindHashPolicyByRouteId), routeId)
}

// FindHeaderMatcherByRouteId mocks base method.
func (m *MockDao) FindHeaderMatcherByRouteId(routeId int32) ([]*domain.HeaderMatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHeaderMatcherByRouteId", routeId)
	ret0, _ := ret[0].([]*domain.HeaderMatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHeaderMatcherByRouteId indicates an expected call of FindHeaderMatcherByRouteId.
func (mr *MockDaoMockRecorder) FindHeaderMatcherByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHeaderMatcherByRouteId", reflect.TypeOf((*MockDao)(nil).FindHeaderMatcherByRouteId), routeId)
}

// FindHealthChecksByClusterId mocks base method.
func (m *MockDao) FindHealthChecksByClusterId(clusterId int32) ([]*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHealthChecksByClusterId", clusterId)
	ret0, _ := ret[0].([]*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHealthChecksByClusterId indicates an expected call of FindHealthChecksByClusterId.
func (mr *MockDaoMockRecorder) FindHealthChecksByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHealthChecksByClusterId", reflect.TypeOf((*MockDao)(nil).FindHealthChecksByClusterId), clusterId)
}

// FindListenerById mocks base method.
func (m *MockDao) FindListenerById(id int32) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerById", id)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerById indicates an expected call of FindListenerById.
func (mr *MockDaoMockRecorder) FindListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerById", reflect.TypeOf((*MockDao)(nil).FindListenerById), id)
}

// FindListenerByNodeGroupIdAndName mocks base method.
func (m *MockDao) FindListenerByNodeGroupIdAndName(nodeGroupId, name string) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerByNodeGroupIdAndName", nodeGroupId, name)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerByNodeGroupIdAndName indicates an expected call of FindListenerByNodeGroupIdAndName.
func (mr *MockDaoMockRecorder) FindListenerByNodeGroupIdAndName(nodeGroupId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerByNodeGroupIdAndName", reflect.TypeOf((*MockDao)(nil).FindListenerByNodeGroupIdAndName), nodeGroupId, name)
}

// FindListenerIdsByLuaFilterId mocks base method.
func (m *MockDao) FindListenerIdsByLuaFilterId(luaFilterId int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerIdsByLuaFilterId", luaFilterId)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerIdsByLuaFilterId indicates an expected call of FindListenerIdsByLuaFilterId.
func (mr *MockDaoMockRecorder) FindListenerIdsByLuaFilterId(luaFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerIdsByLuaFilterId", reflect.TypeOf((*MockDao)(nil).FindListenerIdsByLuaFilterId), luaFilterId)
}

// FindListenerIdsByWasmFilterId mocks base method.
func (m *MockDao) FindListenerIdsByWasmFilterId(wasmFilterId int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerIdsByWasmFilterId", wasmFilterId)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerIdsByWasmFilterId indicates an expected call of FindListenerIdsByWasmFilterId.
func (mr *MockDaoMockRecorder) FindListenerIdsByWasmFilterId(wasmFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerIdsByWasmFilterId", reflect.TypeOf((*MockDao)(nil).FindListenerIdsByWasmFilterId), wasmFilterId)
}

// FindListenersByNodeGroupId mocks base method.
func (m *MockDao) FindListenersByNodeGroupId(nodeGroupId string) ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenersByNodeGroupId", nodeGroupId)
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenersByNodeGroupId indicates an expected call of FindListenersByNodeGroupId.
func (mr *MockDaoMockRecorder) FindListenersByNodeGroupId(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenersByNodeGroupId", reflect.TypeOf((*MockDao)(nil).FindListenersByNodeGroupId), nodeGroupId)
}

// FindLuaFilterByListenerId mocks base method.
func (m *MockDao) FindLuaFilterByListenerId(listenerId int32) ([]*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLuaFilterByListenerId", listenerId)
	ret0, _ := ret[0].([]*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLuaFilterByListenerId indicates an expected call of FindLuaFilterByListenerId.
func (mr *MockDaoMockRecorder) FindLuaFilterByListenerId(listenerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLuaFilterByListenerId", reflect.TypeOf((*MockDao)(nil).FindLuaFilterByListenerId), listenerId)
}

// FindLuaFilterByName mocks base method.
func (m *MockDao) FindLuaFilterByName(filterName string) (*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLuaFilterByName", filterName)
	ret0, _ := ret[0].(*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLuaFilterByName indicates an expected call of FindLuaFilterByName.
func (mr *MockDaoMockRecorder) FindLuaFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLuaFilterByName", reflect.TypeOf((*MockDao)(nil).FindLuaFilterByName), filterName)
}

// FindMicroserviceVersionByNameAndInitialVersion mocks base method.
func (m *MockDao) FindMicroserviceVersionByNameAndInitialVersion(name string, namespace msaddr.Namespace, initialVersion string) (*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionByNameAndInitialVersion", name, namespace, initialVersion)
	ret0, _ := ret[0].(*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionByNameAndInitialVersion indicates an expected call of FindMicroserviceVersionByNameAndInitialVersion.
func (mr *MockDaoMockRecorder) FindMicroserviceVersionByNameAndInitialVersion(name, namespace, initialVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionByNameAndInitialVersion", reflect.TypeOf((*MockDao)(nil).FindMicroserviceVersionByNameAndInitialVersion), name, namespace, initialVersion)
}

// FindMicroserviceVersionsByNameAndNamespace mocks base method.
func (m *MockDao) FindMicroserviceVersionsByNameAndNamespace(name string, namespace msaddr.Namespace) ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionsByNameAndNamespace", name, namespace)
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionsByNameAndNamespace indicates an expected call of FindMicroserviceVersionsByNameAndNamespace.
func (mr *MockDaoMockRecorder) FindMicroserviceVersionsByNameAndNamespace(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionsByNameAndNamespace", reflect.TypeOf((*MockDao)(nil).FindMicroserviceVersionsByNameAndNamespace), name, namespace)
}

// FindMicroserviceVersionsByVersion mocks base method.
func (m *MockDao) FindMicroserviceVersionsByVersion(version *domain.DeploymentVersion) ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionsByVersion", version)
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionsByVersion indicates an expected call of FindMicroserviceVersionsByVersion.
func (mr *MockDaoMockRecorder) FindMicroserviceVersionsByVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionsByVersion", reflect.TypeOf((*MockDao)(nil).FindMicroserviceVersionsByVersion), version)
}

// FindNodeGroupByName mocks base method.
func (m *MockDao) FindNodeGroupByName(name string) (*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupByName", name)
	ret0, _ := ret[0].(*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupByName indicates an expected call of FindNodeGroupByName.
func (mr *MockDaoMockRecorder) FindNodeGroupByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupByName", reflect.TypeOf((*MockDao)(nil).FindNodeGroupByName), name)
}

// FindNodeGroupsByCluster mocks base method.
func (m *MockDao) FindNodeGroupsByCluster(cluster *domain.Cluster) ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupsByCluster", cluster)
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupsByCluster indicates an expected call of FindNodeGroupsByCluster.
func (mr *MockDaoMockRecorder) FindNodeGroupsByCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupsByCluster", reflect.TypeOf((*MockDao)(nil).FindNodeGroupsByCluster), cluster)
}

// FindRateLimitByNameWithHighestPriority mocks base method.
func (m *MockDao) FindRateLimitByNameWithHighestPriority(name string) (*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRateLimitByNameWithHighestPriority", name)
	ret0, _ := ret[0].(*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRateLimitByNameWithHighestPriority indicates an expected call of FindRateLimitByNameWithHighestPriority.
func (mr *MockDaoMockRecorder) FindRateLimitByNameWithHighestPriority(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRateLimitByNameWithHighestPriority", reflect.TypeOf((*MockDao)(nil).FindRateLimitByNameWithHighestPriority), name)
}

// FindRetryPolicyByRouteId mocks base method.
func (m *MockDao) FindRetryPolicyByRouteId(routeId int32) (*domain.RetryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryPolicyByRouteId", routeId)
	ret0, _ := ret[0].(*domain.RetryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRetryPolicyByRouteId indicates an expected call of FindRetryPolicyByRouteId.
func (mr *MockDaoMockRecorder) FindRetryPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryPolicyByRouteId", reflect.TypeOf((*MockDao)(nil).FindRetryPolicyByRouteId), routeId)
}

// FindRouteById mocks base method.
func (m *MockDao) FindRouteById(routeId int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteById", routeId)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteById indicates an expected call of FindRouteById.
func (mr *MockDaoMockRecorder) FindRouteById(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteById", reflect.TypeOf((*MockDao)(nil).FindRouteById), routeId)
}

// FindRouteByStatefulSession mocks base method.
func (m *MockDao) FindRouteByStatefulSession(statefulSessionId int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteByStatefulSession", statefulSessionId)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteByStatefulSession indicates an expected call of FindRouteByStatefulSession.
func (mr *MockDaoMockRecorder) FindRouteByStatefulSession(statefulSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteByStatefulSession", reflect.TypeOf((*MockDao)(nil).FindRouteByStatefulSession), statefulSessionId)
}

// FindRouteByUuid mocks base method.
func (m *MockDao) FindRouteByUuid(uuid string) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteByUuid", uuid)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteByUuid indicates an expected call of FindRouteByUuid.
func (mr *MockDaoMockRecorder) FindRouteByUuid(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteByUuid", reflect.TypeOf((*MockDao)(nil).FindRouteByUuid), uuid)
}

// FindRouteConfigById mocks base method.
func (m *MockDao) FindRouteConfigById(routeConfigurationId int32) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigById", routeConfigurationId)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigById indicates an expected call of FindRouteConfigById.
func (mr *MockDaoMockRecorder) FindRouteConfigById(routeConfigurationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigById", reflect.TypeOf((*MockDao)(nil).FindRouteConfigById), routeConfigurationId)
}

// FindRouteConfigByNodeGroupIdAndName mocks base method.
func (m *MockDao) FindRouteConfigByNodeGroupIdAndName(nodeGroupId, name string) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigByNodeGroupIdAndName", nodeGroupId, name)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigByNodeGroupIdAndName indicates an expected call of FindRouteConfigByNodeGroupIdAndName.
func (mr *MockDaoMockRecorder) FindRouteConfigByNodeGroupIdAndName(nodeGroupId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigByNodeGroupIdAndName", reflect.TypeOf((*MockDao)(nil).FindRouteConfigByNodeGroupIdAndName), nodeGroupId, name)
}

// FindRouteConfigsByEndpoint mocks base method.
func (m *MockDao) FindRouteConfigsByEndpoint(endpoint *domain.Endpoint) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByEndpoint", endpoint)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByEndpoint indicates an expected call of FindRouteConfigsByEndpoint.
func (mr *MockDaoMockRecorder) FindRouteConfigsByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByEndpoint", reflect.TypeOf((*MockDao)(nil).FindRouteConfigsByEndpoint), endpoint)
}

// FindRouteConfigsByNodeGroupId mocks base method.
func (m *MockDao) FindRouteConfigsByNodeGroupId(nodeGroupId string) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByNodeGroupId", nodeGroupId)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByNodeGroupId indicates an expected call of FindRouteConfigsByNodeGroupId.
func (mr *MockDaoMockRecorder) FindRouteConfigsByNodeGroupId(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByNodeGroupId", reflect.TypeOf((*MockDao)(nil).FindRouteConfigsByNodeGroupId), nodeGroupId)
}

// FindRouteConfigsByRouteDeploymentVersion mocks base method.
func (m *MockDao) FindRouteConfigsByRouteDeploymentVersion(deploymentVersion string) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByRouteDeploymentVersion", deploymentVersion)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByRouteDeploymentVersion indicates an expected call of FindRouteConfigsByRouteDeploymentVersion.
func (mr *MockDaoMockRecorder) FindRouteConfigsByRouteDeploymentVersion(deploymentVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByRouteDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindRouteConfigsByRouteDeploymentVersion), deploymentVersion)
}

// FindRoutesByAutoGeneratedAndDeploymentVersion mocks base method.
func (m *MockDao) FindRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated bool, dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByAutoGeneratedAndDeploymentVersion", autoGenerated, dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByAutoGeneratedAndDeploymentVersion indicates an expected call of FindRoutesByAutoGeneratedAndDeploymentVersion.
func (mr *MockDaoMockRecorder) FindRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByAutoGeneratedAndDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindRoutesByAutoGeneratedAndDeploymentVersion), autoGenerated, dVersion)
}

// FindRoutesByClusterName mocks base method.
func (m *MockDao) FindRoutesByClusterName(clusterName string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterName", clusterName)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterName indicates an expected call of FindRoutesByClusterName.
func (mr *MockDaoMockRecorder) FindRoutesByClusterName(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterName", reflect.TypeOf((*MockDao)(nil).FindRoutesByClusterName), clusterName)
}

// FindRoutesByClusterNameAndDeploymentVersion mocks base method.
func (m *MockDao) FindRoutesByClusterNameAndDeploymentVersion(clusterName, dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterNameAndDeploymentVersion", clusterName, dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterNameAndDeploymentVersion indicates an expected call of FindRoutesByClusterNameAndDeploymentVersion.
func (mr *MockDaoMockRecorder) FindRoutesByClusterNameAndDeploymentVersion(clusterName, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterNameAndDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindRoutesByClusterNameAndDeploymentVersion), clusterName, dVersion)
}

// FindRoutesByClusterNamePrefix mocks base method.
func (m *MockDao) FindRoutesByClusterNamePrefix(clusterNamePrefix string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterNamePrefix", clusterNamePrefix)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterNamePrefix indicates an expected call of FindRoutesByClusterNamePrefix.
func (mr *MockDaoMockRecorder) FindRoutesByClusterNamePrefix(clusterNamePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterNamePrefix", reflect.TypeOf((*MockDao)(nil).FindRoutesByClusterNamePrefix), clusterNamePrefix)
}

// FindRoutesByDeploymentVersion mocks base method.
func (m *MockDao) FindRoutesByDeploymentVersion(dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersion", dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersion indicates an expected call of FindRoutesByDeploymentVersion.
func (mr *MockDaoMockRecorder) FindRoutesByDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindRoutesByDeploymentVersion), dVersion)
}

// FindRoutesByDeploymentVersionAndRouteKey mocks base method.
func (m *MockDao) FindRoutesByDeploymentVersionAndRouteKey(deploymentVersion, routeKey string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionAndRouteKey", deploymentVersion, routeKey)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionAndRouteKey indicates an expected call of FindRoutesByDeploymentVersionAndRouteKey.
func (mr *MockDaoMockRecorder) FindRoutesByDeploymentVersionAndRouteKey(deploymentVersion, routeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionAndRouteKey", reflect.TypeOf((*MockDao)(nil).FindRoutesByDeploymentVersionAndRouteKey), deploymentVersion, routeKey)
}

// FindRoutesByDeploymentVersionIn mocks base method.
func (m *MockDao) FindRoutesByDeploymentVersionIn(dVersions ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionIn", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionIn indicates an expected call of FindRoutesByDeploymentVersionIn.
func (mr *MockDaoMockRecorder) FindRoutesByDeploymentVersionIn(dVersions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionIn", reflect.TypeOf((*MockDao)(nil).FindRoutesByDeploymentVersionIn), dVersions...)
}

// FindRoutesByDeploymentVersionStageIn mocks base method.
func (m *MockDao) FindRoutesByDeploymentVersionStageIn(dVersionStage ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersionStage {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionStageIn", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionStageIn indicates an expected call of FindRoutesByDeploymentVersionStageIn.
func (mr *MockDaoMockRecorder) FindRoutesByDeploymentVersionStageIn(dVersionStage ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionStageIn", reflect.TypeOf((*MockDao)(nil).FindRoutesByDeploymentVersionStageIn), dVersionStage...)
}

// FindRoutesByDeploymentVersions mocks base method.
func (m *MockDao) FindRoutesByDeploymentVersions(dVersions ...*domain.DeploymentVersion) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersions", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersions indicates an expected call of FindRoutesByDeploymentVersions.
func (mr *MockDaoMockRecorder) FindRoutesByDeploymentVersions(dVersions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersions", reflect.TypeOf((*MockDao)(nil).FindRoutesByDeploymentVersions), dVersions...)
}

// FindRoutesByNamespaceHeaderIsNot mocks base method.
func (m *MockDao) FindRoutesByNamespaceHeaderIsNot(headerName string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByNamespaceHeaderIsNot", headerName)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByNamespaceHeaderIsNot indicates an expected call of FindRoutesByNamespaceHeaderIsNot.
func (mr *MockDaoMockRecorder) FindRoutesByNamespaceHeaderIsNot(headerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByNamespaceHeaderIsNot", reflect.TypeOf((*MockDao)(nil).FindRoutesByNamespaceHeaderIsNot), headerName)
}

// FindRoutesByRateLimit mocks base method.
func (m *MockDao) FindRoutesByRateLimit(rateLimitId string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByRateLimit", rateLimitId)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByRateLimit indicates an expected call of FindRoutesByRateLimit.
func (mr *MockDaoMockRecorder) FindRoutesByRateLimit(rateLimitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByRateLimit", reflect.TypeOf((*MockDao)(nil).FindRoutesByRateLimit), rateLimitId)
}

// FindRoutesByUUIDPrefix mocks base method.
func (m *MockDao) FindRoutesByUUIDPrefix(prefixUuid string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByUUIDPrefix", prefixUuid)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByUUIDPrefix indicates an expected call of FindRoutesByUUIDPrefix.
func (mr *MockDaoMockRecorder) FindRoutesByUUIDPrefix(prefixUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByUUIDPrefix", reflect.TypeOf((*MockDao)(nil).FindRoutesByUUIDPrefix), prefixUuid)
}

// FindRoutesByVirtualHostId mocks base method.
func (m *MockDao) FindRoutesByVirtualHostId(virtualHostId int32) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostId", virtualHostId)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostId indicates an expected call of FindRoutesByVirtualHostId.
func (mr *MockDaoMockRecorder) FindRoutesByVirtualHostId(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostId", reflect.TypeOf((*MockDao)(nil).FindRoutesByVirtualHostId), virtualHostId)
}

// FindRoutesByVirtualHostIdAndDeploymentVersion mocks base method.
func (m *MockDao) FindRoutesByVirtualHostIdAndDeploymentVersion(virtualHostId int32, version string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostIdAndDeploymentVersion", virtualHostId, version)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostIdAndDeploymentVersion indicates an expected call of FindRoutesByVirtualHostIdAndDeploymentVersion.
func (mr *MockDaoMockRecorder) FindRoutesByVirtualHostIdAndDeploymentVersion(virtualHostId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostIdAndDeploymentVersion", reflect.TypeOf((*MockDao)(nil).FindRoutesByVirtualHostIdAndDeploymentVersion), virtualHostId, version)
}

// FindRoutesByVirtualHostIdAndRouteKey mocks base method.
func (m *MockDao) FindRoutesByVirtualHostIdAndRouteKey(vHostId int32, routeKey string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostIdAndRouteKey", vHostId, routeKey)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostIdAndRouteKey indicates an expected call of FindRoutesByVirtualHostIdAndRouteKey.
func (mr *MockDaoMockRecorder) FindRoutesByVirtualHostIdAndRouteKey(vHostId, routeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostIdAndRouteKey", reflect.TypeOf((*MockDao)(nil).FindRoutesByVirtualHostIdAndRouteKey), vHostId, routeKey)
}

// FindStatefulSessionConfigById mocks base method.
func (m *MockDao) FindStatefulSessionConfigById(id int32) (*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigById", id)
	ret0, _ := ret[0].(*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigById indicates an expected call of FindStatefulSessionConfigById.
func (mr *MockDaoMockRecorder) FindStatefulSessionConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigById", reflect.TypeOf((*MockDao)(nil).FindStatefulSessionConfigById), id)
}

// FindStatefulSessionConfigsByCluster mocks base method.
func (m *MockDao) FindStatefulSessionConfigsByCluster(cluster *domain.Cluster) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByCluster", cluster)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByCluster indicates an expected call of FindStatefulSessionConfigsByCluster.
func (mr *MockDaoMockRecorder) FindStatefulSessionConfigsByCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByCluster", reflect.TypeOf((*MockDao)(nil).FindStatefulSessionConfigsByCluster), cluster)
}

// FindStatefulSessionConfigsByClusterAndVersion mocks base method.
func (m *MockDao) FindStatefulSessionConfigsByClusterAndVersion(clusterName string, namespace msaddr.Namespace, version *domain.DeploymentVersion) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByClusterAndVersion", clusterName, namespace, version)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByClusterAndVersion indicates an expected call of FindStatefulSessionConfigsByClusterAndVersion.
func (mr *MockDaoMockRecorder) FindStatefulSessionConfigsByClusterAndVersion(clusterName, namespace, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByClusterAndVersion", reflect.TypeOf((*MockDao)(nil).FindStatefulSessionConfigsByClusterAndVersion), clusterName, namespace, version)
}

// FindStatefulSessionConfigsByClusterName mocks base method.
func (m *MockDao) FindStatefulSessionConfigsByClusterName(clusterName string, namespace msaddr.Namespace) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByClusterName", clusterName, namespace)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByClusterName indicates an expected call of FindStatefulSessionConfigsByClusterName.
func (mr *MockDaoMockRecorder) FindStatefulSessionConfigsByClusterName(clusterName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByClusterName", reflect.TypeOf((*MockDao)(nil).FindStatefulSessionConfigsByClusterName), clusterName, namespace)
}

// FindStatefulSessionConfigsByCookieName mocks base method.
func (m *MockDao) FindStatefulSessionConfigsByCookieName(cookieName string) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByCookieName", cookieName)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByCookieName indicates an expected call of FindStatefulSessionConfigsByCookieName.
func (mr *MockDaoMockRecorder) FindStatefulSessionConfigsByCookieName(cookieName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByCookieName", reflect.TypeOf((*MockDao)(nil).FindStatefulSessionConfigsByCookieName), cookieName)
}

// FindTcpKeepaliveById mocks base method.
func (m *MockDao) FindTcpKeepaliveById(Id int32) (*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTcpKeepaliveById", Id)
	ret0, _ := ret[0].(*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTcpKeepaliveById indicates an expected call of FindTcpKeepaliveById.
func (mr *MockDaoMockRecorder) FindTcpKeepaliveById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTcpKeepaliveById", reflect.TypeOf((*MockDao)(nil).FindTcpKeepaliveById), Id)
}

// FindThresholdById mocks base method.
func (m *MockDao) FindThresholdById(Id int32) (*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindThresholdById", Id)
	ret0, _ := ret[0].(*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindThresholdById indicates an expected call of FindThresholdById.
func (mr *MockDaoMockRecorder) FindThresholdById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindThresholdById", reflect.TypeOf((*MockDao)(nil).FindThresholdById), Id)
}

// FindTlsConfigById mocks base method.
func (m *MockDao) FindTlsConfigById(id int32) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigById", id)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigById indicates an expected call of FindTlsConfigById.
func (mr *MockDaoMockRecorder) FindTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigById", reflect.TypeOf((*MockDao)(nil).FindTlsConfigById), id)
}

// FindTlsConfigByName mocks base method.
func (m *MockDao) FindTlsConfigByName(name string) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigByName", name)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigByName indicates an expected call of FindTlsConfigByName.
func (mr *MockDaoMockRecorder) FindTlsConfigByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigByName", reflect.TypeOf((*MockDao)(nil).FindTlsConfigByName), name)
}

// FindVirtualHostById mocks base method.
func (m *MockDao) FindVirtualHostById(virtualHostId int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostById", virtualHostId)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostById indicates an expected call of FindVirtualHostById.
func (mr *MockDaoMockRecorder) FindVirtualHostById(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostById", reflect.TypeOf((*MockDao)(nil).FindVirtualHostById), virtualHostId)
}

// FindVirtualHostDomainByVirtualHostId mocks base method.
func (m *MockDao) FindVirtualHostDomainByVirtualHostId(virtualHostId int32) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostDomainByVirtualHostId", virtualHostId)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostDomainByVirtualHostId indicates an expected call of FindVirtualHostDomainByVirtualHostId.
func (mr *MockDaoMockRecorder) FindVirtualHostDomainByVirtualHostId(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostDomainByVirtualHostId", reflect.TypeOf((*MockDao)(nil).FindVirtualHostDomainByVirtualHostId), virtualHostId)
}

// FindVirtualHostDomainsByHost mocks base method.
func (m *MockDao) FindVirtualHostDomainsByHost(virtualHostDomain string) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostDomainsByHost", virtualHostDomain)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostDomainsByHost indicates an expected call of FindVirtualHostDomainsByHost.
func (mr *MockDaoMockRecorder) FindVirtualHostDomainsByHost(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostDomainsByHost", reflect.TypeOf((*MockDao)(nil).FindVirtualHostDomainsByHost), virtualHostDomain)
}

// FindVirtualHostsByRouteConfigurationId mocks base method.
func (m *MockDao) FindVirtualHostsByRouteConfigurationId(routeConfigId int32) ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostsByRouteConfigurationId", routeConfigId)
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostsByRouteConfigurationId indicates an expected call of FindVirtualHostsByRouteConfigurationId.
func (mr *MockDaoMockRecorder) FindVirtualHostsByRouteConfigurationId(routeConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostsByRouteConfigurationId", reflect.TypeOf((*MockDao)(nil).FindVirtualHostsByRouteConfigurationId), routeConfigId)
}

// FindWasmFilterByListenerId mocks base method.
func (m *MockDao) FindWasmFilterByListenerId(listenerId int32) ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterByListenerId", listenerId)
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterByListenerId indicates an expected call of FindWasmFilterByListenerId.
func (mr *MockDaoMockRecorder) FindWasmFilterByListenerId(listenerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterByListenerId", reflect.TypeOf((*MockDao)(nil).FindWasmFilterByListenerId), listenerId)
}

// FindWasmFilterByName mocks base method.
func (m *MockDao) FindWasmFilterByName(filterName string) (*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterByName", filterName)
	ret0, _ := ret[0].(*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterByName indicates an expected call of FindWasmFilterByName.
func (mr *MockDaoMockRecorder) FindWasmFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterByName", reflect.TypeOf((*MockDao)(nil).FindWasmFilterByName), filterName)
}

// HasLuaFilterWithId mocks base method.
func (m *MockDao) HasLuaFilterWithId(listenerId, luaFilterId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLuaFilterWithId", listenerId, luaFilterId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLuaFilterWithId indicates an expected call of HasLuaFilterWithId.
func (mr *MockDaoMockRecorder) HasLuaFilterWithId(listenerId, luaFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLuaFilterWithId", reflect.TypeOf((*MockDao)(nil).HasLuaFilterWithId), listenerId, luaFilterId)
}

// HasWasmFilterWithId mocks base method.
func (m *MockDao) HasWasmFilterWithId(listenerId, wasmFilterId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWasmFilterWithId", listenerId, wasmFilterId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasWasmFilterWithId indicates an expected call of HasWasmFilterWithId.
func (mr *MockDaoMockRecorder) HasWasmFilterWithId(listenerId, wasmFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWasmFilterWithId", reflect.TypeOf((*MockDao)(nil).HasWasmFilterWithId), listenerId, wasmFilterId)
}

// SaveCircuitBreaker mocks base method.
func (m *MockDao) SaveCircuitBreaker(circuitBreaker *domain.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCircuitBreaker indicates an expected call of SaveCircuitBreaker.
func (mr *MockDaoMockRecorder) SaveCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCircuitBreaker", reflect.TypeOf((*MockDao)(nil).SaveCircuitBreaker), circuitBreaker)
}

// SaveCluster mocks base method.
func (m *MockDao) SaveCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCluster indicates an expected call of SaveCluster.
func (mr *MockDaoMockRecorder) SaveCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCluster", reflect.TypeOf((*MockDao)(nil).SaveCluster), cluster)
}

// SaveClustersNodeGroup mocks base method.
func (m *MockDao) SaveClustersNodeGroup(relation *domain.ClustersNodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClustersNodeGroup", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClustersNodeGroup indicates an expected call of SaveClustersNodeGroup.
func (mr *MockDaoMockRecorder) SaveClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClustersNodeGroup", reflect.TypeOf((*MockDao)(nil).SaveClustersNodeGroup), relation)
}

// SaveCompositeSatellite mocks base method.
func (m *MockDao) SaveCompositeSatellite(satellite *domain.CompositeSatellite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompositeSatellite", satellite)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCompositeSatellite indicates an expected call of SaveCompositeSatellite.
func (mr *MockDaoMockRecorder) SaveCompositeSatellite(satellite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompositeSatellite", reflect.TypeOf((*MockDao)(nil).SaveCompositeSatellite), satellite)
}

// SaveDeploymentVersion mocks base method.
func (m *MockDao) SaveDeploymentVersion(dVersion *domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDeploymentVersion", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDeploymentVersion indicates an expected call of SaveDeploymentVersion.
func (mr *MockDaoMockRecorder) SaveDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeploymentVersion", reflect.TypeOf((*MockDao)(nil).SaveDeploymentVersion), dVersion)
}

// SaveEndpoint mocks base method.
func (m *MockDao) SaveEndpoint(endpoint *domain.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEndpoint", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEndpoint indicates an expected call of SaveEndpoint.
func (mr *MockDaoMockRecorder) SaveEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEndpoint", reflect.TypeOf((*MockDao)(nil).SaveEndpoint), endpoint)
}

// SaveEntity mocks base method.
func (m *MockDao) SaveEntity(table string, entity interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntity", table, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntity indicates an expected call of SaveEntity.
func (mr *MockDaoMockRecorder) SaveEntity(table, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntity", reflect.TypeOf((*MockDao)(nil).SaveEntity), table, entity)
}

// SaveEnvoyConfigVersion mocks base method.
func (m *MockDao) SaveEnvoyConfigVersion(version *domain.EnvoyConfigVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEnvoyConfigVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEnvoyConfigVersion indicates an expected call of SaveEnvoyConfigVersion.
func (mr *MockDaoMockRecorder) SaveEnvoyConfigVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEnvoyConfigVersion", reflect.TypeOf((*MockDao)(nil).SaveEnvoyConfigVersion), version)
}

// SaveExtAuthzFilter mocks base method.
func (m *MockDao) SaveExtAuthzFilter(filter *domain.ExtAuthzFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExtAuthzFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExtAuthzFilter indicates an expected call of SaveExtAuthzFilter.
func (mr *MockDaoMockRecorder) SaveExtAuthzFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExtAuthzFilter", reflect.TypeOf((*MockDao)(nil).SaveExtAuthzFilter), filter)
}

// SaveHashPolicy mocks base method.
func (m *MockDao) SaveHashPolicy(hashPolicy *domain.HashPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashPolicy", hashPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashPolicy indicates an expected call of SaveHashPolicy.
func (mr *MockDaoMockRecorder) SaveHashPolicy(hashPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashPolicy", reflect.TypeOf((*MockDao)(nil).SaveHashPolicy), hashPolicy)
}

// SaveHeaderMatcher mocks base method.
func (m *MockDao) SaveHeaderMatcher(headerMatcher *domain.HeaderMatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHeaderMatcher", headerMatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHeaderMatcher indicates an expected call of SaveHeaderMatcher.
func (mr *MockDaoMockRecorder) SaveHeaderMatcher(headerMatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHeaderMatcher", reflect.TypeOf((*MockDao)(nil).SaveHeaderMatcher), headerMatcher)
}

// SaveHealthCheck mocks base method.
func (m *MockDao) SaveHealthCheck(healthCheck *domain.HealthCheck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHealthCheck", healthCheck)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHealthCheck indicates an expected call of SaveHealthCheck.
func (mr *MockDaoMockRecorder) SaveHealthCheck(healthCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHealthCheck", reflect.TypeOf((*MockDao)(nil).SaveHealthCheck), healthCheck)
}

// SaveListener mocks base method.
func (m *MockDao) SaveListener(listener *domain.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListener", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListener indicates an expected call of SaveListener.
func (mr *MockDaoMockRecorder) SaveListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListener", reflect.TypeOf((*MockDao)(nil).SaveListener), listener)
}

// SaveListenerLuaFilter mocks base method.
func (m *MockDao) SaveListenerLuaFilter(relation *domain.ListenersLuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListenerLuaFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListenerLuaFilter indicates an expected call of SaveListenerLuaFilter.
func (mr *MockDaoMockRecorder) SaveListenerLuaFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListenerLuaFilter", reflect.TypeOf((*MockDao)(nil).SaveListenerLuaFilter), relation)
}

// SaveListenerWasmFilter mocks base method.
func (m *MockDao) SaveListenerWasmFilter(relation *domain.ListenersWasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListenerWasmFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListenerWasmFilter indicates an expected call of SaveListenerWasmFilter.
func (mr *MockDaoMockRecorder) SaveListenerWasmFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListenerWasmFilter", reflect.TypeOf((*MockDao)(nil).SaveListenerWasmFilter), relation)
}

// SaveLuaFilter mocks base method.
func (m *MockDao) SaveLuaFilter(filter *domain.LuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLuaFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLuaFilter indicates an expected call of SaveLuaFilter.
func (mr *MockDaoMockRecorder) SaveLuaFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLuaFilter", reflect.TypeOf((*MockDao)(nil).SaveLuaFilter), filter)
}

// SaveMicroserviceVersion mocks base method.
func (m *MockDao) SaveMicroserviceVersion(msVersion *domain.MicroserviceVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMicroserviceVersion", msVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMicroserviceVersion indicates an expected call of SaveMicroserviceVersion.
func (mr *MockDaoMockRecorder) SaveMicroserviceVersion(msVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMicroserviceVersion", reflect.TypeOf((*MockDao)(nil).SaveMicroserviceVersion), msVersion)
}

// SaveNodeGroup mocks base method.
func (m *MockDao) SaveNodeGroup(nodeGroup *domain.NodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNodeGroup", nodeGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNodeGroup indicates an expected call of SaveNodeGroup.
func (mr *MockDaoMockRecorder) SaveNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNodeGroup", reflect.TypeOf((*MockDao)(nil).SaveNodeGroup), nodeGroup)
}

// SaveRateLimit mocks base method.
func (m *MockDao) SaveRateLimit(rateLimit *domain.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRateLimit", rateLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRateLimit indicates an expected call of SaveRateLimit.
func (mr *MockDaoMockRecorder) SaveRateLimit(rateLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRateLimit", reflect.TypeOf((*MockDao)(nil).SaveRateLimit), rateLimit)
}

// SaveRetryPolicy mocks base method.
func (m *MockDao) SaveRetryPolicy(retryPolicy *domain.RetryPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRetryPolicy", retryPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRetryPolicy indicates an expected call of SaveRetryPolicy.
func (mr *MockDaoMockRecorder) SaveRetryPolicy(retryPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRetryPolicy", reflect.TypeOf((*MockDao)(nil).SaveRetryPolicy), retryPolicy)
}

// SaveRoute mocks base method.
func (m *MockDao) SaveRoute(route *domain.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoute indicates an expected call of SaveRoute.
func (mr *MockDaoMockRecorder) SaveRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoute", reflect.TypeOf((*MockDao)(nil).SaveRoute), route)
}

// SaveRouteConfig mocks base method.
func (m *MockDao) SaveRouteConfig(routeConfig *domain.RouteConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRouteConfig", routeConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRouteConfig indicates an expected call of SaveRouteConfig.
func (mr *MockDaoMockRecorder) SaveRouteConfig(routeConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRouteConfig", reflect.TypeOf((*MockDao)(nil).SaveRouteConfig), routeConfig)
}

// SaveStatefulSessionConfig mocks base method.
func (m *MockDao) SaveStatefulSessionConfig(statefulSession *domain.StatefulSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStatefulSessionConfig", statefulSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStatefulSessionConfig indicates an expected call of SaveStatefulSessionConfig.
func (mr *MockDaoMockRecorder) SaveStatefulSessionConfig(statefulSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatefulSessionConfig", reflect.TypeOf((*MockDao)(nil).SaveStatefulSessionConfig), statefulSession)
}

// SaveTcpKeepalive mocks base method.
func (m *MockDao) SaveTcpKeepalive(tcpKeepalive *domain.TcpKeepalive) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTcpKeepalive", tcpKeepalive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTcpKeepalive indicates an expected call of SaveTcpKeepalive.
func (mr *MockDaoMockRecorder) SaveTcpKeepalive(tcpKeepalive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTcpKeepalive", reflect.TypeOf((*MockDao)(nil).SaveTcpKeepalive), tcpKeepalive)
}

// SaveThreshold mocks base method.
func (m *MockDao) SaveThreshold(threshold *domain.Threshold) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveThreshold", threshold)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveThreshold indicates an expected call of SaveThreshold.
func (mr *MockDaoMockRecorder) SaveThreshold(threshold interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveThreshold", reflect.TypeOf((*MockDao)(nil).SaveThreshold), threshold)
}

// SaveTlsConfig mocks base method.
func (m *MockDao) SaveTlsConfig(tls *domain.TlsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTlsConfig", tls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTlsConfig indicates an expected call of SaveTlsConfig.
func (mr *MockDaoMockRecorder) SaveTlsConfig(tls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTlsConfig", reflect.TypeOf((*MockDao)(nil).SaveTlsConfig), tls)
}

// SaveVirtualHost mocks base method.
func (m *MockDao) SaveVirtualHost(virtualHost *domain.VirtualHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualHost", virtualHost)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualHost indicates an expected call of SaveVirtualHost.
func (mr *MockDaoMockRecorder) SaveVirtualHost(virtualHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualHost", reflect.TypeOf((*MockDao)(nil).SaveVirtualHost), virtualHost)
}

// SaveVirtualHostDomain mocks base method.
func (m *MockDao) SaveVirtualHostDomain(virtualHostDomain *domain.VirtualHostDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualHostDomain", virtualHostDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualHostDomain indicates an expected call of SaveVirtualHostDomain.
func (mr *MockDaoMockRecorder) SaveVirtualHostDomain(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualHostDomain", reflect.TypeOf((*MockDao)(nil).SaveVirtualHostDomain), virtualHostDomain)
}

// SaveWasmFilter mocks base method.
func (m *MockDao) SaveWasmFilter(filter *domain.WasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWasmFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWasmFilter indicates an expected call of SaveWasmFilter.
func (mr *MockDaoMockRecorder) SaveWasmFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWasmFilter", reflect.TypeOf((*MockDao)(nil).SaveWasmFilter), filter)
}

// WithRTx mocks base method.
func (m *MockDao) WithRTx(arg0 func(dao.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithRTx indicates an expected call of WithRTx.
func (mr *MockDaoMockRecorder) WithRTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRTx", reflect.TypeOf((*MockDao)(nil).WithRTx), arg0)
}

// WithRTxVal mocks base method.
func (m *MockDao) WithRTxVal(payload func(dao.Repository) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRTxVal", payload)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithRTxVal indicates an expected call of WithRTxVal.
func (mr *MockDaoMockRecorder) WithRTxVal(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRTxVal", reflect.TypeOf((*MockDao)(nil).WithRTxVal), payload)
}

// WithWTx mocks base method.
func (m *MockDao) WithWTx(arg0 func(dao.Repository) error) ([]memdb.Change, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWTx", arg0)
	ret0, _ := ret[0].([]memdb.Change)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithWTx indicates an expected call of WithWTx.
func (mr *MockDaoMockRecorder) WithWTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWTx", reflect.TypeOf((*MockDao)(nil).WithWTx), arg0)
}

// WithWTxVal mocks base method.
func (m *MockDao) WithWTxVal(arg0 func(dao.Repository) (interface{}, error)) (interface{}, []memdb.Change, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWTxVal", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].([]memdb.Change)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WithWTxVal indicates an expected call of WithWTxVal.
func (mr *MockDaoMockRecorder) WithWTxVal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWTxVal", reflect.TypeOf((*MockDao)(nil).WithWTxVal), arg0)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteCircuitBreakerById mocks base method.
func (m *MockRepository) DeleteCircuitBreakerById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCircuitBreakerById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCircuitBreakerById indicates an expected call of DeleteCircuitBreakerById.
func (mr *MockRepositoryMockRecorder) DeleteCircuitBreakerById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCircuitBreakerById", reflect.TypeOf((*MockRepository)(nil).DeleteCircuitBreakerById), Id)
}

// DeleteCluster mocks base method.
func (m *MockRepository) DeleteCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockRepositoryMockRecorder) DeleteCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockRepository)(nil).DeleteCluster), cluster)
}

// DeleteClusterByName mocks base method.
func (m *MockRepository) DeleteClusterByName(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterByName", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterByName indicates an expected call of DeleteClusterByName.
func (mr *MockRepositoryMockRecorder) DeleteClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterByName", reflect.TypeOf((*MockRepository)(nil).DeleteClusterByName), key)
}

// DeleteClustersNodeGroup mocks base method.
func (m *MockRepository) DeleteClustersNodeGroup(relation *domain.ClustersNodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClustersNodeGroup", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClustersNodeGroup indicates an expected call of DeleteClustersNodeGroup.
func (mr *MockRepositoryMockRecorder) DeleteClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClustersNodeGroup", reflect.TypeOf((*MockRepository)(nil).DeleteClustersNodeGroup), relation)
}

// DeleteClustersNodeGroupByClusterId mocks base method.
func (m *MockRepository) DeleteClustersNodeGroupByClusterId(clusterId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClustersNodeGroupByClusterId", clusterId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClustersNodeGroupByClusterId indicates an expected call of DeleteClustersNodeGroupByClusterId.
func (mr *MockRepositoryMockRecorder) DeleteClustersNodeGroupByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClustersNodeGroupByClusterId", reflect.TypeOf((*MockRepository)(nil).DeleteClustersNodeGroupByClusterId), clusterId)
}

// DeleteCompositeSatellite mocks base method.
func (m *MockRepository) DeleteCompositeSatellite(namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompositeSatellite", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompositeSatellite indicates an expected call of DeleteCompositeSatellite.
func (mr *MockRepositoryMockRecorder) DeleteCompositeSatellite(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompositeSatellite", reflect.TypeOf((*MockRepository)(nil).DeleteCompositeSatellite), namespace)
}

// DeleteDeploymentVersion mocks base method.
func (m *MockRepository) DeleteDeploymentVersion(dVersion *domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentVersion", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentVersion indicates an expected call of DeleteDeploymentVersion.
func (mr *MockRepositoryMockRecorder) DeleteDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).DeleteDeploymentVersion), dVersion)
}

// DeleteDeploymentVersions mocks base method.
func (m *MockRepository) DeleteDeploymentVersions(dVersion []*domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentVersions", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentVersions indicates an expected call of DeleteDeploymentVersions.
func (mr *MockRepositoryMockRecorder) DeleteDeploymentVersions(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentVersions", reflect.TypeOf((*MockRepository)(nil).DeleteDeploymentVersions), dVersion)
}

// DeleteEndpoint mocks base method.
func (m *MockRepository) DeleteEndpoint(endpoint *domain.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockRepositoryMockRecorder) DeleteEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockRepository)(nil).DeleteEndpoint), endpoint)
}

// DeleteExtAuthzFilter mocks base method.
func (m *MockRepository) DeleteExtAuthzFilter(extAuthzFilterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtAuthzFilter", extAuthzFilterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthzFilter indicates an expected call of DeleteExtAuthzFilter.
func (mr *MockRepositoryMockRecorder) DeleteExtAuthzFilter(extAuthzFilterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthzFilter", reflect.TypeOf((*MockRepository)(nil).DeleteExtAuthzFilter), extAuthzFilterName)
}

// DeleteHashPolicyByEndpointId mocks base method.
func (m *MockRepository) DeleteHashPolicyByEndpointId(endpointId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyByEndpointId", endpointId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashPolicyByEndpointId indicates an expected call of DeleteHashPolicyByEndpointId.
func (mr *MockRepositoryMockRecorder) DeleteHashPolicyByEndpointId(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyByEndpointId", reflect.TypeOf((*MockRepository)(nil).DeleteHashPolicyByEndpointId), endpointId)
}

// DeleteHashPolicyById mocks base method.
func (m *MockRepository) DeleteHashPolicyById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHashPolicyById indicates an expected call of DeleteHashPolicyById.
func (mr *MockRepositoryMockRecorder) DeleteHashPolicyById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyById", reflect.TypeOf((*MockRepository)(nil).DeleteHashPolicyById), Id)
}

// DeleteHashPolicyByRouteId mocks base method.
func (m *MockRepository) DeleteHashPolicyByRouteId(routeId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyByRouteId", routeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashPolicyByRouteId indicates an expected call of DeleteHashPolicyByRouteId.
func (mr *MockRepositoryMockRecorder) DeleteHashPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyByRouteId", reflect.TypeOf((*MockRepository)(nil).DeleteHashPolicyByRouteId), routeId)
}

// DeleteHeaderMatcher mocks base method.
func (m *MockRepository) DeleteHeaderMatcher(headerMatcher *domain.HeaderMatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatcher", headerMatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderMatcher indicates an expected call of DeleteHeaderMatcher.
func (mr *MockRepositoryMockRecorder) DeleteHeaderMatcher(headerMatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatcher", reflect.TypeOf((*MockRepository)(nil).DeleteHeaderMatcher), headerMatcher)
}

// DeleteHeaderMatcherById mocks base method.
func (m *MockRepository) DeleteHeaderMatcherById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatcherById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderMatcherById indicates an expected call of DeleteHeaderMatcherById.
func (mr *MockRepositoryMockRecorder) DeleteHeaderMatcherById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatcherById", reflect.TypeOf((*MockRepository)(nil).DeleteHeaderMatcherById), Id)
}

// DeleteHeaderMatchersByRouteId mocks base method.
func (m *MockRepository) DeleteHeaderMatchersByRouteId(routeId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatchersByRouteId", routeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHeaderMatchersByRouteId indicates an expected call of DeleteHeaderMatchersByRouteId.
func (mr *MockRepositoryMockRecorder) DeleteHeaderMatchersByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatchersByRouteId", reflect.TypeOf((*MockRepository)(nil).DeleteHeaderMatchersByRouteId), routeId)
}

// DeleteHealthCheckById mocks base method.
func (m *MockRepository) DeleteHealthCheckById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHealthCheckById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHealthCheckById indicates an expected call of DeleteHealthCheckById.
func (mr *MockRepositoryMockRecorder) DeleteHealthCheckById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHealthCheckById", reflect.TypeOf((*MockRepository)(nil).DeleteHealthCheckById), Id)
}

// DeleteHealthChecksByClusterId mocks base method.
func (m *MockRepository) DeleteHealthChecksByClusterId(clusterId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHealthChecksByClusterId", clusterId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHealthChecksByClusterId indicates an expected call of DeleteHealthChecksByClusterId.
func (mr *MockRepositoryMockRecorder) DeleteHealthChecksByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHealthChecksByClusterId", reflect.TypeOf((*MockRepository)(nil).DeleteHealthChecksByClusterId), clusterId)
}

// DeleteListenerById mocks base method.
func (m *MockRepository) DeleteListenerById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerById indicates an expected call of DeleteListenerById.
func (mr *MockRepositoryMockRecorder) DeleteListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerById", reflect.TypeOf((*MockRepository)(nil).DeleteListenerById), id)
}

// DeleteListenerByNodeGroupName mocks base method.
func (m *MockRepository) DeleteListenerByNodeGroupName(nodeGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerByNodeGroupName", nodeGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerByNodeGroupName indicates an expected call of DeleteListenerByNodeGroupName.
func (mr *MockRepositoryMockRecorder) DeleteListenerByNodeGroupName(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerByNodeGroupName", reflect.TypeOf((*MockRepository)(nil).DeleteListenerByNodeGroupName), nodeGroupId)
}

// DeleteListenerLuaFilter mocks base method.
func (m *MockRepository) DeleteListenerLuaFilter(relation *domain.ListenersLuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerLuaFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerLuaFilter indicates an expected call of DeleteListenerLuaFilter.
func (mr *MockRepositoryMockRecorder) DeleteListenerLuaFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerLuaFilter", reflect.TypeOf((*MockRepository)(nil).DeleteListenerLuaFilter), relation)
}

// DeleteListenerWasmFilter mocks base method.
func (m *MockRepository) DeleteListenerWasmFilter(relation *domain.ListenersWasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerWasmFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerWasmFilter indicates an expected call of DeleteListenerWasmFilter.
func (mr *MockRepositoryMockRecorder) DeleteListenerWasmFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWasmFilter", reflect.TypeOf((*MockRepository)(nil).DeleteListenerWasmFilter), relation)
}

// DeleteLuaFilterById mocks base method.
func (m *MockRepository) DeleteLuaFilterById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLuaFilterById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLuaFilterById indicates an expected call of DeleteLuaFilterById.
func (mr *MockRepositoryMockRecorder) DeleteLuaFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLuaFilterById", reflect.TypeOf((*MockRepository)(nil).DeleteLuaFilterById), id)
}

// DeleteLuaFilterByName mocks base method.
func (m *MockRepository) DeleteLuaFilterByName(filterName string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLuaFilterByName", filterName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLuaFilterByName indicates an expected call of DeleteLuaFilterByName.
func (mr *MockRepositoryMockRecorder) DeleteLuaFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLuaFilterByName", reflect.TypeOf((*MockRepository)(nil).DeleteLuaFilterByName), filterName)
}

// DeleteMicroserviceVersion mocks base method.
func (m *MockRepository) DeleteMicroserviceVersion(name string, namespace msaddr.Namespace, initialVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicroserviceVersion", name, namespace, initialVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMicroserviceVersion indicates an expected call of DeleteMicroserviceVersion.
func (mr *MockRepositoryMockRecorder) DeleteMicroserviceVersion(name, namespace, initialVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicroserviceVersion", reflect.TypeOf((*MockRepository)(nil).DeleteMicroserviceVersion), name, namespace, initialVersion)
}

// DeleteNodeGroupByName mocks base method.
func (m *MockRepository) DeleteNodeGroupByName(nodeGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeGroupByName", nodeGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeGroupByName indicates an expected call of DeleteNodeGroupByName.
func (mr *MockRepositoryMockRecorder) DeleteNodeGroupByName(nodeGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroupByName", reflect.TypeOf((*MockRepository)(nil).DeleteNodeGroupByName), nodeGroupName)
}

// DeleteRateLimitByNameAndPriority mocks base method.
func (m *MockRepository) DeleteRateLimitByNameAndPriority(name string, priority domain.ConfigPriority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateLimitByNameAndPriority", name, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitByNameAndPriority indicates an expected call of DeleteRateLimitByNameAndPriority.
func (mr *MockRepositoryMockRecorder) DeleteRateLimitByNameAndPriority(name, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitByNameAndPriority", reflect.TypeOf((*MockRepository)(nil).DeleteRateLimitByNameAndPriority), name, priority)
}

// DeleteRetryPolicyById mocks base method.
func (m *MockRepository) DeleteRetryPolicyById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryPolicyById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryPolicyById indicates an expected call of DeleteRetryPolicyById.
func (mr *MockRepositoryMockRecorder) DeleteRetryPolicyById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryPolicyById", reflect.TypeOf((*MockRepository)(nil).DeleteRetryPolicyById), Id)
}

// DeleteRetryPolicyByRouteId mocks base method.
func (m *MockRepository) DeleteRetryPolicyByRouteId(routeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryPolicyByRouteId", routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryPolicyByRouteId indicates an expected call of DeleteRetryPolicyByRouteId.
func (mr *MockRepositoryMockRecorder) DeleteRetryPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryPolicyByRouteId", reflect.TypeOf((*MockRepository)(nil).DeleteRetryPolicyByRouteId), routeId)
}

// DeleteRouteById mocks base method.
func (m *MockRepository) DeleteRouteById(routeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteById", routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteById indicates an expected call of DeleteRouteById.
func (mr *MockRepositoryMockRecorder) DeleteRouteById(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteById", reflect.TypeOf((*MockRepository)(nil).DeleteRouteById), routeId)
}

// DeleteRouteByUUID mocks base method.
func (m *MockRepository) DeleteRouteByUUID(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteByUUID", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteByUUID indicates an expected call of DeleteRouteByUUID.
func (mr *MockRepositoryMockRecorder) DeleteRouteByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteByUUID", reflect.TypeOf((*MockRepository)(nil).DeleteRouteByUUID), uuid)
}

// DeleteRouteConfigById mocks base method.
func (m *MockRepository) DeleteRouteConfigById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteConfigById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteConfigById indicates an expected call of DeleteRouteConfigById.
func (mr *MockRepositoryMockRecorder) DeleteRouteConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteConfigById", reflect.TypeOf((*MockRepository)(nil).DeleteRouteConfigById), id)
}

// DeleteRoutesByAutoGeneratedAndDeploymentVersion mocks base method.
func (m *MockRepository) DeleteRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated bool, dVersion string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutesByAutoGeneratedAndDeploymentVersion", autoGenerated, dVersion)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutesByAutoGeneratedAndDeploymentVersion indicates an expected call of DeleteRoutesByAutoGeneratedAndDeploymentVersion.
func (mr *MockRepositoryMockRecorder) DeleteRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutesByAutoGeneratedAndDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).DeleteRoutesByAutoGeneratedAndDeploymentVersion), autoGenerated, dVersion)
}

// DeleteStatefulSessionConfig mocks base method.
func (m *MockRepository) DeleteStatefulSessionConfig(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSessionConfig", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSessionConfig indicates an expected call of DeleteStatefulSessionConfig.
func (mr *MockRepositoryMockRecorder) DeleteStatefulSessionConfig(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSessionConfig", reflect.TypeOf((*MockRepository)(nil).DeleteStatefulSessionConfig), id)
}

// DeleteTcpKeepaliveById mocks base method.
func (m *MockRepository) DeleteTcpKeepaliveById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTcpKeepaliveById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTcpKeepaliveById indicates an expected call of DeleteTcpKeepaliveById.
func (mr *MockRepositoryMockRecorder) DeleteTcpKeepaliveById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTcpKeepaliveById", reflect.TypeOf((*MockRepository)(nil).DeleteTcpKeepaliveById), Id)
}

// DeleteThresholdById mocks base method.
func (m *MockRepository) DeleteThresholdById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThresholdById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThresholdById indicates an expected call of DeleteThresholdById.
func (mr *MockRepositoryMockRecorder) DeleteThresholdById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThresholdById", reflect.TypeOf((*MockRepository)(nil).DeleteThresholdById), Id)
}

// DeleteTlsConfigById mocks base method.
func (m *MockRepository) DeleteTlsConfigById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTlsConfigById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTlsConfigById indicates an expected call of DeleteTlsConfigById.
func (mr *MockRepositoryMockRecorder) DeleteTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTlsConfigById", reflect.TypeOf((*MockRepository)(nil).DeleteTlsConfigById), id)
}

// DeleteTlsConfigByIdAndNodeGroupName mocks base method.
func (m *MockRepository) DeleteTlsConfigByIdAndNodeGroupName(relation *domain.TlsConfigsNodeGroups) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTlsConfigByIdAndNodeGroupName", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTlsConfigByIdAndNodeGroupName indicates an expected call of DeleteTlsConfigByIdAndNodeGroupName.
func (mr *MockRepositoryMockRecorder) DeleteTlsConfigByIdAndNodeGroupName(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTlsConfigByIdAndNodeGroupName", reflect.TypeOf((*MockRepository)(nil).DeleteTlsConfigByIdAndNodeGroupName), relation)
}

// DeleteVirtualHost mocks base method.
func (m *MockRepository) DeleteVirtualHost(host *domain.VirtualHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualHost", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHost indicates an expected call of DeleteVirtualHost.
func (mr *MockRepositoryMockRecorder) DeleteVirtualHost(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHost", reflect.TypeOf((*MockRepository)(nil).DeleteVirtualHost), host)
}

// DeleteVirtualHostsDomain mocks base method.
func (m *MockRepository) DeleteVirtualHostsDomain(virtualHostDomain *domain.VirtualHostDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualHostsDomain", virtualHostDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHostsDomain indicates an expected call of DeleteVirtualHostsDomain.
func (mr *MockRepositoryMockRecorder) DeleteVirtualHostsDomain(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHostsDomain", reflect.TypeOf((*MockRepository)(nil).DeleteVirtualHostsDomain), virtualHostDomain)
}

// DeleteWasmFilterById mocks base method.
func (m *MockRepository) DeleteWasmFilterById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmFilterById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmFilterById indicates an expected call of DeleteWasmFilterById.
func (mr *MockRepositoryMockRecorder) DeleteWasmFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmFilterById", reflect.TypeOf((*MockRepository)(nil).DeleteWasmFilterById), id)
}

// DeleteWasmFilterByName mocks base method.
func (m *MockRepository) DeleteWasmFilterByName(filterName string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmFilterByName", filterName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWasmFilterByName indicates an expected call of DeleteWasmFilterByName.
func (mr *MockRepositoryMockRecorder) DeleteWasmFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmFilterByName", reflect.TypeOf((*MockRepository)(nil).DeleteWasmFilterByName), filterName)
}

// FindAllCircuitBreakers mocks base method.
func (m *MockRepository) FindAllCircuitBreakers() ([]*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCircuitBreakers")
	ret0, _ := ret[0].([]*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCircuitBreakers indicates an expected call of FindAllCircuitBreakers.
func (mr *MockRepositoryMockRecorder) FindAllCircuitBreakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCircuitBreakers", reflect.TypeOf((*MockRepository)(nil).FindAllCircuitBreakers))
}

// FindAllClusterWithNodeGroup mocks base method.
func (m *MockRepository) FindAllClusterWithNodeGroup() ([]*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusterWithNodeGroup")
	ret0, _ := ret[0].([]*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusterWithNodeGroup indicates an expected call of FindAllClusterWithNodeGroup.
func (mr *MockRepositoryMockRecorder) FindAllClusterWithNodeGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusterWithNodeGroup", reflect.TypeOf((*MockRepository)(nil).FindAllClusterWithNodeGroup))
}

// FindAllClusters mocks base method.
func (m *MockRepository) FindAllClusters() ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusters")
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusters indicates an expected call of FindAllClusters.
func (mr *MockRepositoryMockRecorder) FindAllClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusters", reflect.TypeOf((*MockRepository)(nil).FindAllClusters))
}

// FindAllCompositeSatellites mocks base method.
func (m *MockRepository) FindAllCompositeSatellites() ([]*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCompositeSatellites")
	ret0, _ := ret[0].([]*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCompositeSatellites indicates an expected call of FindAllCompositeSatellites.
func (mr *MockRepositoryMockRecorder) FindAllCompositeSatellites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCompositeSatellites", reflect.TypeOf((*MockRepository)(nil).FindAllCompositeSatellites))
}

// FindAllDeploymentVersions mocks base method.
func (m *MockRepository) FindAllDeploymentVersions() ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDeploymentVersions")
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDeploymentVersions indicates an expected call of FindAllDeploymentVersions.
func (mr *MockRepositoryMockRecorder) FindAllDeploymentVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDeploymentVersions", reflect.TypeOf((*MockRepository)(nil).FindAllDeploymentVersions))
}

// FindAllEndpoints mocks base method.
func (m *MockRepository) FindAllEndpoints() ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEndpoints")
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEndpoints indicates an expected call of FindAllEndpoints.
func (mr *MockRepositoryMockRecorder) FindAllEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEndpoints", reflect.TypeOf((*MockRepository)(nil).FindAllEndpoints))
}

// FindAllExtAuthzFilters mocks base method.
func (m *MockRepository) FindAllExtAuthzFilters() ([]*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllExtAuthzFilters")
	ret0, _ := ret[0].([]*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllExtAuthzFilters indicates an expected call of FindAllExtAuthzFilters.
func (mr *MockRepositoryMockRecorder) FindAllExtAuthzFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllExtAuthzFilters", reflect.TypeOf((*MockRepository)(nil).FindAllExtAuthzFilters))
}

// FindAllListenerLuaFilter mocks base method.
func (m *MockRepository) FindAllListenerLuaFilter() ([]*domain.ListenersLuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerLuaFilter")
	ret0, _ := ret[0].([]*domain.ListenersLuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerLuaFilter indicates an expected call of FindAllListenerLuaFilter.
func (mr *MockRepositoryMockRecorder) FindAllListenerLuaFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerLuaFilter", reflect.TypeOf((*MockRepository)(nil).FindAllListenerLuaFilter))
}

// FindAllListenerWasmFilter mocks base method.
func (m *MockRepository) FindAllListenerWasmFilter() ([]*domain.ListenersWasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerWasmFilter")
	ret0, _ := ret[0].([]*domain.ListenersWasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerWasmFilter indicates an expected call of FindAllListenerWasmFilter.
func (mr *MockRepositoryMockRecorder) FindAllListenerWasmFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerWasmFilter", reflect.TypeOf((*MockRepository)(nil).FindAllListenerWasmFilter))
}

// FindAllListeners mocks base method.
func (m *MockRepository) FindAllListeners() ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListeners")
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListeners indicates an expected call of FindAllListeners.
func (mr *MockRepositoryMockRecorder) FindAllListeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListeners", reflect.TypeOf((*MockRepository)(nil).FindAllListeners))
}

// FindAllLuaFilters mocks base method.
func (m *MockRepository) FindAllLuaFilters() ([]*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLuaFilters")
	ret0, _ := ret[0].([]*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLuaFilters indicates an expected call of FindAllLuaFilters.
func (mr *MockRepositoryMockRecorder) FindAllLuaFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLuaFilters", reflect.TypeOf((*MockRepository)(nil).FindAllLuaFilters))
}

// FindAllMicroserviceVersions mocks base method.
func (m *MockRepository) FindAllMicroserviceVersions() ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMicroserviceVersions")
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMicroserviceVersions indicates an expected call of FindAllMicroserviceVersions.
func (mr *MockRepositoryMockRecorder) FindAllMicroserviceVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMicroserviceVersions", reflect.TypeOf((*MockRepository)(nil).FindAllMicroserviceVersions))
}

// FindAllNodeGroups mocks base method.
func (m *MockRepository) FindAllNodeGroups() ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNodeGroups")
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNodeGroups indicates an expected call of FindAllNodeGroups.
func (mr *MockRepositoryMockRecorder) FindAllNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNodeGroups", reflect.TypeOf((*MockRepository)(nil).FindAllNodeGroups))
}

// FindAllRateLimits mocks base method.
func (m *MockRepository) FindAllRateLimits() ([]*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRateLimits")
	ret0, _ := ret[0].([]*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRateLimits indicates an expected call of FindAllRateLimits.
func (mr *MockRepositoryMockRecorder) FindAllRateLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRateLimits", reflect.TypeOf((*MockRepository)(nil).FindAllRateLimits))
}

// FindAllRouteConfigs mocks base method.
func (m *MockRepository) FindAllRouteConfigs() ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRouteConfigs")
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRouteConfigs indicates an expected call of FindAllRouteConfigs.
func (mr *MockRepositoryMockRecorder) FindAllRouteConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRouteConfigs", reflect.TypeOf((*MockRepository)(nil).FindAllRouteConfigs))
}

// FindAllRoutes mocks base method.
func (m *MockRepository) FindAllRoutes() ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRoutes")
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRoutes indicates an expected call of FindAllRoutes.
func (mr *MockRepositoryMockRecorder) FindAllRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRoutes", reflect.TypeOf((*MockRepository)(nil).FindAllRoutes))
}

// FindAllStatefulSessionConfigs mocks base method.
func (m *MockRepository) FindAllStatefulSessionConfigs() ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStatefulSessionConfigs")
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStatefulSessionConfigs indicates an expected call of FindAllStatefulSessionConfigs.
func (mr *MockRepositoryMockRecorder) FindAllStatefulSessionConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStatefulSessionConfigs", reflect.TypeOf((*MockRepository)(nil).FindAllStatefulSessionConfigs))
}

// FindAllTcpKeepalives mocks base method.
func (m *MockRepository) FindAllTcpKeepalives() ([]*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTcpKeepalives")
	ret0, _ := ret[0].([]*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTcpKeepalives indicates an expected call of FindAllTcpKeepalives.
func (mr *MockRepositoryMockRecorder) FindAllTcpKeepalives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTcpKeepalives", reflect.TypeOf((*MockRepository)(nil).FindAllTcpKeepalives))
}

// FindAllThresholds mocks base method.
func (m *MockRepository) FindAllThresholds() ([]*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllThresholds")
	ret0, _ := ret[0].([]*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllThresholds indicates an expected call of FindAllThresholds.
func (mr *MockRepositoryMockRecorder) FindAllThresholds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllThresholds", reflect.TypeOf((*MockRepository)(nil).FindAllThresholds))
}

// FindAllTlsConfigs mocks base method.
func (m *MockRepository) FindAllTlsConfigs() ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigs")
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigs indicates an expected call of FindAllTlsConfigs.
func (mr *MockRepositoryMockRecorder) FindAllTlsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigs", reflect.TypeOf((*MockRepository)(nil).FindAllTlsConfigs))
}

// FindAllTlsConfigsByNodeGroup mocks base method.
func (m *MockRepository) FindAllTlsConfigsByNodeGroup(nodeGroup string) ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigsByNodeGroup", nodeGroup)
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigsByNodeGroup indicates an expected call of FindAllTlsConfigsByNodeGroup.
func (mr *MockRepositoryMockRecorder) FindAllTlsConfigsByNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigsByNodeGroup", reflect.TypeOf((*MockRepository)(nil).FindAllTlsConfigsByNodeGroup), nodeGroup)
}

// FindAllVirtualHosts mocks base method.
func (m *MockRepository) FindAllVirtualHosts() ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHosts")
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHosts indicates an expected call of FindAllVirtualHosts.
func (mr *MockRepositoryMockRecorder) FindAllVirtualHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHosts", reflect.TypeOf((*MockRepository)(nil).FindAllVirtualHosts))
}

// FindAllVirtualHostsDomain mocks base method.
func (m *MockRepository) FindAllVirtualHostsDomain() ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHostsDomain")
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHostsDomain indicates an expected call of FindAllVirtualHostsDomain.
func (mr *MockRepositoryMockRecorder) FindAllVirtualHostsDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHostsDomain", reflect.TypeOf((*MockRepository)(nil).FindAllVirtualHostsDomain))
}

// FindAllWasmFilters mocks base method.
func (m *MockRepository) FindAllWasmFilters() ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWasmFilters")
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWasmFilters indicates an expected call of FindAllWasmFilters.
func (mr *MockRepositoryMockRecorder) FindAllWasmFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWasmFilters", reflect.TypeOf((*MockRepository)(nil).FindAllWasmFilters))
}

// FindCircuitBreakerById mocks base method.
func (m *MockRepository) FindCircuitBreakerById(Id int32) (*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCircuitBreakerById", Id)
	ret0, _ := ret[0].(*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCircuitBreakerById indicates an expected call of FindCircuitBreakerById.
func (mr *MockRepositoryMockRecorder) FindCircuitBreakerById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCircuitBreakerById", reflect.TypeOf((*MockRepository)(nil).FindCircuitBreakerById), Id)
}

// FindClusterByEndpointIn mocks base method.
func (m *MockRepository) FindClusterByEndpointIn(endpoints []*domain.Endpoint) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByEndpointIn", endpoints)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByEndpointIn indicates an expected call of FindClusterByEndpointIn.
func (mr *MockRepositoryMockRecorder) FindClusterByEndpointIn(endpoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByEndpointIn", reflect.TypeOf((*MockRepository)(nil).FindClusterByEndpointIn), endpoints)
}

// FindClusterById mocks base method.
func (m *MockRepository) FindClusterById(id int32) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterById", id)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterById indicates an expected call of FindClusterById.
func (mr *MockRepositoryMockRecorder) FindClusterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterById", reflect.TypeOf((*MockRepository)(nil).FindClusterById), id)
}

// FindClusterByName mocks base method.
func (m *MockRepository) FindClusterByName(key string) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByName", key)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByName indicates an expected call of FindClusterByName.
func (mr *MockRepositoryMockRecorder) FindClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByName", reflect.TypeOf((*MockRepository)(nil).FindClusterByName), key)
}

// FindClusterByNodeGroup mocks base method.
func (m *MockRepository) FindClusterByNodeGroup(group *domain.NodeGroup) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByNodeGroup", group)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByNodeGroup indicates an expected call of FindClusterByNodeGroup.
func (mr *MockRepositoryMockRecorder) FindClusterByNodeGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByNodeGroup", reflect.TypeOf((*MockRepository)(nil).FindClusterByNodeGroup), group)
}

// FindClustersByFamilyNameAndNamespace mocks base method.
func (m *MockRepository) FindClustersByFamilyNameAndNamespace(familyName string, namespace msaddr.Namespace) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersByFamilyNameAndNamespace", familyName, namespace)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersByFamilyNameAndNamespace indicates an expected call of FindClustersByFamilyNameAndNamespace.
func (mr *MockRepositoryMockRecorder) FindClustersByFamilyNameAndNamespace(familyName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersByFamilyNameAndNamespace", reflect.TypeOf((*MockRepository)(nil).FindClustersByFamilyNameAndNamespace), familyName, namespace)
}

// FindClustersNodeGroup mocks base method.
func (m *MockRepository) FindClustersNodeGroup(relation *domain.ClustersNodeGroup) (*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersNodeGroup", relation)
	ret0, _ := ret[0].(*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersNodeGroup indicates an expected call of FindClustersNodeGroup.
func (mr *MockRepositoryMockRecorder) FindClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersNodeGroup", reflect.TypeOf((*MockRepository)(nil).FindClustersNodeGroup), relation)
}

// FindCompositeSatelliteByNamespace mocks base method.
func (m *MockRepository) FindCompositeSatelliteByNamespace(namespace string) (*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompositeSatelliteByNamespace", namespace)
	ret0, _ := ret[0].(*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompositeSatelliteByNamespace indicates an expected call of FindCompositeSatelliteByNamespace.
func (mr *MockRepositoryMockRecorder) FindCompositeSatelliteByNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompositeSatelliteByNamespace", reflect.TypeOf((*MockRepository)(nil).FindCompositeSatelliteByNamespace), namespace)
}

// FindDeploymentVersion mocks base method.
func (m *MockRepository) FindDeploymentVersion(version string) (*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersion", version)
	ret0, _ := ret[0].(*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersion indicates an expected call of FindDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindDeploymentVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindDeploymentVersion), version)
}

// FindDeploymentVersionsByStage mocks base method.
func (m *MockRepository) FindDeploymentVersionsByStage(stage string) ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersionsByStage", stage)
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersionsByStage indicates an expected call of FindDeploymentVersionsByStage.
func (mr *MockRepositoryMockRecorder) FindDeploymentVersionsByStage(stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersionsByStage", reflect.TypeOf((*MockRepository)(nil).FindDeploymentVersionsByStage), stage)
}

// FindEndpointById mocks base method.
func (m *MockRepository) FindEndpointById(endpointId int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointById", endpointId)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointById indicates an expected call of FindEndpointById.
func (mr *MockRepositoryMockRecorder) FindEndpointById(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointById", reflect.TypeOf((*MockRepository)(nil).FindEndpointById), endpointId)
}

// FindEndpointByStatefulSession mocks base method.
func (m *MockRepository) FindEndpointByStatefulSession(statefulSessionId int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointByStatefulSession", statefulSessionId)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointByStatefulSession indicates an expected call of FindEndpointByStatefulSession.
func (mr *MockRepositoryMockRecorder) FindEndpointByStatefulSession(statefulSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointByStatefulSession", reflect.TypeOf((*MockRepository)(nil).FindEndpointByStatefulSession), statefulSessionId)
}

// FindEndpointsByAddressAndPortAndDeploymentVersion mocks base method.
func (m *MockRepository) FindEndpointsByAddressAndPortAndDeploymentVersion(address string, port int32, dVersion string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByAddressAndPortAndDeploymentVersion", address, port, dVersion)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByAddressAndPortAndDeploymentVersion indicates an expected call of FindEndpointsByAddressAndPortAndDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindEndpointsByAddressAndPortAndDeploymentVersion(address, port, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByAddressAndPortAndDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindEndpointsByAddressAndPortAndDeploymentVersion), address, port, dVersion)
}

// FindEndpointsByClusterId mocks base method.
func (m *MockRepository) FindEndpointsByClusterId(clusterId int32) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterId", clusterId)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterId indicates an expected call of FindEndpointsByClusterId.
func (mr *MockRepositoryMockRecorder) FindEndpointsByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterId", reflect.TypeOf((*MockRepository)(nil).FindEndpointsByClusterId), clusterId)
}

// FindEndpointsByClusterIdAndDeploymentVersion mocks base method.
func (m *MockRepository) FindEndpointsByClusterIdAndDeploymentVersion(clusterId int32, dVersions *domain.DeploymentVersion) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterIdAndDeploymentVersion", clusterId, dVersions)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterIdAndDeploymentVersion indicates an expected call of FindEndpointsByClusterIdAndDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindEndpointsByClusterIdAndDeploymentVersion(clusterId, dVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterIdAndDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindEndpointsByClusterIdAndDeploymentVersion), clusterId, dVersions)
}

// FindEndpointsByClusterName mocks base method.
func (m *MockRepository) FindEndpointsByClusterName(clusterName string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterName", clusterName)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterName indicates an expected call of FindEndpointsByClusterName.
func (mr *MockRepositoryMockRecorder) FindEndpointsByClusterName(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterName", reflect.TypeOf((*MockRepository)(nil).FindEndpointsByClusterName), clusterName)
}

// FindEndpointsByDeploymentVersion mocks base method.
func (m *MockRepository) FindEndpointsByDeploymentVersion(version string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByDeploymentVersion", version)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByDeploymentVersion indicates an expected call of FindEndpointsByDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindEndpointsByDeploymentVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindEndpointsByDeploymentVersion), version)
}

// FindEndpointsByDeploymentVersionsIn mocks base method.
func (m *MockRepository) FindEndpointsByDeploymentVersionsIn(dVersions []*domain.DeploymentVersion) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByDeploymentVersionsIn", dVersions)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByDeploymentVersionsIn indicates an expected call of FindEndpointsByDeploymentVersionsIn.
func (mr *MockRepositoryMockRecorder) FindEndpointsByDeploymentVersionsIn(dVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByDeploymentVersionsIn", reflect.TypeOf((*MockRepository)(nil).FindEndpointsByDeploymentVersionsIn), dVersions)
}

// FindEnvoyConfigVersion mocks base method.
func (m *MockRepository) FindEnvoyConfigVersion(nodeGroup, entityType string) (*domain.EnvoyConfigVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEnvoyConfigVersion", nodeGroup, entityType)
	ret0, _ := ret[0].(*domain.EnvoyConfigVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEnvoyConfigVersion indicates an expected call of FindEnvoyConfigVersion.
func (mr *MockRepositoryMockRecorder) FindEnvoyConfigVersion(nodeGroup, entityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEnvoyConfigVersion", reflect.TypeOf((*MockRepository)(nil).FindEnvoyConfigVersion), nodeGroup, entityType)
}

// FindExtAuthzFilterByName mocks base method.
func (m *MockRepository) FindExtAuthzFilterByName(name string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByName", name)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByName indicates an expected call of FindExtAuthzFilterByName.
func (mr *MockRepositoryMockRecorder) FindExtAuthzFilterByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByName", reflect.TypeOf((*MockRepository)(nil).FindExtAuthzFilterByName), name)
}

// FindExtAuthzFilterByNodeGroup mocks base method.
func (m *MockRepository) FindExtAuthzFilterByNodeGroup(nodeGroup string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByNodeGroup", nodeGroup)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByNodeGroup indicates an expected call of FindExtAuthzFilterByNodeGroup.
func (mr *MockRepositoryMockRecorder) FindExtAuthzFilterByNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByNodeGroup", reflect.TypeOf((*MockRepository)(nil).FindExtAuthzFilterByNodeGroup), nodeGroup)
}

// FindFirstVirtualHostByNameAndRouteConfigurationId mocks base method.
func (m *MockRepository) FindFirstVirtualHostByNameAndRouteConfigurationId(name string, id int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstVirtualHostByNameAndRouteConfigurationId", name, id)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstVirtualHostByNameAndRouteConfigurationId indicates an expected call of FindFirstVirtualHostByNameAndRouteConfigurationId.
func (mr *MockRepositoryMockRecorder) FindFirstVirtualHostByNameAndRouteConfigurationId(name, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstVirtualHostByNameAndRouteConfigurationId", reflect.TypeOf((*MockRepository)(nil).FindFirstVirtualHostByNameAndRouteConfigurationId), name, id)
}

// FindFirstVirtualHostByRouteConfigurationId mocks base method.
func (m *MockRepository) FindFirstVirtualHostByRouteConfigurationId(routeConfigId int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstVirtualHostByRouteConfigurationId", routeConfigId)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstVirtualHostByRouteConfigurationId indicates an expected call of FindFirstVirtualHostByRouteConfigurationId.
func (mr *MockRepositoryMockRecorder) FindFirstVirtualHostByRouteConfigurationId(routeConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstVirtualHostByRouteConfigurationId", reflect.TypeOf((*MockRepository)(nil).FindFirstVirtualHostByRouteConfigurationId), routeConfigId)
}

// FindHashPolicyByClusterAndVersions mocks base method.
func (m *MockRepository) FindHashPolicyByClusterAndVersions(clusterName string, versions ...string) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{clusterName}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindHashPolicyByClusterAndVersions", varargs...)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByClusterAndVersions indicates an expected call of FindHashPolicyByClusterAndVersions.
func (mr *MockRepositoryMockRecorder) FindHashPolicyByClusterAndVersions(clusterName interface{}, versions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{clusterName}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByClusterAndVersions", reflect.TypeOf((*MockRepository)(nil).FindHashPolicyByClusterAndVersions), varargs...)
}

// FindHashPolicyByEndpointId mocks base method.
func (m *MockRepository) FindHashPolicyByEndpointId(endpointId int32) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyByEndpointId", endpointId)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByEndpointId indicates an expected call of FindHashPolicyByEndpointId.
func (mr *MockRepositoryMockRecorder) FindHashPolicyByEndpointId(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByEndpointId", reflect.TypeOf((*MockRepository)(nil).FindHashPolicyByEndpointId), endpointId)
}

// FindHashPolicyByRouteId mocks base method.
func (m *MockRepository) FindHashPolicyByRouteId(routeId int32) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyByRouteId", routeId)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByRouteId indicates an expected call of FindHashPolicyByRouteId.
func (mr *MockRepositoryMockRecorder) FindHashPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByRouteId", reflect.TypeOf((*MockRepository)(nil).FindHashPolicyByRouteId), routeId)
}

// FindHeaderMatcherByRouteId mocks base method.
func (m *MockRepository) FindHeaderMatcherByRouteId(routeId int32) ([]*domain.HeaderMatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHeaderMatcherByRouteId", routeId)
	ret0, _ := ret[0].([]*domain.HeaderMatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHeaderMatcherByRouteId indicates an expected call of FindHeaderMatcherByRouteId.
func (mr *MockRepositoryMockRecorder) FindHeaderMatcherByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHeaderMatcherByRouteId", reflect.TypeOf((*MockRepository)(nil).FindHeaderMatcherByRouteId), routeId)
}

// FindHealthChecksByClusterId mocks base method.
func (m *MockRepository) FindHealthChecksByClusterId(clusterId int32) ([]*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHealthChecksByClusterId", clusterId)
	ret0, _ := ret[0].([]*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHealthChecksByClusterId indicates an expected call of FindHealthChecksByClusterId.
func (mr *MockRepositoryMockRecorder) FindHealthChecksByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHealthChecksByClusterId", reflect.TypeOf((*MockRepository)(nil).FindHealthChecksByClusterId), clusterId)
}

// FindListenerById mocks base method.
func (m *MockRepository) FindListenerById(id int32) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerById", id)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerById indicates an expected call of FindListenerById.
func (mr *MockRepositoryMockRecorder) FindListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerById", reflect.TypeOf((*MockRepository)(nil).FindListenerById), id)
}

// FindListenerByNodeGroupIdAndName mocks base method.
func (m *MockRepository) FindListenerByNodeGroupIdAndName(nodeGroupId, name string) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerByNodeGroupIdAndName", nodeGroupId, name)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerByNodeGroupIdAndName indicates an expected call of FindListenerByNodeGroupIdAndName.
func (mr *MockRepositoryMockRecorder) FindListenerByNodeGroupIdAndName(nodeGroupId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerByNodeGroupIdAndName", reflect.TypeOf((*MockRepository)(nil).FindListenerByNodeGroupIdAndName), nodeGroupId, name)
}

// FindListenerIdsByLuaFilterId mocks base method.
func (m *MockRepository) FindListenerIdsByLuaFilterId(luaFilterId int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerIdsByLuaFilterId", luaFilterId)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerIdsByLuaFilterId indicates an expected call of FindListenerIdsByLuaFilterId.
func (mr *MockRepositoryMockRecorder) FindListenerIdsByLuaFilterId(luaFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerIdsByLuaFilterId", reflect.TypeOf((*MockRepository)(nil).FindListenerIdsByLuaFilterId), luaFilterId)
}

// FindListenerIdsByWasmFilterId mocks base method.
func (m *MockRepository) FindListenerIdsByWasmFilterId(wasmFilterId int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerIdsByWasmFilterId", wasmFilterId)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerIdsByWasmFilterId indicates an expected call of FindListenerIdsByWasmFilterId.
func (mr *MockRepositoryMockRecorder) FindListenerIdsByWasmFilterId(wasmFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerIdsByWasmFilterId", reflect.TypeOf((*MockRepository)(nil).FindListenerIdsByWasmFilterId), wasmFilterId)
}

// FindListenersByNodeGroupId mocks base method.
func (m *MockRepository) FindListenersByNodeGroupId(nodeGroupId string) ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenersByNodeGroupId", nodeGroupId)
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenersByNodeGroupId indicates an expected call of FindListenersByNodeGroupId.
func (mr *MockRepositoryMockRecorder) FindListenersByNodeGroupId(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenersByNodeGroupId", reflect.TypeOf((*MockRepository)(nil).FindListenersByNodeGroupId), nodeGroupId)
}

// FindLuaFilterByListenerId mocks base method.
func (m *MockRepository) FindLuaFilterByListenerId(listenerId int32) ([]*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLuaFilterByListenerId", listenerId)
	ret0, _ := ret[0].([]*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLuaFilterByListenerId indicates an expected call of FindLuaFilterByListenerId.
func (mr *MockRepositoryMockRecorder) FindLuaFilterByListenerId(listenerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLuaFilterByListenerId", reflect.TypeOf((*MockRepository)(nil).FindLuaFilterByListenerId), listenerId)
}

// FindLuaFilterByName mocks base method.
func (m *MockRepository) FindLuaFilterByName(filterName string) (*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLuaFilterByName", filterName)
	ret0, _ := ret[0].(*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLuaFilterByName indicates an expected call of FindLuaFilterByName.
func (mr *MockRepositoryMockRecorder) FindLuaFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLuaFilterByName", reflect.TypeOf((*MockRepository)(nil).FindLuaFilterByName), filterName)
}

// FindMicroserviceVersionByNameAndInitialVersion mocks base method.
func (m *MockRepository) FindMicroserviceVersionByNameAndInitialVersion(name string, namespace msaddr.Namespace, initialVersion string) (*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionByNameAndInitialVersion", name, namespace, initialVersion)
	ret0, _ := ret[0].(*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionByNameAndInitialVersion indicates an expected call of FindMicroserviceVersionByNameAndInitialVersion.
func (mr *MockRepositoryMockRecorder) FindMicroserviceVersionByNameAndInitialVersion(name, namespace, initialVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionByNameAndInitialVersion", reflect.TypeOf((*MockRepository)(nil).FindMicroserviceVersionByNameAndInitialVersion), name, namespace, initialVersion)
}

// FindMicroserviceVersionsByNameAndNamespace mocks base method.
func (m *MockRepository) FindMicroserviceVersionsByNameAndNamespace(name string, namespace msaddr.Namespace) ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionsByNameAndNamespace", name, namespace)
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionsByNameAndNamespace indicates an expected call of FindMicroserviceVersionsByNameAndNamespace.
func (mr *MockRepositoryMockRecorder) FindMicroserviceVersionsByNameAndNamespace(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionsByNameAndNamespace", reflect.TypeOf((*MockRepository)(nil).FindMicroserviceVersionsByNameAndNamespace), name, namespace)
}

// FindMicroserviceVersionsByVersion mocks base method.
func (m *MockRepository) FindMicroserviceVersionsByVersion(version *domain.DeploymentVersion) ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionsByVersion", version)
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionsByVersion indicates an expected call of FindMicroserviceVersionsByVersion.
func (mr *MockRepositoryMockRecorder) FindMicroserviceVersionsByVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionsByVersion", reflect.TypeOf((*MockRepository)(nil).FindMicroserviceVersionsByVersion), version)
}

// FindNodeGroupByName mocks base method.
func (m *MockRepository) FindNodeGroupByName(name string) (*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupByName", name)
	ret0, _ := ret[0].(*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupByName indicates an expected call of FindNodeGroupByName.
func (mr *MockRepositoryMockRecorder) FindNodeGroupByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupByName", reflect.TypeOf((*MockRepository)(nil).FindNodeGroupByName), name)
}

// FindNodeGroupsByCluster mocks base method.
func (m *MockRepository) FindNodeGroupsByCluster(cluster *domain.Cluster) ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupsByCluster", cluster)
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupsByCluster indicates an expected call of FindNodeGroupsByCluster.
func (mr *MockRepositoryMockRecorder) FindNodeGroupsByCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupsByCluster", reflect.TypeOf((*MockRepository)(nil).FindNodeGroupsByCluster), cluster)
}

// FindRateLimitByNameWithHighestPriority mocks base method.
func (m *MockRepository) FindRateLimitByNameWithHighestPriority(name string) (*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRateLimitByNameWithHighestPriority", name)
	ret0, _ := ret[0].(*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRateLimitByNameWithHighestPriority indicates an expected call of FindRateLimitByNameWithHighestPriority.
func (mr *MockRepositoryMockRecorder) FindRateLimitByNameWithHighestPriority(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRateLimitByNameWithHighestPriority", reflect.TypeOf((*MockRepository)(nil).FindRateLimitByNameWithHighestPriority), name)
}

// FindRetryPolicyByRouteId mocks base method.
func (m *MockRepository) FindRetryPolicyByRouteId(routeId int32) (*domain.RetryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryPolicyByRouteId", routeId)
	ret0, _ := ret[0].(*domain.RetryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRetryPolicyByRouteId indicates an expected call of FindRetryPolicyByRouteId.
func (mr *MockRepositoryMockRecorder) FindRetryPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryPolicyByRouteId", reflect.TypeOf((*MockRepository)(nil).FindRetryPolicyByRouteId), routeId)
}

// FindRouteById mocks base method.
func (m *MockRepository) FindRouteById(routeId int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteById", routeId)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteById indicates an expected call of FindRouteById.
func (mr *MockRepositoryMockRecorder) FindRouteById(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteById", reflect.TypeOf((*MockRepository)(nil).FindRouteById), routeId)
}

// FindRouteByStatefulSession mocks base method.
func (m *MockRepository) FindRouteByStatefulSession(statefulSessionId int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteByStatefulSession", statefulSessionId)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteByStatefulSession indicates an expected call of FindRouteByStatefulSession.
func (mr *MockRepositoryMockRecorder) FindRouteByStatefulSession(statefulSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteByStatefulSession", reflect.TypeOf((*MockRepository)(nil).FindRouteByStatefulSession), statefulSessionId)
}

// FindRouteByUuid mocks base method.
func (m *MockRepository) FindRouteByUuid(uuid string) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteByUuid", uuid)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteByUuid indicates an expected call of FindRouteByUuid.
func (mr *MockRepositoryMockRecorder) FindRouteByUuid(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteByUuid", reflect.TypeOf((*MockRepository)(nil).FindRouteByUuid), uuid)
}

// FindRouteConfigById mocks base method.
func (m *MockRepository) FindRouteConfigById(routeConfigurationId int32) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigById", routeConfigurationId)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigById indicates an expected call of FindRouteConfigById.
func (mr *MockRepositoryMockRecorder) FindRouteConfigById(routeConfigurationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigById", reflect.TypeOf((*MockRepository)(nil).FindRouteConfigById), routeConfigurationId)
}

// FindRouteConfigByNodeGroupIdAndName mocks base method.
func (m *MockRepository) FindRouteConfigByNodeGroupIdAndName(nodeGroupId, name string) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigByNodeGroupIdAndName", nodeGroupId, name)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigByNodeGroupIdAndName indicates an expected call of FindRouteConfigByNodeGroupIdAndName.
func (mr *MockRepositoryMockRecorder) FindRouteConfigByNodeGroupIdAndName(nodeGroupId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigByNodeGroupIdAndName", reflect.TypeOf((*MockRepository)(nil).FindRouteConfigByNodeGroupIdAndName), nodeGroupId, name)
}

// FindRouteConfigsByEndpoint mocks base method.
func (m *MockRepository) FindRouteConfigsByEndpoint(endpoint *domain.Endpoint) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByEndpoint", endpoint)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByEndpoint indicates an expected call of FindRouteConfigsByEndpoint.
func (mr *MockRepositoryMockRecorder) FindRouteConfigsByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByEndpoint", reflect.TypeOf((*MockRepository)(nil).FindRouteConfigsByEndpoint), endpoint)
}

// FindRouteConfigsByNodeGroupId mocks base method.
func (m *MockRepository) FindRouteConfigsByNodeGroupId(nodeGroupId string) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByNodeGroupId", nodeGroupId)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByNodeGroupId indicates an expected call of FindRouteConfigsByNodeGroupId.
func (mr *MockRepositoryMockRecorder) FindRouteConfigsByNodeGroupId(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByNodeGroupId", reflect.TypeOf((*MockRepository)(nil).FindRouteConfigsByNodeGroupId), nodeGroupId)
}

// FindRouteConfigsByRouteDeploymentVersion mocks base method.
func (m *MockRepository) FindRouteConfigsByRouteDeploymentVersion(deploymentVersion string) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByRouteDeploymentVersion", deploymentVersion)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByRouteDeploymentVersion indicates an expected call of FindRouteConfigsByRouteDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindRouteConfigsByRouteDeploymentVersion(deploymentVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByRouteDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindRouteConfigsByRouteDeploymentVersion), deploymentVersion)
}

// FindRoutesByAutoGeneratedAndDeploymentVersion mocks base method.
func (m *MockRepository) FindRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated bool, dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByAutoGeneratedAndDeploymentVersion", autoGenerated, dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByAutoGeneratedAndDeploymentVersion indicates an expected call of FindRoutesByAutoGeneratedAndDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByAutoGeneratedAndDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindRoutesByAutoGeneratedAndDeploymentVersion), autoGenerated, dVersion)
}

// FindRoutesByClusterName mocks base method.
func (m *MockRepository) FindRoutesByClusterName(clusterName string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterName", clusterName)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterName indicates an expected call of FindRoutesByClusterName.
func (mr *MockRepositoryMockRecorder) FindRoutesByClusterName(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterName", reflect.TypeOf((*MockRepository)(nil).FindRoutesByClusterName), clusterName)
}

// FindRoutesByClusterNameAndDeploymentVersion mocks base method.
func (m *MockRepository) FindRoutesByClusterNameAndDeploymentVersion(clusterName, dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterNameAndDeploymentVersion", clusterName, dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterNameAndDeploymentVersion indicates an expected call of FindRoutesByClusterNameAndDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindRoutesByClusterNameAndDeploymentVersion(clusterName, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterNameAndDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindRoutesByClusterNameAndDeploymentVersion), clusterName, dVersion)
}

// FindRoutesByClusterNamePrefix mocks base method.
func (m *MockRepository) FindRoutesByClusterNamePrefix(clusterNamePrefix string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterNamePrefix", clusterNamePrefix)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterNamePrefix indicates an expected call of FindRoutesByClusterNamePrefix.
func (mr *MockRepositoryMockRecorder) FindRoutesByClusterNamePrefix(clusterNamePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterNamePrefix", reflect.TypeOf((*MockRepository)(nil).FindRoutesByClusterNamePrefix), clusterNamePrefix)
}

// FindRoutesByDeploymentVersion mocks base method.
func (m *MockRepository) FindRoutesByDeploymentVersion(dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersion", dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersion indicates an expected call of FindRoutesByDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindRoutesByDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindRoutesByDeploymentVersion), dVersion)
}

// FindRoutesByDeploymentVersionAndRouteKey mocks base method.
func (m *MockRepository) FindRoutesByDeploymentVersionAndRouteKey(deploymentVersion, routeKey string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionAndRouteKey", deploymentVersion, routeKey)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionAndRouteKey indicates an expected call of FindRoutesByDeploymentVersionAndRouteKey.
func (mr *MockRepositoryMockRecorder) FindRoutesByDeploymentVersionAndRouteKey(deploymentVersion, routeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionAndRouteKey", reflect.TypeOf((*MockRepository)(nil).FindRoutesByDeploymentVersionAndRouteKey), deploymentVersion, routeKey)
}

// FindRoutesByDeploymentVersionIn mocks base method.
func (m *MockRepository) FindRoutesByDeploymentVersionIn(dVersions ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionIn", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionIn indicates an expected call of FindRoutesByDeploymentVersionIn.
func (mr *MockRepositoryMockRecorder) FindRoutesByDeploymentVersionIn(dVersions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionIn", reflect.TypeOf((*MockRepository)(nil).FindRoutesByDeploymentVersionIn), dVersions...)
}

// FindRoutesByDeploymentVersionStageIn mocks base method.
func (m *MockRepository) FindRoutesByDeploymentVersionStageIn(dVersionStage ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersionStage {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionStageIn", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionStageIn indicates an expected call of FindRoutesByDeploymentVersionStageIn.
func (mr *MockRepositoryMockRecorder) FindRoutesByDeploymentVersionStageIn(dVersionStage ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionStageIn", reflect.TypeOf((*MockRepository)(nil).FindRoutesByDeploymentVersionStageIn), dVersionStage...)
}

// FindRoutesByDeploymentVersions mocks base method.
func (m *MockRepository) FindRoutesByDeploymentVersions(dVersions ...*domain.DeploymentVersion) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersions", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersions indicates an expected call of FindRoutesByDeploymentVersions.
func (mr *MockRepositoryMockRecorder) FindRoutesByDeploymentVersions(dVersions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersions", reflect.TypeOf((*MockRepository)(nil).FindRoutesByDeploymentVersions), dVersions...)
}

// FindRoutesByNamespaceHeaderIsNot mocks base method.
func (m *MockRepository) FindRoutesByNamespaceHeaderIsNot(headerName string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByNamespaceHeaderIsNot", headerName)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByNamespaceHeaderIsNot indicates an expected call of FindRoutesByNamespaceHeaderIsNot.
func (mr *MockRepositoryMockRecorder) FindRoutesByNamespaceHeaderIsNot(headerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByNamespaceHeaderIsNot", reflect.TypeOf((*MockRepository)(nil).FindRoutesByNamespaceHeaderIsNot), headerName)
}

// FindRoutesByRateLimit mocks base method.
func (m *MockRepository) FindRoutesByRateLimit(rateLimitId string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByRateLimit", rateLimitId)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByRateLimit indicates an expected call of FindRoutesByRateLimit.
func (mr *MockRepositoryMockRecorder) FindRoutesByRateLimit(rateLimitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByRateLimit", reflect.TypeOf((*MockRepository)(nil).FindRoutesByRateLimit), rateLimitId)
}

// FindRoutesByUUIDPrefix mocks base method.
func (m *MockRepository) FindRoutesByUUIDPrefix(prefixUuid string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByUUIDPrefix", prefixUuid)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByUUIDPrefix indicates an expected call of FindRoutesByUUIDPrefix.
func (mr *MockRepositoryMockRecorder) FindRoutesByUUIDPrefix(prefixUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByUUIDPrefix", reflect.TypeOf((*MockRepository)(nil).FindRoutesByUUIDPrefix), prefixUuid)
}

// FindRoutesByVirtualHostId mocks base method.
func (m *MockRepository) FindRoutesByVirtualHostId(virtualHostId int32) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostId", virtualHostId)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostId indicates an expected call of FindRoutesByVirtualHostId.
func (mr *MockRepositoryMockRecorder) FindRoutesByVirtualHostId(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostId", reflect.TypeOf((*MockRepository)(nil).FindRoutesByVirtualHostId), virtualHostId)
}

// FindRoutesByVirtualHostIdAndDeploymentVersion mocks base method.
func (m *MockRepository) FindRoutesByVirtualHostIdAndDeploymentVersion(virtualHostId int32, version string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostIdAndDeploymentVersion", virtualHostId, version)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostIdAndDeploymentVersion indicates an expected call of FindRoutesByVirtualHostIdAndDeploymentVersion.
func (mr *MockRepositoryMockRecorder) FindRoutesByVirtualHostIdAndDeploymentVersion(virtualHostId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostIdAndDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).FindRoutesByVirtualHostIdAndDeploymentVersion), virtualHostId, version)
}

// FindRoutesByVirtualHostIdAndRouteKey mocks base method.
func (m *MockRepository) FindRoutesByVirtualHostIdAndRouteKey(vHostId int32, routeKey string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostIdAndRouteKey", vHostId, routeKey)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostIdAndRouteKey indicates an expected call of FindRoutesByVirtualHostIdAndRouteKey.
func (mr *MockRepositoryMockRecorder) FindRoutesByVirtualHostIdAndRouteKey(vHostId, routeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostIdAndRouteKey", reflect.TypeOf((*MockRepository)(nil).FindRoutesByVirtualHostIdAndRouteKey), vHostId, routeKey)
}

// FindStatefulSessionConfigById mocks base method.
func (m *MockRepository) FindStatefulSessionConfigById(id int32) (*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigById", id)
	ret0, _ := ret[0].(*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigById indicates an expected call of FindStatefulSessionConfigById.
func (mr *MockRepositoryMockRecorder) FindStatefulSessionConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigById", reflect.TypeOf((*MockRepository)(nil).FindStatefulSessionConfigById), id)
}

// FindStatefulSessionConfigsByCluster mocks base method.
func (m *MockRepository) FindStatefulSessionConfigsByCluster(cluster *domain.Cluster) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByCluster", cluster)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByCluster indicates an expected call of FindStatefulSessionConfigsByCluster.
func (mr *MockRepositoryMockRecorder) FindStatefulSessionConfigsByCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByCluster", reflect.TypeOf((*MockRepository)(nil).FindStatefulSessionConfigsByCluster), cluster)
}

// FindStatefulSessionConfigsByClusterAndVersion mocks base method.
func (m *MockRepository) FindStatefulSessionConfigsByClusterAndVersion(clusterName string, namespace msaddr.Namespace, version *domain.DeploymentVersion) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByClusterAndVersion", clusterName, namespace, version)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByClusterAndVersion indicates an expected call of FindStatefulSessionConfigsByClusterAndVersion.
func (mr *MockRepositoryMockRecorder) FindStatefulSessionConfigsByClusterAndVersion(clusterName, namespace, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByClusterAndVersion", reflect.TypeOf((*MockRepository)(nil).FindStatefulSessionConfigsByClusterAndVersion), clusterName, namespace, version)
}

// FindStatefulSessionConfigsByClusterName mocks base method.
func (m *MockRepository) FindStatefulSessionConfigsByClusterName(clusterName string, namespace msaddr.Namespace) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByClusterName", clusterName, namespace)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByClusterName indicates an expected call of FindStatefulSessionConfigsByClusterName.
func (mr *MockRepositoryMockRecorder) FindStatefulSessionConfigsByClusterName(clusterName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByClusterName", reflect.TypeOf((*MockRepository)(nil).FindStatefulSessionConfigsByClusterName), clusterName, namespace)
}

// FindStatefulSessionConfigsByCookieName mocks base method.
func (m *MockRepository) FindStatefulSessionConfigsByCookieName(cookieName string) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByCookieName", cookieName)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByCookieName indicates an expected call of FindStatefulSessionConfigsByCookieName.
func (mr *MockRepositoryMockRecorder) FindStatefulSessionConfigsByCookieName(cookieName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByCookieName", reflect.TypeOf((*MockRepository)(nil).FindStatefulSessionConfigsByCookieName), cookieName)
}

// FindTcpKeepaliveById mocks base method.
func (m *MockRepository) FindTcpKeepaliveById(Id int32) (*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTcpKeepaliveById", Id)
	ret0, _ := ret[0].(*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTcpKeepaliveById indicates an expected call of FindTcpKeepaliveById.
func (mr *MockRepositoryMockRecorder) FindTcpKeepaliveById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTcpKeepaliveById", reflect.TypeOf((*MockRepository)(nil).FindTcpKeepaliveById), Id)
}

// FindThresholdById mocks base method.
func (m *MockRepository) FindThresholdById(Id int32) (*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindThresholdById", Id)
	ret0, _ := ret[0].(*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindThresholdById indicates an expected call of FindThresholdById.
func (mr *MockRepositoryMockRecorder) FindThresholdById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindThresholdById", reflect.TypeOf((*MockRepository)(nil).FindThresholdById), Id)
}

// FindTlsConfigById mocks base method.
func (m *MockRepository) FindTlsConfigById(id int32) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigById", id)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigById indicates an expected call of FindTlsConfigById.
func (mr *MockRepositoryMockRecorder) FindTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigById", reflect.TypeOf((*MockRepository)(nil).FindTlsConfigById), id)
}

// FindTlsConfigByName mocks base method.
func (m *MockRepository) FindTlsConfigByName(name string) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigByName", name)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigByName indicates an expected call of FindTlsConfigByName.
func (mr *MockRepositoryMockRecorder) FindTlsConfigByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigByName", reflect.TypeOf((*MockRepository)(nil).FindTlsConfigByName), name)
}

// FindVirtualHostById mocks base method.
func (m *MockRepository) FindVirtualHostById(virtualHostId int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostById", virtualHostId)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostById indicates an expected call of FindVirtualHostById.
func (mr *MockRepositoryMockRecorder) FindVirtualHostById(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostById", reflect.TypeOf((*MockRepository)(nil).FindVirtualHostById), virtualHostId)
}

// FindVirtualHostDomainByVirtualHostId mocks base method.
func (m *MockRepository) FindVirtualHostDomainByVirtualHostId(virtualHostId int32) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostDomainByVirtualHostId", virtualHostId)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostDomainByVirtualHostId indicates an expected call of FindVirtualHostDomainByVirtualHostId.
func (mr *MockRepositoryMockRecorder) FindVirtualHostDomainByVirtualHostId(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostDomainByVirtualHostId", reflect.TypeOf((*MockRepository)(nil).FindVirtualHostDomainByVirtualHostId), virtualHostId)
}

// FindVirtualHostDomainsByHost mocks base method.
func (m *MockRepository) FindVirtualHostDomainsByHost(virtualHostDomain string) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostDomainsByHost", virtualHostDomain)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostDomainsByHost indicates an expected call of FindVirtualHostDomainsByHost.
func (mr *MockRepositoryMockRecorder) FindVirtualHostDomainsByHost(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostDomainsByHost", reflect.TypeOf((*MockRepository)(nil).FindVirtualHostDomainsByHost), virtualHostDomain)
}

// FindVirtualHostsByRouteConfigurationId mocks base method.
func (m *MockRepository) FindVirtualHostsByRouteConfigurationId(routeConfigId int32) ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostsByRouteConfigurationId", routeConfigId)
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostsByRouteConfigurationId indicates an expected call of FindVirtualHostsByRouteConfigurationId.
func (mr *MockRepositoryMockRecorder) FindVirtualHostsByRouteConfigurationId(routeConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostsByRouteConfigurationId", reflect.TypeOf((*MockRepository)(nil).FindVirtualHostsByRouteConfigurationId), routeConfigId)
}

// FindWasmFilterByListenerId mocks base method.
func (m *MockRepository) FindWasmFilterByListenerId(listenerId int32) ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterByListenerId", listenerId)
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterByListenerId indicates an expected call of FindWasmFilterByListenerId.
func (mr *MockRepositoryMockRecorder) FindWasmFilterByListenerId(listenerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterByListenerId", reflect.TypeOf((*MockRepository)(nil).FindWasmFilterByListenerId), listenerId)
}

// FindWasmFilterByName mocks base method.
func (m *MockRepository) FindWasmFilterByName(filterName string) (*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterByName", filterName)
	ret0, _ := ret[0].(*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterByName indicates an expected call of FindWasmFilterByName.
func (mr *MockRepositoryMockRecorder) FindWasmFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterByName", reflect.TypeOf((*MockRepository)(nil).FindWasmFilterByName), filterName)
}

// HasLuaFilterWithId mocks base method.
func (m *MockRepository) HasLuaFilterWithId(listenerId, luaFilterId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLuaFilterWithId", listenerId, luaFilterId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLuaFilterWithId indicates an expected call of HasLuaFilterWithId.
func (mr *MockRepositoryMockRecorder) HasLuaFilterWithId(listenerId, luaFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLuaFilterWithId", reflect.TypeOf((*MockRepository)(nil).HasLuaFilterWithId), listenerId, luaFilterId)
}

// HasWasmFilterWithId mocks base method.
func (m *MockRepository) HasWasmFilterWithId(listenerId, wasmFilterId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWasmFilterWithId", listenerId, wasmFilterId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasWasmFilterWithId indicates an expected call of HasWasmFilterWithId.
func (mr *MockRepositoryMockRecorder) HasWasmFilterWithId(listenerId, wasmFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWasmFilterWithId", reflect.TypeOf((*MockRepository)(nil).HasWasmFilterWithId), listenerId, wasmFilterId)
}

// SaveCircuitBreaker mocks base method.
func (m *MockRepository) SaveCircuitBreaker(circuitBreaker *domain.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCircuitBreaker indicates an expected call of SaveCircuitBreaker.
func (mr *MockRepositoryMockRecorder) SaveCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCircuitBreaker", reflect.TypeOf((*MockRepository)(nil).SaveCircuitBreaker), circuitBreaker)
}

// SaveCluster mocks base method.
func (m *MockRepository) SaveCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCluster indicates an expected call of SaveCluster.
func (mr *MockRepositoryMockRecorder) SaveCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCluster", reflect.TypeOf((*MockRepository)(nil).SaveCluster), cluster)
}

// SaveClustersNodeGroup mocks base method.
func (m *MockRepository) SaveClustersNodeGroup(relation *domain.ClustersNodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClustersNodeGroup", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClustersNodeGroup indicates an expected call of SaveClustersNodeGroup.
func (mr *MockRepositoryMockRecorder) SaveClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClustersNodeGroup", reflect.TypeOf((*MockRepository)(nil).SaveClustersNodeGroup), relation)
}

// SaveCompositeSatellite mocks base method.
func (m *MockRepository) SaveCompositeSatellite(satellite *domain.CompositeSatellite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompositeSatellite", satellite)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCompositeSatellite indicates an expected call of SaveCompositeSatellite.
func (mr *MockRepositoryMockRecorder) SaveCompositeSatellite(satellite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompositeSatellite", reflect.TypeOf((*MockRepository)(nil).SaveCompositeSatellite), satellite)
}

// SaveDeploymentVersion mocks base method.
func (m *MockRepository) SaveDeploymentVersion(dVersion *domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDeploymentVersion", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDeploymentVersion indicates an expected call of SaveDeploymentVersion.
func (mr *MockRepositoryMockRecorder) SaveDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeploymentVersion", reflect.TypeOf((*MockRepository)(nil).SaveDeploymentVersion), dVersion)
}

// SaveEndpoint mocks base method.
func (m *MockRepository) SaveEndpoint(endpoint *domain.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEndpoint", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEndpoint indicates an expected call of SaveEndpoint.
func (mr *MockRepositoryMockRecorder) SaveEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEndpoint", reflect.TypeOf((*MockRepository)(nil).SaveEndpoint), endpoint)
}

// SaveEntity mocks base method.
func (m *MockRepository) SaveEntity(table string, entity interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntity", table, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntity indicates an expected call of SaveEntity.
func (mr *MockRepositoryMockRecorder) SaveEntity(table, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntity", reflect.TypeOf((*MockRepository)(nil).SaveEntity), table, entity)
}

// SaveEnvoyConfigVersion mocks base method.
func (m *MockRepository) SaveEnvoyConfigVersion(version *domain.EnvoyConfigVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEnvoyConfigVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEnvoyConfigVersion indicates an expected call of SaveEnvoyConfigVersion.
func (mr *MockRepositoryMockRecorder) SaveEnvoyConfigVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEnvoyConfigVersion", reflect.TypeOf((*MockRepository)(nil).SaveEnvoyConfigVersion), version)
}

// SaveExtAuthzFilter mocks base method.
func (m *MockRepository) SaveExtAuthzFilter(filter *domain.ExtAuthzFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExtAuthzFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExtAuthzFilter indicates an expected call of SaveExtAuthzFilter.
func (mr *MockRepositoryMockRecorder) SaveExtAuthzFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExtAuthzFilter", reflect.TypeOf((*MockRepository)(nil).SaveExtAuthzFilter), filter)
}

// SaveHashPolicy mocks base method.
func (m *MockRepository) SaveHashPolicy(hashPolicy *domain.HashPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashPolicy", hashPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashPolicy indicates an expected call of SaveHashPolicy.
func (mr *MockRepositoryMockRecorder) SaveHashPolicy(hashPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashPolicy", reflect.TypeOf((*MockRepository)(nil).SaveHashPolicy), hashPolicy)
}

// SaveHeaderMatcher mocks base method.
func (m *MockRepository) SaveHeaderMatcher(headerMatcher *domain.HeaderMatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHeaderMatcher", headerMatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHeaderMatcher indicates an expected call of SaveHeaderMatcher.
func (mr *MockRepositoryMockRecorder) SaveHeaderMatcher(headerMatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHeaderMatcher", reflect.TypeOf((*MockRepository)(nil).SaveHeaderMatcher), headerMatcher)
}

// SaveHealthCheck mocks base method.
func (m *MockRepository) SaveHealthCheck(healthCheck *domain.HealthCheck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHealthCheck", healthCheck)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHealthCheck indicates an expected call of SaveHealthCheck.
func (mr *MockRepositoryMockRecorder) SaveHealthCheck(healthCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHealthCheck", reflect.TypeOf((*MockRepository)(nil).SaveHealthCheck), healthCheck)
}

// SaveListener mocks base method.
func (m *MockRepository) SaveListener(listener *domain.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListener", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListener indicates an expected call of SaveListener.
func (mr *MockRepositoryMockRecorder) SaveListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListener", reflect.TypeOf((*MockRepository)(nil).SaveListener), listener)
}

// SaveListenerLuaFilter mocks base method.
func (m *MockRepository) SaveListenerLuaFilter(relation *domain.ListenersLuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListenerLuaFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListenerLuaFilter indicates an expected call of SaveListenerLuaFilter.
func (mr *MockRepositoryMockRecorder) SaveListenerLuaFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListenerLuaFilter", reflect.TypeOf((*MockRepository)(nil).SaveListenerLuaFilter), relation)
}

// SaveListenerWasmFilter mocks base method.
func (m *MockRepository) SaveListenerWasmFilter(relation *domain.ListenersWasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListenerWasmFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListenerWasmFilter indicates an expected call of SaveListenerWasmFilter.
func (mr *MockRepositoryMockRecorder) SaveListenerWasmFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListenerWasmFilter", reflect.TypeOf((*MockRepository)(nil).SaveListenerWasmFilter), relation)
}

// SaveLuaFilter mocks base method.
func (m *MockRepository) SaveLuaFilter(filter *domain.LuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLuaFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLuaFilter indicates an expected call of SaveLuaFilter.
func (mr *MockRepositoryMockRecorder) SaveLuaFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLuaFilter", reflect.TypeOf((*MockRepository)(nil).SaveLuaFilter), filter)
}

// SaveMicroserviceVersion mocks base method.
func (m *MockRepository) SaveMicroserviceVersion(msVersion *domain.MicroserviceVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMicroserviceVersion", msVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMicroserviceVersion indicates an expected call of SaveMicroserviceVersion.
func (mr *MockRepositoryMockRecorder) SaveMicroserviceVersion(msVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMicroserviceVersion", reflect.TypeOf((*MockRepository)(nil).SaveMicroserviceVersion), msVersion)
}

// SaveNodeGroup mocks base method.
func (m *MockRepository) SaveNodeGroup(nodeGroup *domain.NodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNodeGroup", nodeGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNodeGroup indicates an expected call of SaveNodeGroup.
func (mr *MockRepositoryMockRecorder) SaveNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNodeGroup", reflect.TypeOf((*MockRepository)(nil).SaveNodeGroup), nodeGroup)
}

// SaveRateLimit mocks base method.
func (m *MockRepository) SaveRateLimit(rateLimit *domain.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRateLimit", rateLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRateLimit indicates an expected call of SaveRateLimit.
func (mr *MockRepositoryMockRecorder) SaveRateLimit(rateLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRateLimit", reflect.TypeOf((*MockRepository)(nil).SaveRateLimit), rateLimit)
}

// SaveRetryPolicy mocks base method.
func (m *MockRepository) SaveRetryPolicy(retryPolicy *domain.RetryPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRetryPolicy", retryPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRetryPolicy indicates an expected call of SaveRetryPolicy.
func (mr *MockRepositoryMockRecorder) SaveRetryPolicy(retryPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRetryPolicy", reflect.TypeOf((*MockRepository)(nil).SaveRetryPolicy), retryPolicy)
}

// SaveRoute mocks base method.
func (m *MockRepository) SaveRoute(route *domain.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoute indicates an expected call of SaveRoute.
func (mr *MockRepositoryMockRecorder) SaveRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoute", reflect.TypeOf((*MockRepository)(nil).SaveRoute), route)
}

// SaveRouteConfig mocks base method.
func (m *MockRepository) SaveRouteConfig(routeConfig *domain.RouteConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRouteConfig", routeConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRouteConfig indicates an expected call of SaveRouteConfig.
func (mr *MockRepositoryMockRecorder) SaveRouteConfig(routeConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRouteConfig", reflect.TypeOf((*MockRepository)(nil).SaveRouteConfig), routeConfig)
}

// SaveStatefulSessionConfig mocks base method.
func (m *MockRepository) SaveStatefulSessionConfig(statefulSession *domain.StatefulSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStatefulSessionConfig", statefulSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStatefulSessionConfig indicates an expected call of SaveStatefulSessionConfig.
func (mr *MockRepositoryMockRecorder) SaveStatefulSessionConfig(statefulSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatefulSessionConfig", reflect.TypeOf((*MockRepository)(nil).SaveStatefulSessionConfig), statefulSession)
}

// SaveTcpKeepalive mocks base method.
func (m *MockRepository) SaveTcpKeepalive(tcpKeepalive *domain.TcpKeepalive) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTcpKeepalive", tcpKeepalive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTcpKeepalive indicates an expected call of SaveTcpKeepalive.
func (mr *MockRepositoryMockRecorder) SaveTcpKeepalive(tcpKeepalive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTcpKeepalive", reflect.TypeOf((*MockRepository)(nil).SaveTcpKeepalive), tcpKeepalive)
}

// SaveThreshold mocks base method.
func (m *MockRepository) SaveThreshold(threshold *domain.Threshold) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveThreshold", threshold)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveThreshold indicates an expected call of SaveThreshold.
func (mr *MockRepositoryMockRecorder) SaveThreshold(threshold interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveThreshold", reflect.TypeOf((*MockRepository)(nil).SaveThreshold), threshold)
}

// SaveTlsConfig mocks base method.
func (m *MockRepository) SaveTlsConfig(tls *domain.TlsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTlsConfig", tls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTlsConfig indicates an expected call of SaveTlsConfig.
func (mr *MockRepositoryMockRecorder) SaveTlsConfig(tls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTlsConfig", reflect.TypeOf((*MockRepository)(nil).SaveTlsConfig), tls)
}

// SaveVirtualHost mocks base method.
func (m *MockRepository) SaveVirtualHost(virtualHost *domain.VirtualHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualHost", virtualHost)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualHost indicates an expected call of SaveVirtualHost.
func (mr *MockRepositoryMockRecorder) SaveVirtualHost(virtualHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualHost", reflect.TypeOf((*MockRepository)(nil).SaveVirtualHost), virtualHost)
}

// SaveVirtualHostDomain mocks base method.
func (m *MockRepository) SaveVirtualHostDomain(virtualHostDomain *domain.VirtualHostDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualHostDomain", virtualHostDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualHostDomain indicates an expected call of SaveVirtualHostDomain.
func (mr *MockRepositoryMockRecorder) SaveVirtualHostDomain(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualHostDomain", reflect.TypeOf((*MockRepository)(nil).SaveVirtualHostDomain), virtualHostDomain)
}

// SaveWasmFilter mocks base method.
func (m *MockRepository) SaveWasmFilter(filter *domain.WasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWasmFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWasmFilter indicates an expected call of SaveWasmFilter.
func (mr *MockRepositoryMockRecorder) SaveWasmFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWasmFilter", reflect.TypeOf((*MockRepository)(nil).SaveWasmFilter), filter)
}

// MockClusterRepository is a mock of ClusterRepository interface.
type MockClusterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRepositoryMockRecorder
}

// MockClusterRepositoryMockRecorder is the mock recorder for MockClusterRepository.
type MockClusterRepositoryMockRecorder struct {
	mock *MockClusterRepository
}

// NewMockClusterRepository creates a new mock instance.
func NewMockClusterRepository(ctrl *gomock.Controller) *MockClusterRepository {
	mock := &MockClusterRepository{ctrl: ctrl}
	mock.recorder = &MockClusterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRepository) EXPECT() *MockClusterRepositoryMockRecorder {
	return m.recorder
}

// DeleteCluster mocks base method.
func (m *MockClusterRepository) DeleteCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterRepositoryMockRecorder) DeleteCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterRepository)(nil).DeleteCluster), cluster)
}

// DeleteClusterByName mocks base method.
func (m *MockClusterRepository) DeleteClusterByName(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterByName", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterByName indicates an expected call of DeleteClusterByName.
func (mr *MockClusterRepositoryMockRecorder) DeleteClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterByName", reflect.TypeOf((*MockClusterRepository)(nil).DeleteClusterByName), key)
}

// FindAllClusters mocks base method.
func (m *MockClusterRepository) FindAllClusters() ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusters")
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusters indicates an expected call of FindAllClusters.
func (mr *MockClusterRepositoryMockRecorder) FindAllClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusters", reflect.TypeOf((*MockClusterRepository)(nil).FindAllClusters))
}

// FindClusterByEndpointIn mocks base method.
func (m *MockClusterRepository) FindClusterByEndpointIn(endpoints []*domain.Endpoint) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByEndpointIn", endpoints)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByEndpointIn indicates an expected call of FindClusterByEndpointIn.
func (mr *MockClusterRepositoryMockRecorder) FindClusterByEndpointIn(endpoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByEndpointIn", reflect.TypeOf((*MockClusterRepository)(nil).FindClusterByEndpointIn), endpoints)
}

// FindClusterById mocks base method.
func (m *MockClusterRepository) FindClusterById(id int32) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterById", id)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterById indicates an expected call of FindClusterById.
func (mr *MockClusterRepositoryMockRecorder) FindClusterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterById", reflect.TypeOf((*MockClusterRepository)(nil).FindClusterById), id)
}

// FindClusterByName mocks base method.
func (m *MockClusterRepository) FindClusterByName(key string) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByName", key)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByName indicates an expected call of FindClusterByName.
func (mr *MockClusterRepositoryMockRecorder) FindClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByName", reflect.TypeOf((*MockClusterRepository)(nil).FindClusterByName), key)
}

// FindClusterByNodeGroup mocks base method.
func (m *MockClusterRepository) FindClusterByNodeGroup(group *domain.NodeGroup) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByNodeGroup", group)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByNodeGroup indicates an expected call of FindClusterByNodeGroup.
func (mr *MockClusterRepositoryMockRecorder) FindClusterByNodeGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByNodeGroup", reflect.TypeOf((*MockClusterRepository)(nil).FindClusterByNodeGroup), group)
}

// FindClustersByFamilyNameAndNamespace mocks base method.
func (m *MockClusterRepository) FindClustersByFamilyNameAndNamespace(familyName string, namespace msaddr.Namespace) ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersByFamilyNameAndNamespace", familyName, namespace)
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersByFamilyNameAndNamespace indicates an expected call of FindClustersByFamilyNameAndNamespace.
func (mr *MockClusterRepositoryMockRecorder) FindClustersByFamilyNameAndNamespace(familyName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersByFamilyNameAndNamespace", reflect.TypeOf((*MockClusterRepository)(nil).FindClustersByFamilyNameAndNamespace), familyName, namespace)
}

// SaveCluster mocks base method.
func (m *MockClusterRepository) SaveCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCluster indicates an expected call of SaveCluster.
func (mr *MockClusterRepositoryMockRecorder) SaveCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCluster", reflect.TypeOf((*MockClusterRepository)(nil).SaveCluster), cluster)
}

// MockEnvoyConfigVersionRepository is a mock of EnvoyConfigVersionRepository interface.
type MockEnvoyConfigVersionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyConfigVersionRepositoryMockRecorder
}

// MockEnvoyConfigVersionRepositoryMockRecorder is the mock recorder for MockEnvoyConfigVersionRepository.
type MockEnvoyConfigVersionRepositoryMockRecorder struct {
	mock *MockEnvoyConfigVersionRepository
}

// NewMockEnvoyConfigVersionRepository creates a new mock instance.
func NewMockEnvoyConfigVersionRepository(ctrl *gomock.Controller) *MockEnvoyConfigVersionRepository {
	mock := &MockEnvoyConfigVersionRepository{ctrl: ctrl}
	mock.recorder = &MockEnvoyConfigVersionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyConfigVersionRepository) EXPECT() *MockEnvoyConfigVersionRepositoryMockRecorder {
	return m.recorder
}

// FindEnvoyConfigVersion mocks base method.
func (m *MockEnvoyConfigVersionRepository) FindEnvoyConfigVersion(nodeGroup, entityType string) (*domain.EnvoyConfigVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEnvoyConfigVersion", nodeGroup, entityType)
	ret0, _ := ret[0].(*domain.EnvoyConfigVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEnvoyConfigVersion indicates an expected call of FindEnvoyConfigVersion.
func (mr *MockEnvoyConfigVersionRepositoryMockRecorder) FindEnvoyConfigVersion(nodeGroup, entityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEnvoyConfigVersion", reflect.TypeOf((*MockEnvoyConfigVersionRepository)(nil).FindEnvoyConfigVersion), nodeGroup, entityType)
}

// SaveEnvoyConfigVersion mocks base method.
func (m *MockEnvoyConfigVersionRepository) SaveEnvoyConfigVersion(version *domain.EnvoyConfigVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEnvoyConfigVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEnvoyConfigVersion indicates an expected call of SaveEnvoyConfigVersion.
func (mr *MockEnvoyConfigVersionRepositoryMockRecorder) SaveEnvoyConfigVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEnvoyConfigVersion", reflect.TypeOf((*MockEnvoyConfigVersionRepository)(nil).SaveEnvoyConfigVersion), version)
}

// MockListenerRepository is a mock of ListenerRepository interface.
type MockListenerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockListenerRepositoryMockRecorder
}

// MockListenerRepositoryMockRecorder is the mock recorder for MockListenerRepository.
type MockListenerRepositoryMockRecorder struct {
	mock *MockListenerRepository
}

// NewMockListenerRepository creates a new mock instance.
func NewMockListenerRepository(ctrl *gomock.Controller) *MockListenerRepository {
	mock := &MockListenerRepository{ctrl: ctrl}
	mock.recorder = &MockListenerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerRepository) EXPECT() *MockListenerRepositoryMockRecorder {
	return m.recorder
}

// DeleteListenerById mocks base method.
func (m *MockListenerRepository) DeleteListenerById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerById indicates an expected call of DeleteListenerById.
func (mr *MockListenerRepositoryMockRecorder) DeleteListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerById", reflect.TypeOf((*MockListenerRepository)(nil).DeleteListenerById), id)
}

// DeleteListenerByNodeGroupName mocks base method.
func (m *MockListenerRepository) DeleteListenerByNodeGroupName(nodeGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerByNodeGroupName", nodeGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerByNodeGroupName indicates an expected call of DeleteListenerByNodeGroupName.
func (mr *MockListenerRepositoryMockRecorder) DeleteListenerByNodeGroupName(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerByNodeGroupName", reflect.TypeOf((*MockListenerRepository)(nil).DeleteListenerByNodeGroupName), nodeGroupId)
}

// DeleteListenerLuaFilter mocks base method.
func (m *MockListenerRepository) DeleteListenerLuaFilter(relation *domain.ListenersLuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerLuaFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerLuaFilter indicates an expected call of DeleteListenerLuaFilter.
func (mr *MockListenerRepositoryMockRecorder) DeleteListenerLuaFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerLuaFilter", reflect.TypeOf((*MockListenerRepository)(nil).DeleteListenerLuaFilter), relation)
}

// DeleteListenerWasmFilter mocks base method.
func (m *MockListenerRepository) DeleteListenerWasmFilter(relation *domain.ListenersWasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerWasmFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListenerWasmFilter indicates an expected call of DeleteListenerWasmFilter.
func (mr *MockListenerRepositoryMockRecorder) DeleteListenerWasmFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWasmFilter", reflect.TypeOf((*MockListenerRepository)(nil).DeleteListenerWasmFilter), relation)
}

// FindAllListenerLuaFilter mocks base method.
func (m *MockListenerRepository) FindAllListenerLuaFilter() ([]*domain.ListenersLuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerLuaFilter")
	ret0, _ := ret[0].([]*domain.ListenersLuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerLuaFilter indicates an expected call of FindAllListenerLuaFilter.
func (mr *MockListenerRepositoryMockRecorder) FindAllListenerLuaFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerLuaFilter", reflect.TypeOf((*MockListenerRepository)(nil).FindAllListenerLuaFilter))
}

// FindAllListenerWasmFilter mocks base method.
func (m *MockListenerRepository) FindAllListenerWasmFilter() ([]*domain.ListenersWasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerWasmFilter")
	ret0, _ := ret[0].([]*domain.ListenersWasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerWasmFilter indicates an expected call of FindAllListenerWasmFilter.
func (mr *MockListenerRepositoryMockRecorder) FindAllListenerWasmFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerWasmFilter", reflect.TypeOf((*MockListenerRepository)(nil).FindAllListenerWasmFilter))
}

// FindAllListeners mocks base method.
func (m *MockListenerRepository) FindAllListeners() ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListeners")
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListeners indicates an expected call of FindAllListeners.
func (mr *MockListenerRepositoryMockRecorder) FindAllListeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListeners", reflect.TypeOf((*MockListenerRepository)(nil).FindAllListeners))
}

// FindListenerById mocks base method.
func (m *MockListenerRepository) FindListenerById(id int32) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerById", id)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerById indicates an expected call of FindListenerById.
func (mr *MockListenerRepositoryMockRecorder) FindListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerById", reflect.TypeOf((*MockListenerRepository)(nil).FindListenerById), id)
}

// FindListenerByNodeGroupIdAndName mocks base method.
func (m *MockListenerRepository) FindListenerByNodeGroupIdAndName(nodeGroupId, name string) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerByNodeGroupIdAndName", nodeGroupId, name)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerByNodeGroupIdAndName indicates an expected call of FindListenerByNodeGroupIdAndName.
func (mr *MockListenerRepositoryMockRecorder) FindListenerByNodeGroupIdAndName(nodeGroupId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerByNodeGroupIdAndName", reflect.TypeOf((*MockListenerRepository)(nil).FindListenerByNodeGroupIdAndName), nodeGroupId, name)
}

// FindListenerIdsByLuaFilterId mocks base method.
func (m *MockListenerRepository) FindListenerIdsByLuaFilterId(luaFilterId int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerIdsByLuaFilterId", luaFilterId)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerIdsByLuaFilterId indicates an expected call of FindListenerIdsByLuaFilterId.
func (mr *MockListenerRepositoryMockRecorder) FindListenerIdsByLuaFilterId(luaFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerIdsByLuaFilterId", reflect.TypeOf((*MockListenerRepository)(nil).FindListenerIdsByLuaFilterId), luaFilterId)
}

// FindListenerIdsByWasmFilterId mocks base method.
func (m *MockListenerRepository) FindListenerIdsByWasmFilterId(wasmFilterId int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerIdsByWasmFilterId", wasmFilterId)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerIdsByWasmFilterId indicates an expected call of FindListenerIdsByWasmFilterId.
func (mr *MockListenerRepositoryMockRecorder) FindListenerIdsByWasmFilterId(wasmFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerIdsByWasmFilterId", reflect.TypeOf((*MockListenerRepository)(nil).FindListenerIdsByWasmFilterId), wasmFilterId)
}

// FindListenersByNodeGroupId mocks base method.
func (m *MockListenerRepository) FindListenersByNodeGroupId(nodeGroupId string) ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenersByNodeGroupId", nodeGroupId)
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenersByNodeGroupId indicates an expected call of FindListenersByNodeGroupId.
func (mr *MockListenerRepositoryMockRecorder) FindListenersByNodeGroupId(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenersByNodeGroupId", reflect.TypeOf((*MockListenerRepository)(nil).FindListenersByNodeGroupId), nodeGroupId)
}

// HasLuaFilterWithId mocks base method.
func (m *MockListenerRepository) HasLuaFilterWithId(listenerId, luaFilterId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLuaFilterWithId", listenerId, luaFilterId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLuaFilterWithId indicates an expected call of HasLuaFilterWithId.
func (mr *MockListenerRepositoryMockRecorder) HasLuaFilterWithId(listenerId, luaFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLuaFilterWithId", reflect.TypeOf((*MockListenerRepository)(nil).HasLuaFilterWithId), listenerId, luaFilterId)
}

// HasWasmFilterWithId mocks base method.
func (m *MockListenerRepository) HasWasmFilterWithId(listenerId, wasmFilterId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWasmFilterWithId", listenerId, wasmFilterId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasWasmFilterWithId indicates an expected call of HasWasmFilterWithId.
func (mr *MockListenerRepositoryMockRecorder) HasWasmFilterWithId(listenerId, wasmFilterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWasmFilterWithId", reflect.TypeOf((*MockListenerRepository)(nil).HasWasmFilterWithId), listenerId, wasmFilterId)
}

// SaveListener mocks base method.
func (m *MockListenerRepository) SaveListener(listener *domain.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListener", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListener indicates an expected call of SaveListener.
func (mr *MockListenerRepositoryMockRecorder) SaveListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListener", reflect.TypeOf((*MockListenerRepository)(nil).SaveListener), listener)
}

// SaveListenerLuaFilter mocks base method.
func (m *MockListenerRepository) SaveListenerLuaFilter(relation *domain.ListenersLuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListenerLuaFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListenerLuaFilter indicates an expected call of SaveListenerLuaFilter.
func (mr *MockListenerRepositoryMockRecorder) SaveListenerLuaFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListenerLuaFilter", reflect.TypeOf((*MockListenerRepository)(nil).SaveListenerLuaFilter), relation)
}

// SaveListenerWasmFilter mocks base method.
func (m *MockListenerRepository) SaveListenerWasmFilter(relation *domain.ListenersWasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListenerWasmFilter", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListenerWasmFilter indicates an expected call of SaveListenerWasmFilter.
func (mr *MockListenerRepositoryMockRecorder) SaveListenerWasmFilter(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListenerWasmFilter", reflect.TypeOf((*MockListenerRepository)(nil).SaveListenerWasmFilter), relation)
}

// MockTlsConfigRepository is a mock of TlsConfigRepository interface.
type MockTlsConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTlsConfigRepositoryMockRecorder
}

// MockTlsConfigRepositoryMockRecorder is the mock recorder for MockTlsConfigRepository.
type MockTlsConfigRepositoryMockRecorder struct {
	mock *MockTlsConfigRepository
}

// NewMockTlsConfigRepository creates a new mock instance.
func NewMockTlsConfigRepository(ctrl *gomock.Controller) *MockTlsConfigRepository {
	mock := &MockTlsConfigRepository{ctrl: ctrl}
	mock.recorder = &MockTlsConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTlsConfigRepository) EXPECT() *MockTlsConfigRepositoryMockRecorder {
	return m.recorder
}

// DeleteTlsConfigById mocks base method.
func (m *MockTlsConfigRepository) DeleteTlsConfigById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTlsConfigById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTlsConfigById indicates an expected call of DeleteTlsConfigById.
func (mr *MockTlsConfigRepositoryMockRecorder) DeleteTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTlsConfigById", reflect.TypeOf((*MockTlsConfigRepository)(nil).DeleteTlsConfigById), id)
}

// DeleteTlsConfigByIdAndNodeGroupName mocks base method.
func (m *MockTlsConfigRepository) DeleteTlsConfigByIdAndNodeGroupName(relation *domain.TlsConfigsNodeGroups) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTlsConfigByIdAndNodeGroupName", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTlsConfigByIdAndNodeGroupName indicates an expected call of DeleteTlsConfigByIdAndNodeGroupName.
func (mr *MockTlsConfigRepositoryMockRecorder) DeleteTlsConfigByIdAndNodeGroupName(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTlsConfigByIdAndNodeGroupName", reflect.TypeOf((*MockTlsConfigRepository)(nil).DeleteTlsConfigByIdAndNodeGroupName), relation)
}

// FindAllTlsConfigs mocks base method.
func (m *MockTlsConfigRepository) FindAllTlsConfigs() ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigs")
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigs indicates an expected call of FindAllTlsConfigs.
func (mr *MockTlsConfigRepositoryMockRecorder) FindAllTlsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigs", reflect.TypeOf((*MockTlsConfigRepository)(nil).FindAllTlsConfigs))
}

// FindAllTlsConfigsByNodeGroup mocks base method.
func (m *MockTlsConfigRepository) FindAllTlsConfigsByNodeGroup(nodeGroup string) ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigsByNodeGroup", nodeGroup)
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigsByNodeGroup indicates an expected call of FindAllTlsConfigsByNodeGroup.
func (mr *MockTlsConfigRepositoryMockRecorder) FindAllTlsConfigsByNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigsByNodeGroup", reflect.TypeOf((*MockTlsConfigRepository)(nil).FindAllTlsConfigsByNodeGroup), nodeGroup)
}

// FindTlsConfigById mocks base method.
func (m *MockTlsConfigRepository) FindTlsConfigById(id int32) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigById", id)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigById indicates an expected call of FindTlsConfigById.
func (mr *MockTlsConfigRepositoryMockRecorder) FindTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigById", reflect.TypeOf((*MockTlsConfigRepository)(nil).FindTlsConfigById), id)
}

// FindTlsConfigByName mocks base method.
func (m *MockTlsConfigRepository) FindTlsConfigByName(name string) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigByName", name)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigByName indicates an expected call of FindTlsConfigByName.
func (mr *MockTlsConfigRepositoryMockRecorder) FindTlsConfigByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigByName", reflect.TypeOf((*MockTlsConfigRepository)(nil).FindTlsConfigByName), name)
}

// SaveTlsConfig mocks base method.
func (m *MockTlsConfigRepository) SaveTlsConfig(tls *domain.TlsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTlsConfig", tls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTlsConfig indicates an expected call of SaveTlsConfig.
func (mr *MockTlsConfigRepositoryMockRecorder) SaveTlsConfig(tls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTlsConfig", reflect.TypeOf((*MockTlsConfigRepository)(nil).SaveTlsConfig), tls)
}

// MockWasmFilterRepository is a mock of WasmFilterRepository interface.
type MockWasmFilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWasmFilterRepositoryMockRecorder
}

// MockWasmFilterRepositoryMockRecorder is the mock recorder for MockWasmFilterRepository.
type MockWasmFilterRepositoryMockRecorder struct {
	mock *MockWasmFilterRepository
}

// NewMockWasmFilterRepository creates a new mock instance.
func NewMockWasmFilterRepository(ctrl *gomock.Controller) *MockWasmFilterRepository {
	mock := &MockWasmFilterRepository{ctrl: ctrl}
	mock.recorder = &MockWasmFilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmFilterRepository) EXPECT() *MockWasmFilterRepositoryMockRecorder {
	return m.recorder
}

// DeleteWasmFilterById mocks base method.
func (m *MockWasmFilterRepository) DeleteWasmFilterById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmFilterById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmFilterById indicates an expected call of DeleteWasmFilterById.
func (mr *MockWasmFilterRepositoryMockRecorder) DeleteWasmFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmFilterById", reflect.TypeOf((*MockWasmFilterRepository)(nil).DeleteWasmFilterById), id)
}

// DeleteWasmFilterByName mocks base method.
func (m *MockWasmFilterRepository) DeleteWasmFilterByName(filterName string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmFilterByName", filterName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWasmFilterByName indicates an expected call of DeleteWasmFilterByName.
func (mr *MockWasmFilterRepositoryMockRecorder) DeleteWasmFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmFilterByName", reflect.TypeOf((*MockWasmFilterRepository)(nil).DeleteWasmFilterByName), filterName)
}

// FindAllWasmFilters mocks base method.
func (m *MockWasmFilterRepository) FindAllWasmFilters() ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWasmFilters")
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWasmFilters indicates an expected call of FindAllWasmFilters.
func (mr *MockWasmFilterRepositoryMockRecorder) FindAllWasmFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWasmFilters", reflect.TypeOf((*MockWasmFilterRepository)(nil).FindAllWasmFilters))
}

// FindWasmFilterByListenerId mocks base method.
func (m *MockWasmFilterRepository) FindWasmFilterByListenerId(listenerId int32) ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterByListenerId", listenerId)
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterByListenerId indicates an expected call of FindWasmFilterByListenerId.
func (mr *MockWasmFilterRepositoryMockRecorder) FindWasmFilterByListenerId(listenerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterByListenerId", reflect.TypeOf((*MockWasmFilterRepository)(nil).FindWasmFilterByListenerId), listenerId)
}

// FindWasmFilterByName mocks base method.
func (m *MockWasmFilterRepository) FindWasmFilterByName(filterName string) (*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterByName", filterName)
	ret0, _ := ret[0].(*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterByName indicates an expected call of FindWasmFilterByName.
func (mr *MockWasmFilterRepositoryMockRecorder) FindWasmFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterByName", reflect.TypeOf((*MockWasmFilterRepository)(nil).FindWasmFilterByName), filterName)
}

// SaveWasmFilter mocks base method.
func (m *MockWasmFilterRepository) SaveWasmFilter(filter *domain.WasmFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWasmFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWasmFilter indicates an expected call of SaveWasmFilter.
func (mr *MockWasmFilterRepositoryMockRecorder) SaveWasmFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWasmFilter", reflect.TypeOf((*MockWasmFilterRepository)(nil).SaveWasmFilter), filter)
}

// MockLuaFilterRepository is a mock of LuaFilterRepository interface.
type MockLuaFilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLuaFilterRepositoryMockRecorder
}

// MockLuaFilterRepositoryMockRecorder is the mock recorder for MockLuaFilterRepository.
type MockLuaFilterRepositoryMockRecorder struct {
	mock *MockLuaFilterRepository
}

// NewMockLuaFilterRepository creates a new mock instance.
func NewMockLuaFilterRepository(ctrl *gomock.Controller) *MockLuaFilterRepository {
	mock := &MockLuaFilterRepository{ctrl: ctrl}
	mock.recorder = &MockLuaFilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLuaFilterRepository) EXPECT() *MockLuaFilterRepositoryMockRecorder {
	return m.recorder
}

// DeleteLuaFilterById mocks base method.
func (m *MockLuaFilterRepository) DeleteLuaFilterById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLuaFilterById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLuaFilterById indicates an expected call of DeleteLuaFilterById.
func (mr *MockLuaFilterRepositoryMockRecorder) DeleteLuaFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLuaFilterById", reflect.TypeOf((*MockLuaFilterRepository)(nil).DeleteLuaFilterById), id)
}

// DeleteLuaFilterByName mocks base method.
func (m *MockLuaFilterRepository) DeleteLuaFilterByName(filterName string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLuaFilterByName", filterName)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLuaFilterByName indicates an expected call of DeleteLuaFilterByName.
func (mr *MockLuaFilterRepositoryMockRecorder) DeleteLuaFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLuaFilterByName", reflect.TypeOf((*MockLuaFilterRepository)(nil).DeleteLuaFilterByName), filterName)
}

// FindAllLuaFilters mocks base method.
func (m *MockLuaFilterRepository) FindAllLuaFilters() ([]*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLuaFilters")
	ret0, _ := ret[0].([]*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLuaFilters indicates an expected call of FindAllLuaFilters.
func (mr *MockLuaFilterRepositoryMockRecorder) FindAllLuaFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLuaFilters", reflect.TypeOf((*MockLuaFilterRepository)(nil).FindAllLuaFilters))
}

// FindLuaFilterByListenerId mocks base method.
func (m *MockLuaFilterRepository) FindLuaFilterByListenerId(listenerId int32) ([]*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLuaFilterByListenerId", listenerId)
	ret0, _ := ret[0].([]*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLuaFilterByListenerId indicates an expected call of FindLuaFilterByListenerId.
func (mr *MockLuaFilterRepositoryMockRecorder) FindLuaFilterByListenerId(listenerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLuaFilterByListenerId", reflect.TypeOf((*MockLuaFilterRepository)(nil).FindLuaFilterByListenerId), listenerId)
}

// FindLuaFilterByName mocks base method.
func (m *MockLuaFilterRepository) FindLuaFilterByName(filterName string) (*domain.LuaFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLuaFilterByName", filterName)
	ret0, _ := ret[0].(*domain.LuaFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLuaFilterByName indicates an expected call of FindLuaFilterByName.
func (mr *MockLuaFilterRepositoryMockRecorder) FindLuaFilterByName(filterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLuaFilterByName", reflect.TypeOf((*MockLuaFilterRepository)(nil).FindLuaFilterByName), filterName)
}

// SaveLuaFilter mocks base method.
func (m *MockLuaFilterRepository) SaveLuaFilter(filter *domain.LuaFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLuaFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLuaFilter indicates an expected call of SaveLuaFilter.
func (mr *MockLuaFilterRepositoryMockRecorder) SaveLuaFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLuaFilter", reflect.TypeOf((*MockLuaFilterRepository)(nil).SaveLuaFilter), filter)
}

// MockStatefulSessionRepository is a mock of StatefulSessionRepository interface.
type MockStatefulSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatefulSessionRepositoryMockRecorder
}

// MockStatefulSessionRepositoryMockRecorder is the mock recorder for MockStatefulSessionRepository.
type MockStatefulSessionRepositoryMockRecorder struct {
	mock *MockStatefulSessionRepository
}

// NewMockStatefulSessionRepository creates a new mock instance.
func NewMockStatefulSessionRepository(ctrl *gomock.Controller) *MockStatefulSessionRepository {
	mock := &MockStatefulSessionRepository{ctrl: ctrl}
	mock.recorder = &MockStatefulSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatefulSessionRepository) EXPECT() *MockStatefulSessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteStatefulSessionConfig mocks base method.
func (m *MockStatefulSessionRepository) DeleteStatefulSessionConfig(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatefulSessionConfig", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatefulSessionConfig indicates an expected call of DeleteStatefulSessionConfig.
func (mr *MockStatefulSessionRepositoryMockRecorder) DeleteStatefulSessionConfig(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatefulSessionConfig", reflect.TypeOf((*MockStatefulSessionRepository)(nil).DeleteStatefulSessionConfig), id)
}

// FindAllStatefulSessionConfigs mocks base method.
func (m *MockStatefulSessionRepository) FindAllStatefulSessionConfigs() ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStatefulSessionConfigs")
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStatefulSessionConfigs indicates an expected call of FindAllStatefulSessionConfigs.
func (mr *MockStatefulSessionRepositoryMockRecorder) FindAllStatefulSessionConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStatefulSessionConfigs", reflect.TypeOf((*MockStatefulSessionRepository)(nil).FindAllStatefulSessionConfigs))
}

// FindStatefulSessionConfigById mocks base method.
func (m *MockStatefulSessionRepository) FindStatefulSessionConfigById(id int32) (*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigById", id)
	ret0, _ := ret[0].(*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigById indicates an expected call of FindStatefulSessionConfigById.
func (mr *MockStatefulSessionRepositoryMockRecorder) FindStatefulSessionConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigById", reflect.TypeOf((*MockStatefulSessionRepository)(nil).FindStatefulSessionConfigById), id)
}

// FindStatefulSessionConfigsByCluster mocks base method.
func (m *MockStatefulSessionRepository) FindStatefulSessionConfigsByCluster(cluster *domain.Cluster) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByCluster", cluster)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByCluster indicates an expected call of FindStatefulSessionConfigsByCluster.
func (mr *MockStatefulSessionRepositoryMockRecorder) FindStatefulSessionConfigsByCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByCluster", reflect.TypeOf((*MockStatefulSessionRepository)(nil).FindStatefulSessionConfigsByCluster), cluster)
}

// FindStatefulSessionConfigsByClusterAndVersion mocks base method.
func (m *MockStatefulSessionRepository) FindStatefulSessionConfigsByClusterAndVersion(clusterName string, namespace msaddr.Namespace, version *domain.DeploymentVersion) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByClusterAndVersion", clusterName, namespace, version)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByClusterAndVersion indicates an expected call of FindStatefulSessionConfigsByClusterAndVersion.
func (mr *MockStatefulSessionRepositoryMockRecorder) FindStatefulSessionConfigsByClusterAndVersion(clusterName, namespace, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByClusterAndVersion", reflect.TypeOf((*MockStatefulSessionRepository)(nil).FindStatefulSessionConfigsByClusterAndVersion), clusterName, namespace, version)
}

// FindStatefulSessionConfigsByClusterName mocks base method.
func (m *MockStatefulSessionRepository) FindStatefulSessionConfigsByClusterName(clusterName string, namespace msaddr.Namespace) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByClusterName", clusterName, namespace)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByClusterName indicates an expected call of FindStatefulSessionConfigsByClusterName.
func (mr *MockStatefulSessionRepositoryMockRecorder) FindStatefulSessionConfigsByClusterName(clusterName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByClusterName", reflect.TypeOf((*MockStatefulSessionRepository)(nil).FindStatefulSessionConfigsByClusterName), clusterName, namespace)
}

// FindStatefulSessionConfigsByCookieName mocks base method.
func (m *MockStatefulSessionRepository) FindStatefulSessionConfigsByCookieName(cookieName string) ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionConfigsByCookieName", cookieName)
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionConfigsByCookieName indicates an expected call of FindStatefulSessionConfigsByCookieName.
func (mr *MockStatefulSessionRepositoryMockRecorder) FindStatefulSessionConfigsByCookieName(cookieName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionConfigsByCookieName", reflect.TypeOf((*MockStatefulSessionRepository)(nil).FindStatefulSessionConfigsByCookieName), cookieName)
}

// SaveStatefulSessionConfig mocks base method.
func (m *MockStatefulSessionRepository) SaveStatefulSessionConfig(statefulSession *domain.StatefulSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStatefulSessionConfig", statefulSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStatefulSessionConfig indicates an expected call of SaveStatefulSessionConfig.
func (mr *MockStatefulSessionRepositoryMockRecorder) SaveStatefulSessionConfig(statefulSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatefulSessionConfig", reflect.TypeOf((*MockStatefulSessionRepository)(nil).SaveStatefulSessionConfig), statefulSession)
}

// MockRouteConfigurationRepository is a mock of RouteConfigurationRepository interface.
type MockRouteConfigurationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRouteConfigurationRepositoryMockRecorder
}

// MockRouteConfigurationRepositoryMockRecorder is the mock recorder for MockRouteConfigurationRepository.
type MockRouteConfigurationRepositoryMockRecorder struct {
	mock *MockRouteConfigurationRepository
}

// NewMockRouteConfigurationRepository creates a new mock instance.
func NewMockRouteConfigurationRepository(ctrl *gomock.Controller) *MockRouteConfigurationRepository {
	mock := &MockRouteConfigurationRepository{ctrl: ctrl}
	mock.recorder = &MockRouteConfigurationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteConfigurationRepository) EXPECT() *MockRouteConfigurationRepositoryMockRecorder {
	return m.recorder
}

// DeleteRouteConfigById mocks base method.
func (m *MockRouteConfigurationRepository) DeleteRouteConfigById(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteConfigById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteConfigById indicates an expected call of DeleteRouteConfigById.
func (mr *MockRouteConfigurationRepositoryMockRecorder) DeleteRouteConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteConfigById", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).DeleteRouteConfigById), id)
}

// FindAllRouteConfigs mocks base method.
func (m *MockRouteConfigurationRepository) FindAllRouteConfigs() ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRouteConfigs")
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRouteConfigs indicates an expected call of FindAllRouteConfigs.
func (mr *MockRouteConfigurationRepositoryMockRecorder) FindAllRouteConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRouteConfigs", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).FindAllRouteConfigs))
}

// FindRouteConfigById mocks base method.
func (m *MockRouteConfigurationRepository) FindRouteConfigById(routeConfigurationId int32) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigById", routeConfigurationId)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigById indicates an expected call of FindRouteConfigById.
func (mr *MockRouteConfigurationRepositoryMockRecorder) FindRouteConfigById(routeConfigurationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigById", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).FindRouteConfigById), routeConfigurationId)
}

// FindRouteConfigByNodeGroupIdAndName mocks base method.
func (m *MockRouteConfigurationRepository) FindRouteConfigByNodeGroupIdAndName(nodeGroupId, name string) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigByNodeGroupIdAndName", nodeGroupId, name)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigByNodeGroupIdAndName indicates an expected call of FindRouteConfigByNodeGroupIdAndName.
func (mr *MockRouteConfigurationRepositoryMockRecorder) FindRouteConfigByNodeGroupIdAndName(nodeGroupId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigByNodeGroupIdAndName", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).FindRouteConfigByNodeGroupIdAndName), nodeGroupId, name)
}

// FindRouteConfigsByEndpoint mocks base method.
func (m *MockRouteConfigurationRepository) FindRouteConfigsByEndpoint(endpoint *domain.Endpoint) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByEndpoint", endpoint)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByEndpoint indicates an expected call of FindRouteConfigsByEndpoint.
func (mr *MockRouteConfigurationRepositoryMockRecorder) FindRouteConfigsByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByEndpoint", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).FindRouteConfigsByEndpoint), endpoint)
}

// FindRouteConfigsByNodeGroupId mocks base method.
func (m *MockRouteConfigurationRepository) FindRouteConfigsByNodeGroupId(nodeGroupId string) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByNodeGroupId", nodeGroupId)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByNodeGroupId indicates an expected call of FindRouteConfigsByNodeGroupId.
func (mr *MockRouteConfigurationRepositoryMockRecorder) FindRouteConfigsByNodeGroupId(nodeGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByNodeGroupId", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).FindRouteConfigsByNodeGroupId), nodeGroupId)
}

// FindRouteConfigsByRouteDeploymentVersion mocks base method.
func (m *MockRouteConfigurationRepository) FindRouteConfigsByRouteDeploymentVersion(deploymentVersion string) ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigsByRouteDeploymentVersion", deploymentVersion)
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigsByRouteDeploymentVersion indicates an expected call of FindRouteConfigsByRouteDeploymentVersion.
func (mr *MockRouteConfigurationRepositoryMockRecorder) FindRouteConfigsByRouteDeploymentVersion(deploymentVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigsByRouteDeploymentVersion", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).FindRouteConfigsByRouteDeploymentVersion), deploymentVersion)
}

// SaveRouteConfig mocks base method.
func (m *MockRouteConfigurationRepository) SaveRouteConfig(routeConfig *domain.RouteConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRouteConfig", routeConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRouteConfig indicates an expected call of SaveRouteConfig.
func (mr *MockRouteConfigurationRepositoryMockRecorder) SaveRouteConfig(routeConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRouteConfig", reflect.TypeOf((*MockRouteConfigurationRepository)(nil).SaveRouteConfig), routeConfig)
}

// MockNodeGroupRepository is a mock of NodeGroupRepository interface.
type MockNodeGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodeGroupRepositoryMockRecorder
}

// MockNodeGroupRepositoryMockRecorder is the mock recorder for MockNodeGroupRepository.
type MockNodeGroupRepositoryMockRecorder struct {
	mock *MockNodeGroupRepository
}

// NewMockNodeGroupRepository creates a new mock instance.
func NewMockNodeGroupRepository(ctrl *gomock.Controller) *MockNodeGroupRepository {
	mock := &MockNodeGroupRepository{ctrl: ctrl}
	mock.recorder = &MockNodeGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeGroupRepository) EXPECT() *MockNodeGroupRepositoryMockRecorder {
	return m.recorder
}

// DeleteClustersNodeGroup mocks base method.
func (m *MockNodeGroupRepository) DeleteClustersNodeGroup(relation *domain.ClustersNodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClustersNodeGroup", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClustersNodeGroup indicates an expected call of DeleteClustersNodeGroup.
func (mr *MockNodeGroupRepositoryMockRecorder) DeleteClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClustersNodeGroup", reflect.TypeOf((*MockNodeGroupRepository)(nil).DeleteClustersNodeGroup), relation)
}

// DeleteClustersNodeGroupByClusterId mocks base method.
func (m *MockNodeGroupRepository) DeleteClustersNodeGroupByClusterId(clusterId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClustersNodeGroupByClusterId", clusterId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClustersNodeGroupByClusterId indicates an expected call of DeleteClustersNodeGroupByClusterId.
func (mr *MockNodeGroupRepositoryMockRecorder) DeleteClustersNodeGroupByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClustersNodeGroupByClusterId", reflect.TypeOf((*MockNodeGroupRepository)(nil).DeleteClustersNodeGroupByClusterId), clusterId)
}

// DeleteNodeGroupByName mocks base method.
func (m *MockNodeGroupRepository) DeleteNodeGroupByName(nodeGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeGroupByName", nodeGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeGroupByName indicates an expected call of DeleteNodeGroupByName.
func (mr *MockNodeGroupRepositoryMockRecorder) DeleteNodeGroupByName(nodeGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeGroupByName", reflect.TypeOf((*MockNodeGroupRepository)(nil).DeleteNodeGroupByName), nodeGroupName)
}

// FindAllClusterWithNodeGroup mocks base method.
func (m *MockNodeGroupRepository) FindAllClusterWithNodeGroup() ([]*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusterWithNodeGroup")
	ret0, _ := ret[0].([]*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusterWithNodeGroup indicates an expected call of FindAllClusterWithNodeGroup.
func (mr *MockNodeGroupRepositoryMockRecorder) FindAllClusterWithNodeGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusterWithNodeGroup", reflect.TypeOf((*MockNodeGroupRepository)(nil).FindAllClusterWithNodeGroup))
}

// FindAllNodeGroups mocks base method.
func (m *MockNodeGroupRepository) FindAllNodeGroups() ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNodeGroups")
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNodeGroups indicates an expected call of FindAllNodeGroups.
func (mr *MockNodeGroupRepositoryMockRecorder) FindAllNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNodeGroups", reflect.TypeOf((*MockNodeGroupRepository)(nil).FindAllNodeGroups))
}

// FindClustersNodeGroup mocks base method.
func (m *MockNodeGroupRepository) FindClustersNodeGroup(relation *domain.ClustersNodeGroup) (*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersNodeGroup", relation)
	ret0, _ := ret[0].(*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersNodeGroup indicates an expected call of FindClustersNodeGroup.
func (mr *MockNodeGroupRepositoryMockRecorder) FindClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersNodeGroup", reflect.TypeOf((*MockNodeGroupRepository)(nil).FindClustersNodeGroup), relation)
}

// FindNodeGroupByName mocks base method.
func (m *MockNodeGroupRepository) FindNodeGroupByName(name string) (*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupByName", name)
	ret0, _ := ret[0].(*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupByName indicates an expected call of FindNodeGroupByName.
func (mr *MockNodeGroupRepositoryMockRecorder) FindNodeGroupByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupByName", reflect.TypeOf((*MockNodeGroupRepository)(nil).FindNodeGroupByName), name)
}

// FindNodeGroupsByCluster mocks base method.
func (m *MockNodeGroupRepository) FindNodeGroupsByCluster(cluster *domain.Cluster) ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupsByCluster", cluster)
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupsByCluster indicates an expected call of FindNodeGroupsByCluster.
func (mr *MockNodeGroupRepositoryMockRecorder) FindNodeGroupsByCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupsByCluster", reflect.TypeOf((*MockNodeGroupRepository)(nil).FindNodeGroupsByCluster), cluster)
}

// SaveClustersNodeGroup mocks base method.
func (m *MockNodeGroupRepository) SaveClustersNodeGroup(relation *domain.ClustersNodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClustersNodeGroup", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClustersNodeGroup indicates an expected call of SaveClustersNodeGroup.
func (mr *MockNodeGroupRepositoryMockRecorder) SaveClustersNodeGroup(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClustersNodeGroup", reflect.TypeOf((*MockNodeGroupRepository)(nil).SaveClustersNodeGroup), relation)
}

// SaveNodeGroup mocks base method.
func (m *MockNodeGroupRepository) SaveNodeGroup(nodeGroup *domain.NodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNodeGroup", nodeGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNodeGroup indicates an expected call of SaveNodeGroup.
func (mr *MockNodeGroupRepositoryMockRecorder) SaveNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNodeGroup", reflect.TypeOf((*MockNodeGroupRepository)(nil).SaveNodeGroup), nodeGroup)
}

// MockVirtualHostRepository is a mock of VirtualHostRepository interface.
type MockVirtualHostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostRepositoryMockRecorder
}

// MockVirtualHostRepositoryMockRecorder is the mock recorder for MockVirtualHostRepository.
type MockVirtualHostRepositoryMockRecorder struct {
	mock *MockVirtualHostRepository
}

// NewMockVirtualHostRepository creates a new mock instance.
func NewMockVirtualHostRepository(ctrl *gomock.Controller) *MockVirtualHostRepository {
	mock := &MockVirtualHostRepository{ctrl: ctrl}
	mock.recorder = &MockVirtualHostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostRepository) EXPECT() *MockVirtualHostRepositoryMockRecorder {
	return m.recorder
}

// DeleteVirtualHost mocks base method.
func (m *MockVirtualHostRepository) DeleteVirtualHost(host *domain.VirtualHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualHost", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHost indicates an expected call of DeleteVirtualHost.
func (mr *MockVirtualHostRepositoryMockRecorder) DeleteVirtualHost(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHost", reflect.TypeOf((*MockVirtualHostRepository)(nil).DeleteVirtualHost), host)
}

// DeleteVirtualHostsDomain mocks base method.
func (m *MockVirtualHostRepository) DeleteVirtualHostsDomain(virtualHostDomain *domain.VirtualHostDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualHostsDomain", virtualHostDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHostsDomain indicates an expected call of DeleteVirtualHostsDomain.
func (mr *MockVirtualHostRepositoryMockRecorder) DeleteVirtualHostsDomain(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHostsDomain", reflect.TypeOf((*MockVirtualHostRepository)(nil).DeleteVirtualHostsDomain), virtualHostDomain)
}

// FindAllVirtualHosts mocks base method.
func (m *MockVirtualHostRepository) FindAllVirtualHosts() ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHosts")
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHosts indicates an expected call of FindAllVirtualHosts.
func (mr *MockVirtualHostRepositoryMockRecorder) FindAllVirtualHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHosts", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindAllVirtualHosts))
}

// FindAllVirtualHostsDomain mocks base method.
func (m *MockVirtualHostRepository) FindAllVirtualHostsDomain() ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHostsDomain")
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHostsDomain indicates an expected call of FindAllVirtualHostsDomain.
func (mr *MockVirtualHostRepositoryMockRecorder) FindAllVirtualHostsDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHostsDomain", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindAllVirtualHostsDomain))
}

// FindFirstVirtualHostByNameAndRouteConfigurationId mocks base method.
func (m *MockVirtualHostRepository) FindFirstVirtualHostByNameAndRouteConfigurationId(name string, id int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstVirtualHostByNameAndRouteConfigurationId", name, id)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstVirtualHostByNameAndRouteConfigurationId indicates an expected call of FindFirstVirtualHostByNameAndRouteConfigurationId.
func (mr *MockVirtualHostRepositoryMockRecorder) FindFirstVirtualHostByNameAndRouteConfigurationId(name, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstVirtualHostByNameAndRouteConfigurationId", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindFirstVirtualHostByNameAndRouteConfigurationId), name, id)
}

// FindFirstVirtualHostByRouteConfigurationId mocks base method.
func (m *MockVirtualHostRepository) FindFirstVirtualHostByRouteConfigurationId(routeConfigId int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstVirtualHostByRouteConfigurationId", routeConfigId)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstVirtualHostByRouteConfigurationId indicates an expected call of FindFirstVirtualHostByRouteConfigurationId.
func (mr *MockVirtualHostRepositoryMockRecorder) FindFirstVirtualHostByRouteConfigurationId(routeConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstVirtualHostByRouteConfigurationId", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindFirstVirtualHostByRouteConfigurationId), routeConfigId)
}

// FindVirtualHostById mocks base method.
func (m *MockVirtualHostRepository) FindVirtualHostById(virtualHostId int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostById", virtualHostId)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostById indicates an expected call of FindVirtualHostById.
func (mr *MockVirtualHostRepositoryMockRecorder) FindVirtualHostById(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostById", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindVirtualHostById), virtualHostId)
}

// FindVirtualHostDomainByVirtualHostId mocks base method.
func (m *MockVirtualHostRepository) FindVirtualHostDomainByVirtualHostId(virtualHostId int32) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostDomainByVirtualHostId", virtualHostId)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostDomainByVirtualHostId indicates an expected call of FindVirtualHostDomainByVirtualHostId.
func (mr *MockVirtualHostRepositoryMockRecorder) FindVirtualHostDomainByVirtualHostId(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostDomainByVirtualHostId", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindVirtualHostDomainByVirtualHostId), virtualHostId)
}

// FindVirtualHostDomainsByHost mocks base method.
func (m *MockVirtualHostRepository) FindVirtualHostDomainsByHost(virtualHostDomain string) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostDomainsByHost", virtualHostDomain)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostDomainsByHost indicates an expected call of FindVirtualHostDomainsByHost.
func (mr *MockVirtualHostRepositoryMockRecorder) FindVirtualHostDomainsByHost(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostDomainsByHost", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindVirtualHostDomainsByHost), virtualHostDomain)
}

// FindVirtualHostsByRouteConfigurationId mocks base method.
func (m *MockVirtualHostRepository) FindVirtualHostsByRouteConfigurationId(routeConfigId int32) ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostsByRouteConfigurationId", routeConfigId)
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostsByRouteConfigurationId indicates an expected call of FindVirtualHostsByRouteConfigurationId.
func (mr *MockVirtualHostRepositoryMockRecorder) FindVirtualHostsByRouteConfigurationId(routeConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostsByRouteConfigurationId", reflect.TypeOf((*MockVirtualHostRepository)(nil).FindVirtualHostsByRouteConfigurationId), routeConfigId)
}

// SaveVirtualHost mocks base method.
func (m *MockVirtualHostRepository) SaveVirtualHost(virtualHost *domain.VirtualHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualHost", virtualHost)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualHost indicates an expected call of SaveVirtualHost.
func (mr *MockVirtualHostRepositoryMockRecorder) SaveVirtualHost(virtualHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualHost", reflect.TypeOf((*MockVirtualHostRepository)(nil).SaveVirtualHost), virtualHost)
}

// SaveVirtualHostDomain mocks base method.
func (m *MockVirtualHostRepository) SaveVirtualHostDomain(virtualHostDomain *domain.VirtualHostDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualHostDomain", virtualHostDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualHostDomain indicates an expected call of SaveVirtualHostDomain.
func (mr *MockVirtualHostRepositoryMockRecorder) SaveVirtualHostDomain(virtualHostDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualHostDomain", reflect.TypeOf((*MockVirtualHostRepository)(nil).SaveVirtualHostDomain), virtualHostDomain)
}

// MockRouteRepository is a mock of RouteRepository interface.
type MockRouteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRouteRepositoryMockRecorder
}

// MockRouteRepositoryMockRecorder is the mock recorder for MockRouteRepository.
type MockRouteRepositoryMockRecorder struct {
	mock *MockRouteRepository
}

// NewMockRouteRepository creates a new mock instance.
func NewMockRouteRepository(ctrl *gomock.Controller) *MockRouteRepository {
	mock := &MockRouteRepository{ctrl: ctrl}
	mock.recorder = &MockRouteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteRepository) EXPECT() *MockRouteRepositoryMockRecorder {
	return m.recorder
}

// DeleteHeaderMatcher mocks base method.
func (m *MockRouteRepository) DeleteHeaderMatcher(headerMatcher *domain.HeaderMatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatcher", headerMatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderMatcher indicates an expected call of DeleteHeaderMatcher.
func (mr *MockRouteRepositoryMockRecorder) DeleteHeaderMatcher(headerMatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatcher", reflect.TypeOf((*MockRouteRepository)(nil).DeleteHeaderMatcher), headerMatcher)
}

// DeleteHeaderMatcherById mocks base method.
func (m *MockRouteRepository) DeleteHeaderMatcherById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatcherById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderMatcherById indicates an expected call of DeleteHeaderMatcherById.
func (mr *MockRouteRepositoryMockRecorder) DeleteHeaderMatcherById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatcherById", reflect.TypeOf((*MockRouteRepository)(nil).DeleteHeaderMatcherById), Id)
}

// DeleteHeaderMatchersByRouteId mocks base method.
func (m *MockRouteRepository) DeleteHeaderMatchersByRouteId(routeId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeaderMatchersByRouteId", routeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHeaderMatchersByRouteId indicates an expected call of DeleteHeaderMatchersByRouteId.
func (mr *MockRouteRepositoryMockRecorder) DeleteHeaderMatchersByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderMatchersByRouteId", reflect.TypeOf((*MockRouteRepository)(nil).DeleteHeaderMatchersByRouteId), routeId)
}

// DeleteRouteById mocks base method.
func (m *MockRouteRepository) DeleteRouteById(routeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteById", routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteById indicates an expected call of DeleteRouteById.
func (mr *MockRouteRepositoryMockRecorder) DeleteRouteById(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteById", reflect.TypeOf((*MockRouteRepository)(nil).DeleteRouteById), routeId)
}

// DeleteRouteByUUID mocks base method.
func (m *MockRouteRepository) DeleteRouteByUUID(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteByUUID", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteByUUID indicates an expected call of DeleteRouteByUUID.
func (mr *MockRouteRepositoryMockRecorder) DeleteRouteByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteByUUID", reflect.TypeOf((*MockRouteRepository)(nil).DeleteRouteByUUID), uuid)
}

// DeleteRoutesByAutoGeneratedAndDeploymentVersion mocks base method.
func (m *MockRouteRepository) DeleteRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated bool, dVersion string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutesByAutoGeneratedAndDeploymentVersion", autoGenerated, dVersion)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutesByAutoGeneratedAndDeploymentVersion indicates an expected call of DeleteRoutesByAutoGeneratedAndDeploymentVersion.
func (mr *MockRouteRepositoryMockRecorder) DeleteRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutesByAutoGeneratedAndDeploymentVersion", reflect.TypeOf((*MockRouteRepository)(nil).DeleteRoutesByAutoGeneratedAndDeploymentVersion), autoGenerated, dVersion)
}

// FindAllRoutes mocks base method.
func (m *MockRouteRepository) FindAllRoutes() ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRoutes")
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRoutes indicates an expected call of FindAllRoutes.
func (mr *MockRouteRepositoryMockRecorder) FindAllRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRoutes", reflect.TypeOf((*MockRouteRepository)(nil).FindAllRoutes))
}

// FindHeaderMatcherByRouteId mocks base method.
func (m *MockRouteRepository) FindHeaderMatcherByRouteId(routeId int32) ([]*domain.HeaderMatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHeaderMatcherByRouteId", routeId)
	ret0, _ := ret[0].([]*domain.HeaderMatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHeaderMatcherByRouteId indicates an expected call of FindHeaderMatcherByRouteId.
func (mr *MockRouteRepositoryMockRecorder) FindHeaderMatcherByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHeaderMatcherByRouteId", reflect.TypeOf((*MockRouteRepository)(nil).FindHeaderMatcherByRouteId), routeId)
}

// FindRouteById mocks base method.
func (m *MockRouteRepository) FindRouteById(routeId int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteById", routeId)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteById indicates an expected call of FindRouteById.
func (mr *MockRouteRepositoryMockRecorder) FindRouteById(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteById", reflect.TypeOf((*MockRouteRepository)(nil).FindRouteById), routeId)
}

// FindRouteByStatefulSession mocks base method.
func (m *MockRouteRepository) FindRouteByStatefulSession(statefulSessionId int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteByStatefulSession", statefulSessionId)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteByStatefulSession indicates an expected call of FindRouteByStatefulSession.
func (mr *MockRouteRepositoryMockRecorder) FindRouteByStatefulSession(statefulSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteByStatefulSession", reflect.TypeOf((*MockRouteRepository)(nil).FindRouteByStatefulSession), statefulSessionId)
}

// FindRouteByUuid mocks base method.
func (m *MockRouteRepository) FindRouteByUuid(uuid string) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteByUuid", uuid)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteByUuid indicates an expected call of FindRouteByUuid.
func (mr *MockRouteRepositoryMockRecorder) FindRouteByUuid(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteByUuid", reflect.TypeOf((*MockRouteRepository)(nil).FindRouteByUuid), uuid)
}

// FindRoutesByAutoGeneratedAndDeploymentVersion mocks base method.
func (m *MockRouteRepository) FindRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated bool, dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByAutoGeneratedAndDeploymentVersion", autoGenerated, dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByAutoGeneratedAndDeploymentVersion indicates an expected call of FindRoutesByAutoGeneratedAndDeploymentVersion.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByAutoGeneratedAndDeploymentVersion(autoGenerated, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByAutoGeneratedAndDeploymentVersion", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByAutoGeneratedAndDeploymentVersion), autoGenerated, dVersion)
}

// FindRoutesByClusterName mocks base method.
func (m *MockRouteRepository) FindRoutesByClusterName(clusterName string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterName", clusterName)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterName indicates an expected call of FindRoutesByClusterName.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByClusterName(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterName", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByClusterName), clusterName)
}

// FindRoutesByClusterNameAndDeploymentVersion mocks base method.
func (m *MockRouteRepository) FindRoutesByClusterNameAndDeploymentVersion(clusterName, dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterNameAndDeploymentVersion", clusterName, dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterNameAndDeploymentVersion indicates an expected call of FindRoutesByClusterNameAndDeploymentVersion.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByClusterNameAndDeploymentVersion(clusterName, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterNameAndDeploymentVersion", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByClusterNameAndDeploymentVersion), clusterName, dVersion)
}

// FindRoutesByClusterNamePrefix mocks base method.
func (m *MockRouteRepository) FindRoutesByClusterNamePrefix(clusterNamePrefix string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByClusterNamePrefix", clusterNamePrefix)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByClusterNamePrefix indicates an expected call of FindRoutesByClusterNamePrefix.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByClusterNamePrefix(clusterNamePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByClusterNamePrefix", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByClusterNamePrefix), clusterNamePrefix)
}

// FindRoutesByDeploymentVersion mocks base method.
func (m *MockRouteRepository) FindRoutesByDeploymentVersion(dVersion string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersion", dVersion)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersion indicates an expected call of FindRoutesByDeploymentVersion.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersion", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByDeploymentVersion), dVersion)
}

// FindRoutesByDeploymentVersionAndRouteKey mocks base method.
func (m *MockRouteRepository) FindRoutesByDeploymentVersionAndRouteKey(deploymentVersion, routeKey string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionAndRouteKey", deploymentVersion, routeKey)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionAndRouteKey indicates an expected call of FindRoutesByDeploymentVersionAndRouteKey.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByDeploymentVersionAndRouteKey(deploymentVersion, routeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionAndRouteKey", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByDeploymentVersionAndRouteKey), deploymentVersion, routeKey)
}

// FindRoutesByDeploymentVersionIn mocks base method.
func (m *MockRouteRepository) FindRoutesByDeploymentVersionIn(dVersions ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionIn", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionIn indicates an expected call of FindRoutesByDeploymentVersionIn.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByDeploymentVersionIn(dVersions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionIn", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByDeploymentVersionIn), dVersions...)
}

// FindRoutesByDeploymentVersionStageIn mocks base method.
func (m *MockRouteRepository) FindRoutesByDeploymentVersionStageIn(dVersionStage ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersionStage {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersionStageIn", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersionStageIn indicates an expected call of FindRoutesByDeploymentVersionStageIn.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByDeploymentVersionStageIn(dVersionStage ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersionStageIn", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByDeploymentVersionStageIn), dVersionStage...)
}

// FindRoutesByDeploymentVersions mocks base method.
func (m *MockRouteRepository) FindRoutesByDeploymentVersions(dVersions ...*domain.DeploymentVersion) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dVersions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoutesByDeploymentVersions", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByDeploymentVersions indicates an expected call of FindRoutesByDeploymentVersions.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByDeploymentVersions(dVersions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByDeploymentVersions", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByDeploymentVersions), dVersions...)
}

// FindRoutesByNamespaceHeaderIsNot mocks base method.
func (m *MockRouteRepository) FindRoutesByNamespaceHeaderIsNot(headerName string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByNamespaceHeaderIsNot", headerName)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByNamespaceHeaderIsNot indicates an expected call of FindRoutesByNamespaceHeaderIsNot.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByNamespaceHeaderIsNot(headerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByNamespaceHeaderIsNot", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByNamespaceHeaderIsNot), headerName)
}

// FindRoutesByRateLimit mocks base method.
func (m *MockRouteRepository) FindRoutesByRateLimit(rateLimitId string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByRateLimit", rateLimitId)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByRateLimit indicates an expected call of FindRoutesByRateLimit.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByRateLimit(rateLimitId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByRateLimit", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByRateLimit), rateLimitId)
}

// FindRoutesByUUIDPrefix mocks base method.
func (m *MockRouteRepository) FindRoutesByUUIDPrefix(prefixUuid string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByUUIDPrefix", prefixUuid)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByUUIDPrefix indicates an expected call of FindRoutesByUUIDPrefix.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByUUIDPrefix(prefixUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByUUIDPrefix", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByUUIDPrefix), prefixUuid)
}

// FindRoutesByVirtualHostId mocks base method.
func (m *MockRouteRepository) FindRoutesByVirtualHostId(virtualHostId int32) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostId", virtualHostId)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostId indicates an expected call of FindRoutesByVirtualHostId.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByVirtualHostId(virtualHostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostId", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByVirtualHostId), virtualHostId)
}

// FindRoutesByVirtualHostIdAndDeploymentVersion mocks base method.
func (m *MockRouteRepository) FindRoutesByVirtualHostIdAndDeploymentVersion(virtualHostId int32, version string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostIdAndDeploymentVersion", virtualHostId, version)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostIdAndDeploymentVersion indicates an expected call of FindRoutesByVirtualHostIdAndDeploymentVersion.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByVirtualHostIdAndDeploymentVersion(virtualHostId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostIdAndDeploymentVersion", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByVirtualHostIdAndDeploymentVersion), virtualHostId, version)
}

// FindRoutesByVirtualHostIdAndRouteKey mocks base method.
func (m *MockRouteRepository) FindRoutesByVirtualHostIdAndRouteKey(vHostId int32, routeKey string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoutesByVirtualHostIdAndRouteKey", vHostId, routeKey)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoutesByVirtualHostIdAndRouteKey indicates an expected call of FindRoutesByVirtualHostIdAndRouteKey.
func (mr *MockRouteRepositoryMockRecorder) FindRoutesByVirtualHostIdAndRouteKey(vHostId, routeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoutesByVirtualHostIdAndRouteKey", reflect.TypeOf((*MockRouteRepository)(nil).FindRoutesByVirtualHostIdAndRouteKey), vHostId, routeKey)
}

// SaveHeaderMatcher mocks base method.
func (m *MockRouteRepository) SaveHeaderMatcher(headerMatcher *domain.HeaderMatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHeaderMatcher", headerMatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHeaderMatcher indicates an expected call of SaveHeaderMatcher.
func (mr *MockRouteRepositoryMockRecorder) SaveHeaderMatcher(headerMatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHeaderMatcher", reflect.TypeOf((*MockRouteRepository)(nil).SaveHeaderMatcher), headerMatcher)
}

// SaveRoute mocks base method.
func (m *MockRouteRepository) SaveRoute(route *domain.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoute indicates an expected call of SaveRoute.
func (mr *MockRouteRepositoryMockRecorder) SaveRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoute", reflect.TypeOf((*MockRouteRepository)(nil).SaveRoute), route)
}

// MockDeploymentVersionRepository is a mock of DeploymentVersionRepository interface.
type MockDeploymentVersionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentVersionRepositoryMockRecorder
}

// MockDeploymentVersionRepositoryMockRecorder is the mock recorder for MockDeploymentVersionRepository.
type MockDeploymentVersionRepositoryMockRecorder struct {
	mock *MockDeploymentVersionRepository
}

// NewMockDeploymentVersionRepository creates a new mock instance.
func NewMockDeploymentVersionRepository(ctrl *gomock.Controller) *MockDeploymentVersionRepository {
	mock := &MockDeploymentVersionRepository{ctrl: ctrl}
	mock.recorder = &MockDeploymentVersionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentVersionRepository) EXPECT() *MockDeploymentVersionRepositoryMockRecorder {
	return m.recorder
}

// DeleteDeploymentVersion mocks base method.
func (m *MockDeploymentVersionRepository) DeleteDeploymentVersion(dVersion *domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentVersion", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentVersion indicates an expected call of DeleteDeploymentVersion.
func (mr *MockDeploymentVersionRepositoryMockRecorder) DeleteDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentVersion", reflect.TypeOf((*MockDeploymentVersionRepository)(nil).DeleteDeploymentVersion), dVersion)
}

// DeleteDeploymentVersions mocks base method.
func (m *MockDeploymentVersionRepository) DeleteDeploymentVersions(dVersion []*domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentVersions", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentVersions indicates an expected call of DeleteDeploymentVersions.
func (mr *MockDeploymentVersionRepositoryMockRecorder) DeleteDeploymentVersions(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentVersions", reflect.TypeOf((*MockDeploymentVersionRepository)(nil).DeleteDeploymentVersions), dVersion)
}

// FindAllDeploymentVersions mocks base method.
func (m *MockDeploymentVersionRepository) FindAllDeploymentVersions() ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDeploymentVersions")
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDeploymentVersions indicates an expected call of FindAllDeploymentVersions.
func (mr *MockDeploymentVersionRepositoryMockRecorder) FindAllDeploymentVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDeploymentVersions", reflect.TypeOf((*MockDeploymentVersionRepository)(nil).FindAllDeploymentVersions))
}

// FindDeploymentVersion mocks base method.
func (m *MockDeploymentVersionRepository) FindDeploymentVersion(version string) (*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersion", version)
	ret0, _ := ret[0].(*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersion indicates an expected call of FindDeploymentVersion.
func (mr *MockDeploymentVersionRepositoryMockRecorder) FindDeploymentVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersion", reflect.TypeOf((*MockDeploymentVersionRepository)(nil).FindDeploymentVersion), version)
}

// FindDeploymentVersionsByStage mocks base method.
func (m *MockDeploymentVersionRepository) FindDeploymentVersionsByStage(stage string) ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersionsByStage", stage)
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersionsByStage indicates an expected call of FindDeploymentVersionsByStage.
func (mr *MockDeploymentVersionRepositoryMockRecorder) FindDeploymentVersionsByStage(stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersionsByStage", reflect.TypeOf((*MockDeploymentVersionRepository)(nil).FindDeploymentVersionsByStage), stage)
}

// SaveDeploymentVersion mocks base method.
func (m *MockDeploymentVersionRepository) SaveDeploymentVersion(dVersion *domain.DeploymentVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDeploymentVersion", dVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDeploymentVersion indicates an expected call of SaveDeploymentVersion.
func (mr *MockDeploymentVersionRepositoryMockRecorder) SaveDeploymentVersion(dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeploymentVersion", reflect.TypeOf((*MockDeploymentVersionRepository)(nil).SaveDeploymentVersion), dVersion)
}

// MockEndpointRepository is a mock of EndpointRepository interface.
type MockEndpointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointRepositoryMockRecorder
}

// MockEndpointRepositoryMockRecorder is the mock recorder for MockEndpointRepository.
type MockEndpointRepositoryMockRecorder struct {
	mock *MockEndpointRepository
}

// NewMockEndpointRepository creates a new mock instance.
func NewMockEndpointRepository(ctrl *gomock.Controller) *MockEndpointRepository {
	mock := &MockEndpointRepository{ctrl: ctrl}
	mock.recorder = &MockEndpointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointRepository) EXPECT() *MockEndpointRepositoryMockRecorder {
	return m.recorder
}

// DeleteEndpoint mocks base method.
func (m *MockEndpointRepository) DeleteEndpoint(endpoint *domain.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockEndpointRepositoryMockRecorder) DeleteEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockEndpointRepository)(nil).DeleteEndpoint), endpoint)
}

// FindAllEndpoints mocks base method.
func (m *MockEndpointRepository) FindAllEndpoints() ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEndpoints")
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEndpoints indicates an expected call of FindAllEndpoints.
func (mr *MockEndpointRepositoryMockRecorder) FindAllEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEndpoints", reflect.TypeOf((*MockEndpointRepository)(nil).FindAllEndpoints))
}

// FindEndpointById mocks base method.
func (m *MockEndpointRepository) FindEndpointById(endpointId int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointById", endpointId)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointById indicates an expected call of FindEndpointById.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointById(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointById", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointById), endpointId)
}

// FindEndpointByStatefulSession mocks base method.
func (m *MockEndpointRepository) FindEndpointByStatefulSession(statefulSessionId int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointByStatefulSession", statefulSessionId)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointByStatefulSession indicates an expected call of FindEndpointByStatefulSession.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointByStatefulSession(statefulSessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointByStatefulSession", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointByStatefulSession), statefulSessionId)
}

// FindEndpointsByAddressAndPortAndDeploymentVersion mocks base method.
func (m *MockEndpointRepository) FindEndpointsByAddressAndPortAndDeploymentVersion(address string, port int32, dVersion string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByAddressAndPortAndDeploymentVersion", address, port, dVersion)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByAddressAndPortAndDeploymentVersion indicates an expected call of FindEndpointsByAddressAndPortAndDeploymentVersion.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByAddressAndPortAndDeploymentVersion(address, port, dVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByAddressAndPortAndDeploymentVersion", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByAddressAndPortAndDeploymentVersion), address, port, dVersion)
}

// FindEndpointsByClusterId mocks base method.
func (m *MockEndpointRepository) FindEndpointsByClusterId(clusterId int32) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterId", clusterId)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterId indicates an expected call of FindEndpointsByClusterId.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterId", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByClusterId), clusterId)
}

// FindEndpointsByClusterIdAndDeploymentVersion mocks base method.
func (m *MockEndpointRepository) FindEndpointsByClusterIdAndDeploymentVersion(clusterId int32, dVersions *domain.DeploymentVersion) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterIdAndDeploymentVersion", clusterId, dVersions)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterIdAndDeploymentVersion indicates an expected call of FindEndpointsByClusterIdAndDeploymentVersion.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByClusterIdAndDeploymentVersion(clusterId, dVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterIdAndDeploymentVersion", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByClusterIdAndDeploymentVersion), clusterId, dVersions)
}

// FindEndpointsByClusterName mocks base method.
func (m *MockEndpointRepository) FindEndpointsByClusterName(clusterName string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByClusterName", clusterName)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByClusterName indicates an expected call of FindEndpointsByClusterName.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByClusterName(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByClusterName", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByClusterName), clusterName)
}

// FindEndpointsByDeploymentVersion mocks base method.
func (m *MockEndpointRepository) FindEndpointsByDeploymentVersion(version string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByDeploymentVersion", version)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByDeploymentVersion indicates an expected call of FindEndpointsByDeploymentVersion.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByDeploymentVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByDeploymentVersion", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByDeploymentVersion), version)
}

// FindEndpointsByDeploymentVersionsIn mocks base method.
func (m *MockEndpointRepository) FindEndpointsByDeploymentVersionsIn(dVersions []*domain.DeploymentVersion) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointsByDeploymentVersionsIn", dVersions)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointsByDeploymentVersionsIn indicates an expected call of FindEndpointsByDeploymentVersionsIn.
func (mr *MockEndpointRepositoryMockRecorder) FindEndpointsByDeploymentVersionsIn(dVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointsByDeploymentVersionsIn", reflect.TypeOf((*MockEndpointRepository)(nil).FindEndpointsByDeploymentVersionsIn), dVersions)
}

// SaveEndpoint mocks base method.
func (m *MockEndpointRepository) SaveEndpoint(endpoint *domain.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEndpoint", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEndpoint indicates an expected call of SaveEndpoint.
func (mr *MockEndpointRepositoryMockRecorder) SaveEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEndpoint", reflect.TypeOf((*MockEndpointRepository)(nil).SaveEndpoint), endpoint)
}

// MockHashPolicyRepository is a mock of HashPolicyRepository interface.
type MockHashPolicyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHashPolicyRepositoryMockRecorder
}

// MockHashPolicyRepositoryMockRecorder is the mock recorder for MockHashPolicyRepository.
type MockHashPolicyRepositoryMockRecorder struct {
	mock *MockHashPolicyRepository
}

// NewMockHashPolicyRepository creates a new mock instance.
func NewMockHashPolicyRepository(ctrl *gomock.Controller) *MockHashPolicyRepository {
	mock := &MockHashPolicyRepository{ctrl: ctrl}
	mock.recorder = &MockHashPolicyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashPolicyRepository) EXPECT() *MockHashPolicyRepositoryMockRecorder {
	return m.recorder
}

// DeleteHashPolicyByEndpointId mocks base method.
func (m *MockHashPolicyRepository) DeleteHashPolicyByEndpointId(endpointId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyByEndpointId", endpointId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashPolicyByEndpointId indicates an expected call of DeleteHashPolicyByEndpointId.
func (mr *MockHashPolicyRepositoryMockRecorder) DeleteHashPolicyByEndpointId(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyByEndpointId", reflect.TypeOf((*MockHashPolicyRepository)(nil).DeleteHashPolicyByEndpointId), endpointId)
}

// DeleteHashPolicyById mocks base method.
func (m *MockHashPolicyRepository) DeleteHashPolicyById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHashPolicyById indicates an expected call of DeleteHashPolicyById.
func (mr *MockHashPolicyRepositoryMockRecorder) DeleteHashPolicyById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyById", reflect.TypeOf((*MockHashPolicyRepository)(nil).DeleteHashPolicyById), Id)
}

// DeleteHashPolicyByRouteId mocks base method.
func (m *MockHashPolicyRepository) DeleteHashPolicyByRouteId(routeId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashPolicyByRouteId", routeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashPolicyByRouteId indicates an expected call of DeleteHashPolicyByRouteId.
func (mr *MockHashPolicyRepositoryMockRecorder) DeleteHashPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashPolicyByRouteId", reflect.TypeOf((*MockHashPolicyRepository)(nil).DeleteHashPolicyByRouteId), routeId)
}

// FindHashPolicyByClusterAndVersions mocks base method.
func (m *MockHashPolicyRepository) FindHashPolicyByClusterAndVersions(clusterName string, versions ...string) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{clusterName}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindHashPolicyByClusterAndVersions", varargs...)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByClusterAndVersions indicates an expected call of FindHashPolicyByClusterAndVersions.
func (mr *MockHashPolicyRepositoryMockRecorder) FindHashPolicyByClusterAndVersions(clusterName interface{}, versions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{clusterName}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByClusterAndVersions", reflect.TypeOf((*MockHashPolicyRepository)(nil).FindHashPolicyByClusterAndVersions), varargs...)
}

// FindHashPolicyByEndpointId mocks base method.
func (m *MockHashPolicyRepository) FindHashPolicyByEndpointId(endpointId int32) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyByEndpointId", endpointId)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByEndpointId indicates an expected call of FindHashPolicyByEndpointId.
func (mr *MockHashPolicyRepositoryMockRecorder) FindHashPolicyByEndpointId(endpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByEndpointId", reflect.TypeOf((*MockHashPolicyRepository)(nil).FindHashPolicyByEndpointId), endpointId)
}

// FindHashPolicyByRouteId mocks base method.
func (m *MockHashPolicyRepository) FindHashPolicyByRouteId(routeId int32) ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyByRouteId", routeId)
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyByRouteId indicates an expected call of FindHashPolicyByRouteId.
func (mr *MockHashPolicyRepositoryMockRecorder) FindHashPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyByRouteId", reflect.TypeOf((*MockHashPolicyRepository)(nil).FindHashPolicyByRouteId), routeId)
}

// SaveHashPolicy mocks base method.
func (m *MockHashPolicyRepository) SaveHashPolicy(hashPolicy *domain.HashPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashPolicy", hashPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashPolicy indicates an expected call of SaveHashPolicy.
func (mr *MockHashPolicyRepositoryMockRecorder) SaveHashPolicy(hashPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashPolicy", reflect.TypeOf((*MockHashPolicyRepository)(nil).SaveHashPolicy), hashPolicy)
}

// MockHealthCheckRepository is a mock of HealthCheckRepository interface.
type MockHealthCheckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckRepositoryMockRecorder
}

// MockHealthCheckRepositoryMockRecorder is the mock recorder for MockHealthCheckRepository.
type MockHealthCheckRepositoryMockRecorder struct {
	mock *MockHealthCheckRepository
}

// NewMockHealthCheckRepository creates a new mock instance.
func NewMockHealthCheckRepository(ctrl *gomock.Controller) *MockHealthCheckRepository {
	mock := &MockHealthCheckRepository{ctrl: ctrl}
	mock.recorder = &MockHealthCheckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckRepository) EXPECT() *MockHealthCheckRepositoryMockRecorder {
	return m.recorder
}

// DeleteHealthCheckById mocks base method.
func (m *MockHealthCheckRepository) DeleteHealthCheckById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHealthCheckById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHealthCheckById indicates an expected call of DeleteHealthCheckById.
func (mr *MockHealthCheckRepositoryMockRecorder) DeleteHealthCheckById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHealthCheckById", reflect.TypeOf((*MockHealthCheckRepository)(nil).DeleteHealthCheckById), Id)
}

// DeleteHealthChecksByClusterId mocks base method.
func (m *MockHealthCheckRepository) DeleteHealthChecksByClusterId(clusterId int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHealthChecksByClusterId", clusterId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHealthChecksByClusterId indicates an expected call of DeleteHealthChecksByClusterId.
func (mr *MockHealthCheckRepositoryMockRecorder) DeleteHealthChecksByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHealthChecksByClusterId", reflect.TypeOf((*MockHealthCheckRepository)(nil).DeleteHealthChecksByClusterId), clusterId)
}

// FindHealthChecksByClusterId mocks base method.
func (m *MockHealthCheckRepository) FindHealthChecksByClusterId(clusterId int32) ([]*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHealthChecksByClusterId", clusterId)
	ret0, _ := ret[0].([]*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHealthChecksByClusterId indicates an expected call of FindHealthChecksByClusterId.
func (mr *MockHealthCheckRepositoryMockRecorder) FindHealthChecksByClusterId(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHealthChecksByClusterId", reflect.TypeOf((*MockHealthCheckRepository)(nil).FindHealthChecksByClusterId), clusterId)
}

// SaveHealthCheck mocks base method.
func (m *MockHealthCheckRepository) SaveHealthCheck(healthCheck *domain.HealthCheck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHealthCheck", healthCheck)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHealthCheck indicates an expected call of SaveHealthCheck.
func (mr *MockHealthCheckRepositoryMockRecorder) SaveHealthCheck(healthCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHealthCheck", reflect.TypeOf((*MockHealthCheckRepository)(nil).SaveHealthCheck), healthCheck)
}

// MockRetryPolicyRepository is a mock of RetryPolicyRepository interface.
type MockRetryPolicyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRetryPolicyRepositoryMockRecorder
}

// MockRetryPolicyRepositoryMockRecorder is the mock recorder for MockRetryPolicyRepository.
type MockRetryPolicyRepositoryMockRecorder struct {
	mock *MockRetryPolicyRepository
}

// NewMockRetryPolicyRepository creates a new mock instance.
func NewMockRetryPolicyRepository(ctrl *gomock.Controller) *MockRetryPolicyRepository {
	mock := &MockRetryPolicyRepository{ctrl: ctrl}
	mock.recorder = &MockRetryPolicyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryPolicyRepository) EXPECT() *MockRetryPolicyRepositoryMockRecorder {
	return m.recorder
}

// DeleteRetryPolicyById mocks base method.
func (m *MockRetryPolicyRepository) DeleteRetryPolicyById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryPolicyById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryPolicyById indicates an expected call of DeleteRetryPolicyById.
func (mr *MockRetryPolicyRepositoryMockRecorder) DeleteRetryPolicyById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryPolicyById", reflect.TypeOf((*MockRetryPolicyRepository)(nil).DeleteRetryPolicyById), Id)
}

// DeleteRetryPolicyByRouteId mocks base method.
func (m *MockRetryPolicyRepository) DeleteRetryPolicyByRouteId(routeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryPolicyByRouteId", routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryPolicyByRouteId indicates an expected call of DeleteRetryPolicyByRouteId.
func (mr *MockRetryPolicyRepositoryMockRecorder) DeleteRetryPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryPolicyByRouteId", reflect.TypeOf((*MockRetryPolicyRepository)(nil).DeleteRetryPolicyByRouteId), routeId)
}

// FindRetryPolicyByRouteId mocks base method.
func (m *MockRetryPolicyRepository) FindRetryPolicyByRouteId(routeId int32) (*domain.RetryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryPolicyByRouteId", routeId)
	ret0, _ := ret[0].(*domain.RetryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRetryPolicyByRouteId indicates an expected call of FindRetryPolicyByRouteId.
func (mr *MockRetryPolicyRepositoryMockRecorder) FindRetryPolicyByRouteId(routeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryPolicyByRouteId", reflect.TypeOf((*MockRetryPolicyRepository)(nil).FindRetryPolicyByRouteId), routeId)
}

// SaveRetryPolicy mocks base method.
func (m *MockRetryPolicyRepository) SaveRetryPolicy(retryPolicy *domain.RetryPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRetryPolicy", retryPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRetryPolicy indicates an expected call of SaveRetryPolicy.
func (mr *MockRetryPolicyRepositoryMockRecorder) SaveRetryPolicy(retryPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRetryPolicy", reflect.TypeOf((*MockRetryPolicyRepository)(nil).SaveRetryPolicy), retryPolicy)
}

// MockCompositeSatelliteRepository is a mock of CompositeSatelliteRepository interface.
type MockCompositeSatelliteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompositeSatelliteRepositoryMockRecorder
}

// MockCompositeSatelliteRepositoryMockRecorder is the mock recorder for MockCompositeSatelliteRepository.
type MockCompositeSatelliteRepositoryMockRecorder struct {
	mock *MockCompositeSatelliteRepository
}

// NewMockCompositeSatelliteRepository creates a new mock instance.
func NewMockCompositeSatelliteRepository(ctrl *gomock.Controller) *MockCompositeSatelliteRepository {
	mock := &MockCompositeSatelliteRepository{ctrl: ctrl}
	mock.recorder = &MockCompositeSatelliteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompositeSatelliteRepository) EXPECT() *MockCompositeSatelliteRepositoryMockRecorder {
	return m.recorder
}

// DeleteCompositeSatellite mocks base method.
func (m *MockCompositeSatelliteRepository) DeleteCompositeSatellite(namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompositeSatellite", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompositeSatellite indicates an expected call of DeleteCompositeSatellite.
func (mr *MockCompositeSatelliteRepositoryMockRecorder) DeleteCompositeSatellite(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompositeSatellite", reflect.TypeOf((*MockCompositeSatelliteRepository)(nil).DeleteCompositeSatellite), namespace)
}

// FindAllCompositeSatellites mocks base method.
func (m *MockCompositeSatelliteRepository) FindAllCompositeSatellites() ([]*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCompositeSatellites")
	ret0, _ := ret[0].([]*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCompositeSatellites indicates an expected call of FindAllCompositeSatellites.
func (mr *MockCompositeSatelliteRepositoryMockRecorder) FindAllCompositeSatellites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCompositeSatellites", reflect.TypeOf((*MockCompositeSatelliteRepository)(nil).FindAllCompositeSatellites))
}

// FindCompositeSatelliteByNamespace mocks base method.
func (m *MockCompositeSatelliteRepository) FindCompositeSatelliteByNamespace(namespace string) (*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompositeSatelliteByNamespace", namespace)
	ret0, _ := ret[0].(*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompositeSatelliteByNamespace indicates an expected call of FindCompositeSatelliteByNamespace.
func (mr *MockCompositeSatelliteRepositoryMockRecorder) FindCompositeSatelliteByNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompositeSatelliteByNamespace", reflect.TypeOf((*MockCompositeSatelliteRepository)(nil).FindCompositeSatelliteByNamespace), namespace)
}

// SaveCompositeSatellite mocks base method.
func (m *MockCompositeSatelliteRepository) SaveCompositeSatellite(satellite *domain.CompositeSatellite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompositeSatellite", satellite)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCompositeSatellite indicates an expected call of SaveCompositeSatellite.
func (mr *MockCompositeSatelliteRepositoryMockRecorder) SaveCompositeSatellite(satellite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompositeSatellite", reflect.TypeOf((*MockCompositeSatelliteRepository)(nil).SaveCompositeSatellite), satellite)
}

// MockRateLimitRepository is a mock of RateLimitRepository interface.
type MockRateLimitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitRepositoryMockRecorder
}

// MockRateLimitRepositoryMockRecorder is the mock recorder for MockRateLimitRepository.
type MockRateLimitRepositoryMockRecorder struct {
	mock *MockRateLimitRepository
}

// NewMockRateLimitRepository creates a new mock instance.
func NewMockRateLimitRepository(ctrl *gomock.Controller) *MockRateLimitRepository {
	mock := &MockRateLimitRepository{ctrl: ctrl}
	mock.recorder = &MockRateLimitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitRepository) EXPECT() *MockRateLimitRepositoryMockRecorder {
	return m.recorder
}

// DeleteRateLimitByNameAndPriority mocks base method.
func (m *MockRateLimitRepository) DeleteRateLimitByNameAndPriority(name string, priority domain.ConfigPriority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateLimitByNameAndPriority", name, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitByNameAndPriority indicates an expected call of DeleteRateLimitByNameAndPriority.
func (mr *MockRateLimitRepositoryMockRecorder) DeleteRateLimitByNameAndPriority(name, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitByNameAndPriority", reflect.TypeOf((*MockRateLimitRepository)(nil).DeleteRateLimitByNameAndPriority), name, priority)
}

// FindAllRateLimits mocks base method.
func (m *MockRateLimitRepository) FindAllRateLimits() ([]*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRateLimits")
	ret0, _ := ret[0].([]*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRateLimits indicates an expected call of FindAllRateLimits.
func (mr *MockRateLimitRepositoryMockRecorder) FindAllRateLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRateLimits", reflect.TypeOf((*MockRateLimitRepository)(nil).FindAllRateLimits))
}

// FindRateLimitByNameWithHighestPriority mocks base method.
func (m *MockRateLimitRepository) FindRateLimitByNameWithHighestPriority(name string) (*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRateLimitByNameWithHighestPriority", name)
	ret0, _ := ret[0].(*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRateLimitByNameWithHighestPriority indicates an expected call of FindRateLimitByNameWithHighestPriority.
func (mr *MockRateLimitRepositoryMockRecorder) FindRateLimitByNameWithHighestPriority(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRateLimitByNameWithHighestPriority", reflect.TypeOf((*MockRateLimitRepository)(nil).FindRateLimitByNameWithHighestPriority), name)
}

// SaveRateLimit mocks base method.
func (m *MockRateLimitRepository) SaveRateLimit(rateLimit *domain.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRateLimit", rateLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRateLimit indicates an expected call of SaveRateLimit.
func (mr *MockRateLimitRepositoryMockRecorder) SaveRateLimit(rateLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRateLimit", reflect.TypeOf((*MockRateLimitRepository)(nil).SaveRateLimit), rateLimit)
}

// MockMicroserviceVersionRepository is a mock of MicroserviceVersionRepository interface.
type MockMicroserviceVersionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMicroserviceVersionRepositoryMockRecorder
}

// MockMicroserviceVersionRepositoryMockRecorder is the mock recorder for MockMicroserviceVersionRepository.
type MockMicroserviceVersionRepositoryMockRecorder struct {
	mock *MockMicroserviceVersionRepository
}

// NewMockMicroserviceVersionRepository creates a new mock instance.
func NewMockMicroserviceVersionRepository(ctrl *gomock.Controller) *MockMicroserviceVersionRepository {
	mock := &MockMicroserviceVersionRepository{ctrl: ctrl}
	mock.recorder = &MockMicroserviceVersionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMicroserviceVersionRepository) EXPECT() *MockMicroserviceVersionRepositoryMockRecorder {
	return m.recorder
}

// DeleteMicroserviceVersion mocks base method.
func (m *MockMicroserviceVersionRepository) DeleteMicroserviceVersion(name string, namespace msaddr.Namespace, initialVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicroserviceVersion", name, namespace, initialVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMicroserviceVersion indicates an expected call of DeleteMicroserviceVersion.
func (mr *MockMicroserviceVersionRepositoryMockRecorder) DeleteMicroserviceVersion(name, namespace, initialVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicroserviceVersion", reflect.TypeOf((*MockMicroserviceVersionRepository)(nil).DeleteMicroserviceVersion), name, namespace, initialVersion)
}

// FindAllMicroserviceVersions mocks base method.
func (m *MockMicroserviceVersionRepository) FindAllMicroserviceVersions() ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMicroserviceVersions")
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMicroserviceVersions indicates an expected call of FindAllMicroserviceVersions.
func (mr *MockMicroserviceVersionRepositoryMockRecorder) FindAllMicroserviceVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMicroserviceVersions", reflect.TypeOf((*MockMicroserviceVersionRepository)(nil).FindAllMicroserviceVersions))
}

// FindMicroserviceVersionByNameAndInitialVersion mocks base method.
func (m *MockMicroserviceVersionRepository) FindMicroserviceVersionByNameAndInitialVersion(name string, namespace msaddr.Namespace, initialVersion string) (*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionByNameAndInitialVersion", name, namespace, initialVersion)
	ret0, _ := ret[0].(*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionByNameAndInitialVersion indicates an expected call of FindMicroserviceVersionByNameAndInitialVersion.
func (mr *MockMicroserviceVersionRepositoryMockRecorder) FindMicroserviceVersionByNameAndInitialVersion(name, namespace, initialVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionByNameAndInitialVersion", reflect.TypeOf((*MockMicroserviceVersionRepository)(nil).FindMicroserviceVersionByNameAndInitialVersion), name, namespace, initialVersion)
}

// FindMicroserviceVersionsByNameAndNamespace mocks base method.
func (m *MockMicroserviceVersionRepository) FindMicroserviceVersionsByNameAndNamespace(name string, namespace msaddr.Namespace) ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionsByNameAndNamespace", name, namespace)
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionsByNameAndNamespace indicates an expected call of FindMicroserviceVersionsByNameAndNamespace.
func (mr *MockMicroserviceVersionRepositoryMockRecorder) FindMicroserviceVersionsByNameAndNamespace(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionsByNameAndNamespace", reflect.TypeOf((*MockMicroserviceVersionRepository)(nil).FindMicroserviceVersionsByNameAndNamespace), name, namespace)
}

// FindMicroserviceVersionsByVersion mocks base method.
func (m *MockMicroserviceVersionRepository) FindMicroserviceVersionsByVersion(version *domain.DeploymentVersion) ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMicroserviceVersionsByVersion", version)
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMicroserviceVersionsByVersion indicates an expected call of FindMicroserviceVersionsByVersion.
func (mr *MockMicroserviceVersionRepositoryMockRecorder) FindMicroserviceVersionsByVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMicroserviceVersionsByVersion", reflect.TypeOf((*MockMicroserviceVersionRepository)(nil).FindMicroserviceVersionsByVersion), version)
}

// SaveMicroserviceVersion mocks base method.
func (m *MockMicroserviceVersionRepository) SaveMicroserviceVersion(msVersion *domain.MicroserviceVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMicroserviceVersion", msVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMicroserviceVersion indicates an expected call of SaveMicroserviceVersion.
func (mr *MockMicroserviceVersionRepositoryMockRecorder) SaveMicroserviceVersion(msVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMicroserviceVersion", reflect.TypeOf((*MockMicroserviceVersionRepository)(nil).SaveMicroserviceVersion), msVersion)
}

// MockExtAuthzFilterRepository is a mock of ExtAuthzFilterRepository interface.
type MockExtAuthzFilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthzFilterRepositoryMockRecorder
}

// MockExtAuthzFilterRepositoryMockRecorder is the mock recorder for MockExtAuthzFilterRepository.
type MockExtAuthzFilterRepositoryMockRecorder struct {
	mock *MockExtAuthzFilterRepository
}

// NewMockExtAuthzFilterRepository creates a new mock instance.
func NewMockExtAuthzFilterRepository(ctrl *gomock.Controller) *MockExtAuthzFilterRepository {
	mock := &MockExtAuthzFilterRepository{ctrl: ctrl}
	mock.recorder = &MockExtAuthzFilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthzFilterRepository) EXPECT() *MockExtAuthzFilterRepositoryMockRecorder {
	return m.recorder
}

// DeleteExtAuthzFilter mocks base method.
func (m *MockExtAuthzFilterRepository) DeleteExtAuthzFilter(extAuthzFilterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtAuthzFilter", extAuthzFilterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthzFilter indicates an expected call of DeleteExtAuthzFilter.
func (mr *MockExtAuthzFilterRepositoryMockRecorder) DeleteExtAuthzFilter(extAuthzFilterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthzFilter", reflect.TypeOf((*MockExtAuthzFilterRepository)(nil).DeleteExtAuthzFilter), extAuthzFilterName)
}

// FindAllExtAuthzFilters mocks base method.
func (m *MockExtAuthzFilterRepository) FindAllExtAuthzFilters() ([]*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllExtAuthzFilters")
	ret0, _ := ret[0].([]*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllExtAuthzFilters indicates an expected call of FindAllExtAuthzFilters.
func (mr *MockExtAuthzFilterRepositoryMockRecorder) FindAllExtAuthzFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllExtAuthzFilters", reflect.TypeOf((*MockExtAuthzFilterRepository)(nil).FindAllExtAuthzFilters))
}

// FindExtAuthzFilterByName mocks base method.
func (m *MockExtAuthzFilterRepository) FindExtAuthzFilterByName(name string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByName", name)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByName indicates an expected call of FindExtAuthzFilterByName.
func (mr *MockExtAuthzFilterRepositoryMockRecorder) FindExtAuthzFilterByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByName", reflect.TypeOf((*MockExtAuthzFilterRepository)(nil).FindExtAuthzFilterByName), name)
}

// FindExtAuthzFilterByNodeGroup mocks base method.
func (m *MockExtAuthzFilterRepository) FindExtAuthzFilterByNodeGroup(nodeGroup string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByNodeGroup", nodeGroup)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByNodeGroup indicates an expected call of FindExtAuthzFilterByNodeGroup.
func (mr *MockExtAuthzFilterRepositoryMockRecorder) FindExtAuthzFilterByNodeGroup(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByNodeGroup", reflect.TypeOf((*MockExtAuthzFilterRepository)(nil).FindExtAuthzFilterByNodeGroup), nodeGroup)
}

// SaveExtAuthzFilter mocks base method.
func (m *MockExtAuthzFilterRepository) SaveExtAuthzFilter(filter *domain.ExtAuthzFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExtAuthzFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExtAuthzFilter indicates an expected call of SaveExtAuthzFilter.
func (mr *MockExtAuthzFilterRepositoryMockRecorder) SaveExtAuthzFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExtAuthzFilter", reflect.TypeOf((*MockExtAuthzFilterRepository)(nil).SaveExtAuthzFilter), filter)
}

// MockCircuitBreakersRepository is a mock of CircuitBreakersRepository interface.
type MockCircuitBreakersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakersRepositoryMockRecorder
}

// MockCircuitBreakersRepositoryMockRecorder is the mock recorder for MockCircuitBreakersRepository.
type MockCircuitBreakersRepositoryMockRecorder struct {
	mock *MockCircuitBreakersRepository
}

// NewMockCircuitBreakersRepository creates a new mock instance.
func NewMockCircuitBreakersRepository(ctrl *gomock.Controller) *MockCircuitBreakersRepository {
	mock := &MockCircuitBreakersRepository{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitBreakersRepository) EXPECT() *MockCircuitBreakersRepositoryMockRecorder {
	return m.recorder
}

// DeleteCircuitBreakerById mocks base method.
func (m *MockCircuitBreakersRepository) DeleteCircuitBreakerById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCircuitBreakerById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCircuitBreakerById indicates an expected call of DeleteCircuitBreakerById.
func (mr *MockCircuitBreakersRepositoryMockRecorder) DeleteCircuitBreakerById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCircuitBreakerById", reflect.TypeOf((*MockCircuitBreakersRepository)(nil).DeleteCircuitBreakerById), Id)
}

// FindAllCircuitBreakers mocks base method.
func (m *MockCircuitBreakersRepository) FindAllCircuitBreakers() ([]*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCircuitBreakers")
	ret0, _ := ret[0].([]*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCircuitBreakers indicates an expected call of FindAllCircuitBreakers.
func (mr *MockCircuitBreakersRepositoryMockRecorder) FindAllCircuitBreakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCircuitBreakers", reflect.TypeOf((*MockCircuitBreakersRepository)(nil).FindAllCircuitBreakers))
}

// FindCircuitBreakerById mocks base method.
func (m *MockCircuitBreakersRepository) FindCircuitBreakerById(Id int32) (*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCircuitBreakerById", Id)
	ret0, _ := ret[0].(*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCircuitBreakerById indicates an expected call of FindCircuitBreakerById.
func (mr *MockCircuitBreakersRepositoryMockRecorder) FindCircuitBreakerById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCircuitBreakerById", reflect.TypeOf((*MockCircuitBreakersRepository)(nil).FindCircuitBreakerById), Id)
}

// SaveCircuitBreaker mocks base method.
func (m *MockCircuitBreakersRepository) SaveCircuitBreaker(circuitBreaker *domain.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCircuitBreaker indicates an expected call of SaveCircuitBreaker.
func (mr *MockCircuitBreakersRepositoryMockRecorder) SaveCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCircuitBreaker", reflect.TypeOf((*MockCircuitBreakersRepository)(nil).SaveCircuitBreaker), circuitBreaker)
}

// MockThresholdsRepository is a mock of ThresholdsRepository interface.
type MockThresholdsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThresholdsRepositoryMockRecorder
}

// MockThresholdsRepositoryMockRecorder is the mock recorder for MockThresholdsRepository.
type MockThresholdsRepositoryMockRecorder struct {
	mock *MockThresholdsRepository
}

// NewMockThresholdsRepository creates a new mock instance.
func NewMockThresholdsRepository(ctrl *gomock.Controller) *MockThresholdsRepository {
	mock := &MockThresholdsRepository{ctrl: ctrl}
	mock.recorder = &MockThresholdsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThresholdsRepository) EXPECT() *MockThresholdsRepositoryMockRecorder {
	return m.recorder
}

// DeleteThresholdById mocks base method.
func (m *MockThresholdsRepository) DeleteThresholdById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThresholdById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThresholdById indicates an expected call of DeleteThresholdById.
func (mr *MockThresholdsRepositoryMockRecorder) DeleteThresholdById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThresholdById", reflect.TypeOf((*MockThresholdsRepository)(nil).DeleteThresholdById), Id)
}

// FindAllThresholds mocks base method.
func (m *MockThresholdsRepository) FindAllThresholds() ([]*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllThresholds")
	ret0, _ := ret[0].([]*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllThresholds indicates an expected call of FindAllThresholds.
func (mr *MockThresholdsRepositoryMockRecorder) FindAllThresholds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllThresholds", reflect.TypeOf((*MockThresholdsRepository)(nil).FindAllThresholds))
}

// FindThresholdById mocks base method.
func (m *MockThresholdsRepository) FindThresholdById(Id int32) (*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindThresholdById", Id)
	ret0, _ := ret[0].(*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindThresholdById indicates an expected call of FindThresholdById.
func (mr *MockThresholdsRepositoryMockRecorder) FindThresholdById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindThresholdById", reflect.TypeOf((*MockThresholdsRepository)(nil).FindThresholdById), Id)
}

// SaveThreshold mocks base method.
func (m *MockThresholdsRepository) SaveThreshold(threshold *domain.Threshold) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveThreshold", threshold)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveThreshold indicates an expected call of SaveThreshold.
func (mr *MockThresholdsRepositoryMockRecorder) SaveThreshold(threshold interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveThreshold", reflect.TypeOf((*MockThresholdsRepository)(nil).SaveThreshold), threshold)
}

// MockTcpKeepaliveRepository is a mock of TcpKeepaliveRepository interface.
type MockTcpKeepaliveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTcpKeepaliveRepositoryMockRecorder
}

// MockTcpKeepaliveRepositoryMockRecorder is the mock recorder for MockTcpKeepaliveRepository.
type MockTcpKeepaliveRepositoryMockRecorder struct {
	mock *MockTcpKeepaliveRepository
}

// NewMockTcpKeepaliveRepository creates a new mock instance.
func NewMockTcpKeepaliveRepository(ctrl *gomock.Controller) *MockTcpKeepaliveRepository {
	mock := &MockTcpKeepaliveRepository{ctrl: ctrl}
	mock.recorder = &MockTcpKeepaliveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTcpKeepaliveRepository) EXPECT() *MockTcpKeepaliveRepositoryMockRecorder {
	return m.recorder
}

// DeleteTcpKeepaliveById mocks base method.
func (m *MockTcpKeepaliveRepository) DeleteTcpKeepaliveById(Id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTcpKeepaliveById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTcpKeepaliveById indicates an expected call of DeleteTcpKeepaliveById.
func (mr *MockTcpKeepaliveRepositoryMockRecorder) DeleteTcpKeepaliveById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTcpKeepaliveById", reflect.TypeOf((*MockTcpKeepaliveRepository)(nil).DeleteTcpKeepaliveById), Id)
}

// FindAllTcpKeepalives mocks base method.
func (m *MockTcpKeepaliveRepository) FindAllTcpKeepalives() ([]*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTcpKeepalives")
	ret0, _ := ret[0].([]*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTcpKeepalives indicates an expected call of FindAllTcpKeepalives.
func (mr *MockTcpKeepaliveRepositoryMockRecorder) FindAllTcpKeepalives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTcpKeepalives", reflect.TypeOf((*MockTcpKeepaliveRepository)(nil).FindAllTcpKeepalives))
}

// FindTcpKeepaliveById mocks base method.
func (m *MockTcpKeepaliveRepository) FindTcpKeepaliveById(Id int32) (*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTcpKeepaliveById", Id)
	ret0, _ := ret[0].(*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTcpKeepaliveById indicates an expected call of FindTcpKeepaliveById.
func (mr *MockTcpKeepaliveRepositoryMockRecorder) FindTcpKeepaliveById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTcpKeepaliveById", reflect.TypeOf((*MockTcpKeepaliveRepository)(nil).FindTcpKeepaliveById), Id)
}

// SaveTcpKeepalive mocks base method.
func (m *MockTcpKeepaliveRepository) SaveTcpKeepalive(tcpKeepalive *domain.TcpKeepalive) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTcpKeepalive", tcpKeepalive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTcpKeepalive indicates an expected call of SaveTcpKeepalive.
func (mr *MockTcpKeepaliveRepositoryMockRecorder) SaveTcpKeepalive(tcpKeepalive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTcpKeepalive", reflect.TypeOf((*MockTcpKeepaliveRepository)(nil).SaveTcpKeepalive), tcpKeepalive)
}
