// Code generated by MockGen. DO NOT EDIT.
// Source: ../../constancy/storage.go

// Package mock_constancy is a generated GoMock package.
package mock_constancy

import (
	context "context"
	clustering "github.com/netcracker/qubership-core-control-plane/control-plane/v2/clustering"
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bun "github.com/uptrace/bun"
	migrate "github.com/uptrace/bun/migrate"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AfterQuery mocks base method.
func (m *MockStorage) AfterQuery(ctx context.Context, queryEvent *bun.QueryEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterQuery", ctx, queryEvent)
}

// AfterQuery indicates an expected call of AfterQuery.
func (mr *MockStorageMockRecorder) AfterQuery(ctx, queryEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterQuery", reflect.TypeOf((*MockStorage)(nil).AfterQuery), ctx, queryEvent)
}

// BeforeQuery mocks base method.
func (m *MockStorage) BeforeQuery(ctx context.Context, queryEvent *bun.QueryEvent) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeQuery", ctx, queryEvent)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// BeforeQuery indicates an expected call of BeforeQuery.
func (mr *MockStorageMockRecorder) BeforeQuery(ctx, queryEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeQuery", reflect.TypeOf((*MockStorage)(nil).BeforeQuery), ctx, queryEvent)
}

// FindAllCircuitBreakers mocks base method.
func (m *MockStorage) FindAllCircuitBreakers() ([]*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCircuitBreakers")
	ret0, _ := ret[0].([]*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCircuitBreakers indicates an expected call of FindAllCircuitBreakers.
func (mr *MockStorageMockRecorder) FindAllCircuitBreakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCircuitBreakers", reflect.TypeOf((*MockStorage)(nil).FindAllCircuitBreakers))
}

// FindAllClusters mocks base method.
func (m *MockStorage) FindAllClusters() ([]*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClusters")
	ret0, _ := ret[0].([]*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClusters indicates an expected call of FindAllClusters.
func (mr *MockStorageMockRecorder) FindAllClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClusters", reflect.TypeOf((*MockStorage)(nil).FindAllClusters))
}

// FindAllClustersNodeGroups mocks base method.
func (m *MockStorage) FindAllClustersNodeGroups() ([]*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllClustersNodeGroups")
	ret0, _ := ret[0].([]*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllClustersNodeGroups indicates an expected call of FindAllClustersNodeGroups.
func (mr *MockStorageMockRecorder) FindAllClustersNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllClustersNodeGroups", reflect.TypeOf((*MockStorage)(nil).FindAllClustersNodeGroups))
}

// FindAllCompositeSatellites mocks base method.
func (m *MockStorage) FindAllCompositeSatellites() ([]*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCompositeSatellites")
	ret0, _ := ret[0].([]*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCompositeSatellites indicates an expected call of FindAllCompositeSatellites.
func (mr *MockStorageMockRecorder) FindAllCompositeSatellites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCompositeSatellites", reflect.TypeOf((*MockStorage)(nil).FindAllCompositeSatellites))
}

// FindAllDeploymentVersions mocks base method.
func (m *MockStorage) FindAllDeploymentVersions() ([]*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDeploymentVersions")
	ret0, _ := ret[0].([]*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDeploymentVersions indicates an expected call of FindAllDeploymentVersions.
func (mr *MockStorageMockRecorder) FindAllDeploymentVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDeploymentVersions", reflect.TypeOf((*MockStorage)(nil).FindAllDeploymentVersions))
}

// FindAllElectionRecords mocks base method.
func (m *MockStorage) FindAllElectionRecords() ([]*clustering.MasterMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllElectionRecords")
	ret0, _ := ret[0].([]*clustering.MasterMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllElectionRecords indicates an expected call of FindAllElectionRecords.
func (mr *MockStorageMockRecorder) FindAllElectionRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllElectionRecords", reflect.TypeOf((*MockStorage)(nil).FindAllElectionRecords))
}

// FindAllEndpoints mocks base method.
func (m *MockStorage) FindAllEndpoints() ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEndpoints")
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEndpoints indicates an expected call of FindAllEndpoints.
func (mr *MockStorageMockRecorder) FindAllEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEndpoints", reflect.TypeOf((*MockStorage)(nil).FindAllEndpoints))
}

// FindAllEnvoyConfigVersions mocks base method.
func (m *MockStorage) FindAllEnvoyConfigVersions() ([]*domain.EnvoyConfigVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEnvoyConfigVersions")
	ret0, _ := ret[0].([]*domain.EnvoyConfigVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEnvoyConfigVersions indicates an expected call of FindAllEnvoyConfigVersions.
func (mr *MockStorageMockRecorder) FindAllEnvoyConfigVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEnvoyConfigVersions", reflect.TypeOf((*MockStorage)(nil).FindAllEnvoyConfigVersions))
}

// FindAllExtAuthzFilters mocks base method.
func (m *MockStorage) FindAllExtAuthzFilters() ([]*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllExtAuthzFilters")
	ret0, _ := ret[0].([]*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllExtAuthzFilters indicates an expected call of FindAllExtAuthzFilters.
func (mr *MockStorageMockRecorder) FindAllExtAuthzFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllExtAuthzFilters", reflect.TypeOf((*MockStorage)(nil).FindAllExtAuthzFilters))
}

// FindAllHashPolicies mocks base method.
func (m *MockStorage) FindAllHashPolicies() ([]*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllHashPolicies")
	ret0, _ := ret[0].([]*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHashPolicies indicates an expected call of FindAllHashPolicies.
func (mr *MockStorageMockRecorder) FindAllHashPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHashPolicies", reflect.TypeOf((*MockStorage)(nil).FindAllHashPolicies))
}

// FindAllHeaderMatchers mocks base method.
func (m *MockStorage) FindAllHeaderMatchers() ([]*domain.HeaderMatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllHeaderMatchers")
	ret0, _ := ret[0].([]*domain.HeaderMatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHeaderMatchers indicates an expected call of FindAllHeaderMatchers.
func (mr *MockStorageMockRecorder) FindAllHeaderMatchers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHeaderMatchers", reflect.TypeOf((*MockStorage)(nil).FindAllHeaderMatchers))
}

// FindAllHealthChecks mocks base method.
func (m *MockStorage) FindAllHealthChecks() ([]*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllHealthChecks")
	ret0, _ := ret[0].([]*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllHealthChecks indicates an expected call of FindAllHealthChecks.
func (mr *MockStorageMockRecorder) FindAllHealthChecks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllHealthChecks", reflect.TypeOf((*MockStorage)(nil).FindAllHealthChecks))
}

// FindAllListenerWasmFilters mocks base method.
func (m *MockStorage) FindAllListenerWasmFilters() ([]*domain.ListenersWasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListenerWasmFilters")
	ret0, _ := ret[0].([]*domain.ListenersWasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListenerWasmFilters indicates an expected call of FindAllListenerWasmFilters.
func (mr *MockStorageMockRecorder) FindAllListenerWasmFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListenerWasmFilters", reflect.TypeOf((*MockStorage)(nil).FindAllListenerWasmFilters))
}

// FindAllListeners mocks base method.
func (m *MockStorage) FindAllListeners() ([]*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllListeners")
	ret0, _ := ret[0].([]*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllListeners indicates an expected call of FindAllListeners.
func (mr *MockStorageMockRecorder) FindAllListeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllListeners", reflect.TypeOf((*MockStorage)(nil).FindAllListeners))
}

// FindAllMicroserviceVersions mocks base method.
func (m *MockStorage) FindAllMicroserviceVersions() ([]*domain.MicroserviceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMicroserviceVersions")
	ret0, _ := ret[0].([]*domain.MicroserviceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMicroserviceVersions indicates an expected call of FindAllMicroserviceVersions.
func (mr *MockStorageMockRecorder) FindAllMicroserviceVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMicroserviceVersions", reflect.TypeOf((*MockStorage)(nil).FindAllMicroserviceVersions))
}

// FindAllNamespaces mocks base method.
func (m *MockStorage) FindAllNamespaces() ([]*domain.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNamespaces")
	ret0, _ := ret[0].([]*domain.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNamespaces indicates an expected call of FindAllNamespaces.
func (mr *MockStorageMockRecorder) FindAllNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNamespaces", reflect.TypeOf((*MockStorage)(nil).FindAllNamespaces))
}

// FindAllNodeGroups mocks base method.
func (m *MockStorage) FindAllNodeGroups() ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNodeGroups")
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNodeGroups indicates an expected call of FindAllNodeGroups.
func (mr *MockStorageMockRecorder) FindAllNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNodeGroups", reflect.TypeOf((*MockStorage)(nil).FindAllNodeGroups))
}

// FindAllRateLimits mocks base method.
func (m *MockStorage) FindAllRateLimits() ([]*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRateLimits")
	ret0, _ := ret[0].([]*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRateLimits indicates an expected call of FindAllRateLimits.
func (mr *MockStorageMockRecorder) FindAllRateLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRateLimits", reflect.TypeOf((*MockStorage)(nil).FindAllRateLimits))
}

// FindAllRetryPolicies mocks base method.
func (m *MockStorage) FindAllRetryPolicies() ([]*domain.RetryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRetryPolicies")
	ret0, _ := ret[0].([]*domain.RetryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRetryPolicies indicates an expected call of FindAllRetryPolicies.
func (mr *MockStorageMockRecorder) FindAllRetryPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRetryPolicies", reflect.TypeOf((*MockStorage)(nil).FindAllRetryPolicies))
}

// FindAllRouteConfigs mocks base method.
func (m *MockStorage) FindAllRouteConfigs() ([]*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRouteConfigs")
	ret0, _ := ret[0].([]*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRouteConfigs indicates an expected call of FindAllRouteConfigs.
func (mr *MockStorageMockRecorder) FindAllRouteConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRouteConfigs", reflect.TypeOf((*MockStorage)(nil).FindAllRouteConfigs))
}

// FindAllRoutes mocks base method.
func (m *MockStorage) FindAllRoutes() ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRoutes")
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRoutes indicates an expected call of FindAllRoutes.
func (mr *MockStorageMockRecorder) FindAllRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRoutes", reflect.TypeOf((*MockStorage)(nil).FindAllRoutes))
}

// FindAllStatefulSessionConfigs mocks base method.
func (m *MockStorage) FindAllStatefulSessionConfigs() ([]*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStatefulSessionConfigs")
	ret0, _ := ret[0].([]*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStatefulSessionConfigs indicates an expected call of FindAllStatefulSessionConfigs.
func (mr *MockStorageMockRecorder) FindAllStatefulSessionConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStatefulSessionConfigs", reflect.TypeOf((*MockStorage)(nil).FindAllStatefulSessionConfigs))
}

// FindAllTcpKeepalives mocks base method.
func (m *MockStorage) FindAllTcpKeepalives() ([]*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTcpKeepalives")
	ret0, _ := ret[0].([]*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTcpKeepalives indicates an expected call of FindAllTcpKeepalives.
func (mr *MockStorageMockRecorder) FindAllTcpKeepalives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTcpKeepalives", reflect.TypeOf((*MockStorage)(nil).FindAllTcpKeepalives))
}

// FindAllThresholds mocks base method.
func (m *MockStorage) FindAllThresholds() ([]*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllThresholds")
	ret0, _ := ret[0].([]*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllThresholds indicates an expected call of FindAllThresholds.
func (mr *MockStorageMockRecorder) FindAllThresholds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllThresholds", reflect.TypeOf((*MockStorage)(nil).FindAllThresholds))
}

// FindAllTlsConfigs mocks base method.
func (m *MockStorage) FindAllTlsConfigs() ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigs")
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigs indicates an expected call of FindAllTlsConfigs.
func (mr *MockStorageMockRecorder) FindAllTlsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigs", reflect.TypeOf((*MockStorage)(nil).FindAllTlsConfigs))
}

// FindAllTlsConfigsNodeGroups mocks base method.
func (m *MockStorage) FindAllTlsConfigsNodeGroups() ([]*domain.TlsConfigsNodeGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTlsConfigsNodeGroups")
	ret0, _ := ret[0].([]*domain.TlsConfigsNodeGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTlsConfigsNodeGroups indicates an expected call of FindAllTlsConfigsNodeGroups.
func (mr *MockStorageMockRecorder) FindAllTlsConfigsNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTlsConfigsNodeGroups", reflect.TypeOf((*MockStorage)(nil).FindAllTlsConfigsNodeGroups))
}

// FindAllVirtualHostDomains mocks base method.
func (m *MockStorage) FindAllVirtualHostDomains() ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHostDomains")
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHostDomains indicates an expected call of FindAllVirtualHostDomains.
func (mr *MockStorageMockRecorder) FindAllVirtualHostDomains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHostDomains", reflect.TypeOf((*MockStorage)(nil).FindAllVirtualHostDomains))
}

// FindAllVirtualHosts mocks base method.
func (m *MockStorage) FindAllVirtualHosts() ([]*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHosts")
	ret0, _ := ret[0].([]*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHosts indicates an expected call of FindAllVirtualHosts.
func (mr *MockStorageMockRecorder) FindAllVirtualHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHosts", reflect.TypeOf((*MockStorage)(nil).FindAllVirtualHosts))
}

// FindAllVirtualHostsDomains mocks base method.
func (m *MockStorage) FindAllVirtualHostsDomains() ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVirtualHostsDomains")
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVirtualHostsDomains indicates an expected call of FindAllVirtualHostsDomains.
func (mr *MockStorageMockRecorder) FindAllVirtualHostsDomains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVirtualHostsDomains", reflect.TypeOf((*MockStorage)(nil).FindAllVirtualHostsDomains))
}

// FindCircuitBreakerById mocks base method.
func (m *MockStorage) FindCircuitBreakerById(id int32) (*domain.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCircuitBreakerById", id)
	ret0, _ := ret[0].(*domain.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCircuitBreakerById indicates an expected call of FindCircuitBreakerById.
func (mr *MockStorageMockRecorder) FindCircuitBreakerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCircuitBreakerById", reflect.TypeOf((*MockStorage)(nil).FindCircuitBreakerById), id)
}

// FindClusterByName mocks base method.
func (m *MockStorage) FindClusterByName(key string) (*domain.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClusterByName", key)
	ret0, _ := ret[0].(*domain.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClusterByName indicates an expected call of FindClusterByName.
func (mr *MockStorageMockRecorder) FindClusterByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClusterByName", reflect.TypeOf((*MockStorage)(nil).FindClusterByName), key)
}

// FindClustersNodeGroupByIdAndNodeGroup mocks base method.
func (m *MockStorage) FindClustersNodeGroupByIdAndNodeGroup(clusterId int32, nodeGroup string) (*domain.ClustersNodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClustersNodeGroupByIdAndNodeGroup", clusterId, nodeGroup)
	ret0, _ := ret[0].(*domain.ClustersNodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClustersNodeGroupByIdAndNodeGroup indicates an expected call of FindClustersNodeGroupByIdAndNodeGroup.
func (mr *MockStorageMockRecorder) FindClustersNodeGroupByIdAndNodeGroup(clusterId, nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClustersNodeGroupByIdAndNodeGroup", reflect.TypeOf((*MockStorage)(nil).FindClustersNodeGroupByIdAndNodeGroup), clusterId, nodeGroup)
}

// FindCompositeSatelliteByNamespace mocks base method.
func (m *MockStorage) FindCompositeSatelliteByNamespace(namespace string) (*domain.CompositeSatellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompositeSatelliteByNamespace", namespace)
	ret0, _ := ret[0].(*domain.CompositeSatellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompositeSatelliteByNamespace indicates an expected call of FindCompositeSatelliteByNamespace.
func (mr *MockStorageMockRecorder) FindCompositeSatelliteByNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompositeSatelliteByNamespace", reflect.TypeOf((*MockStorage)(nil).FindCompositeSatelliteByNamespace), namespace)
}

// FindDeploymentVersionByName mocks base method.
func (m *MockStorage) FindDeploymentVersionByName(version string) (*domain.DeploymentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentVersionByName", version)
	ret0, _ := ret[0].(*domain.DeploymentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentVersionByName indicates an expected call of FindDeploymentVersionByName.
func (mr *MockStorageMockRecorder) FindDeploymentVersionByName(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentVersionByName", reflect.TypeOf((*MockStorage)(nil).FindDeploymentVersionByName), version)
}

// FindEndpointById mocks base method.
func (m *MockStorage) FindEndpointById(id int32) (*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointById", id)
	ret0, _ := ret[0].(*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointById indicates an expected call of FindEndpointById.
func (mr *MockStorageMockRecorder) FindEndpointById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointById", reflect.TypeOf((*MockStorage)(nil).FindEndpointById), id)
}

// FindExtAuthzFilterByName mocks base method.
func (m *MockStorage) FindExtAuthzFilterByName(name string) (*domain.ExtAuthzFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExtAuthzFilterByName", name)
	ret0, _ := ret[0].(*domain.ExtAuthzFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtAuthzFilterByName indicates an expected call of FindExtAuthzFilterByName.
func (mr *MockStorageMockRecorder) FindExtAuthzFilterByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtAuthzFilterByName", reflect.TypeOf((*MockStorage)(nil).FindExtAuthzFilterByName), name)
}

// FindHashPolicyById mocks base method.
func (m *MockStorage) FindHashPolicyById(id int32) (*domain.HashPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHashPolicyById", id)
	ret0, _ := ret[0].(*domain.HashPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHashPolicyById indicates an expected call of FindHashPolicyById.
func (mr *MockStorageMockRecorder) FindHashPolicyById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHashPolicyById", reflect.TypeOf((*MockStorage)(nil).FindHashPolicyById), id)
}

// FindHeaderMatcherById mocks base method.
func (m *MockStorage) FindHeaderMatcherById(id int32) (*domain.HeaderMatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHeaderMatcherById", id)
	ret0, _ := ret[0].(*domain.HeaderMatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHeaderMatcherById indicates an expected call of FindHeaderMatcherById.
func (mr *MockStorageMockRecorder) FindHeaderMatcherById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHeaderMatcherById", reflect.TypeOf((*MockStorage)(nil).FindHeaderMatcherById), id)
}

// FindHealthCheckById mocks base method.
func (m *MockStorage) FindHealthCheckById(id int32) (*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHealthCheckById", id)
	ret0, _ := ret[0].(*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHealthCheckById indicates an expected call of FindHealthCheckById.
func (mr *MockStorageMockRecorder) FindHealthCheckById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHealthCheckById", reflect.TypeOf((*MockStorage)(nil).FindHealthCheckById), id)
}

// FindListenerById mocks base method.
func (m *MockStorage) FindListenerById(id int32) (*domain.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListenerById", id)
	ret0, _ := ret[0].(*domain.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListenerById indicates an expected call of FindListenerById.
func (mr *MockStorageMockRecorder) FindListenerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListenerById", reflect.TypeOf((*MockStorage)(nil).FindListenerById), id)
}

// FindNodeGroupByName mocks base method.
func (m *MockStorage) FindNodeGroupByName(name string) (*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeGroupByName", name)
	ret0, _ := ret[0].(*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeGroupByName indicates an expected call of FindNodeGroupByName.
func (mr *MockStorageMockRecorder) FindNodeGroupByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeGroupByName", reflect.TypeOf((*MockStorage)(nil).FindNodeGroupByName), name)
}

// FindRateLimitByNameAndPriority mocks base method.
func (m *MockStorage) FindRateLimitByNameAndPriority(name string, priority domain.ConfigPriority) (*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRateLimitByNameAndPriority", name, priority)
	ret0, _ := ret[0].(*domain.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRateLimitByNameAndPriority indicates an expected call of FindRateLimitByNameAndPriority.
func (mr *MockStorageMockRecorder) FindRateLimitByNameAndPriority(name, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRateLimitByNameAndPriority", reflect.TypeOf((*MockStorage)(nil).FindRateLimitByNameAndPriority), name, priority)
}

// FindRetryPolicyById mocks base method.
func (m *MockStorage) FindRetryPolicyById(id int32) (*domain.RetryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryPolicyById", id)
	ret0, _ := ret[0].(*domain.RetryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRetryPolicyById indicates an expected call of FindRetryPolicyById.
func (mr *MockStorageMockRecorder) FindRetryPolicyById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryPolicyById", reflect.TypeOf((*MockStorage)(nil).FindRetryPolicyById), id)
}

// FindRouteById mocks base method.
func (m *MockStorage) FindRouteById(id int32) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteById", id)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteById indicates an expected call of FindRouteById.
func (mr *MockStorageMockRecorder) FindRouteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteById", reflect.TypeOf((*MockStorage)(nil).FindRouteById), id)
}

// FindRouteConfigById mocks base method.
func (m *MockStorage) FindRouteConfigById(id int32) (*domain.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRouteConfigById", id)
	ret0, _ := ret[0].(*domain.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteConfigById indicates an expected call of FindRouteConfigById.
func (mr *MockStorageMockRecorder) FindRouteConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteConfigById", reflect.TypeOf((*MockStorage)(nil).FindRouteConfigById), id)
}

// FindStatefulSessionById mocks base method.
func (m *MockStorage) FindStatefulSessionById(id int32) (*domain.StatefulSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatefulSessionById", id)
	ret0, _ := ret[0].(*domain.StatefulSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatefulSessionById indicates an expected call of FindStatefulSessionById.
func (mr *MockStorageMockRecorder) FindStatefulSessionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatefulSessionById", reflect.TypeOf((*MockStorage)(nil).FindStatefulSessionById), id)
}

// FindTcpKeepaliveById mocks base method.
func (m *MockStorage) FindTcpKeepaliveById(id int32) (*domain.TcpKeepalive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTcpKeepaliveById", id)
	ret0, _ := ret[0].(*domain.TcpKeepalive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTcpKeepaliveById indicates an expected call of FindTcpKeepaliveById.
func (mr *MockStorageMockRecorder) FindTcpKeepaliveById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTcpKeepaliveById", reflect.TypeOf((*MockStorage)(nil).FindTcpKeepaliveById), id)
}

// FindThresholdById mocks base method.
func (m *MockStorage) FindThresholdById(id int32) (*domain.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindThresholdById", id)
	ret0, _ := ret[0].(*domain.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindThresholdById indicates an expected call of FindThresholdById.
func (mr *MockStorageMockRecorder) FindThresholdById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindThresholdById", reflect.TypeOf((*MockStorage)(nil).FindThresholdById), id)
}

// FindTlsConfigById mocks base method.
func (m *MockStorage) FindTlsConfigById(id int32) (*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigById", id)
	ret0, _ := ret[0].(*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigById indicates an expected call of FindTlsConfigById.
func (mr *MockStorageMockRecorder) FindTlsConfigById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigById", reflect.TypeOf((*MockStorage)(nil).FindTlsConfigById), id)
}

// FindTlsConfigByIdAndNodeGroupName mocks base method.
func (m *MockStorage) FindTlsConfigByIdAndNodeGroupName(tlsConfigId int32, nodeGroupName string) (*domain.TlsConfigsNodeGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTlsConfigByIdAndNodeGroupName", tlsConfigId, nodeGroupName)
	ret0, _ := ret[0].(*domain.TlsConfigsNodeGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTlsConfigByIdAndNodeGroupName indicates an expected call of FindTlsConfigByIdAndNodeGroupName.
func (mr *MockStorageMockRecorder) FindTlsConfigByIdAndNodeGroupName(tlsConfigId, nodeGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTlsConfigByIdAndNodeGroupName", reflect.TypeOf((*MockStorage)(nil).FindTlsConfigByIdAndNodeGroupName), tlsConfigId, nodeGroupName)
}

// FindVirtualHostById mocks base method.
func (m *MockStorage) FindVirtualHostById(id int32) (*domain.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualHostById", id)
	ret0, _ := ret[0].(*domain.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualHostById indicates an expected call of FindVirtualHostById.
func (mr *MockStorageMockRecorder) FindVirtualHostById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualHostById", reflect.TypeOf((*MockStorage)(nil).FindVirtualHostById), id)
}

// FindWasmFilterById mocks base method.
func (m *MockStorage) FindWasmFilterById(id int32) (*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilterById", id)
	ret0, _ := ret[0].(*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilterById indicates an expected call of FindWasmFilterById.
func (mr *MockStorageMockRecorder) FindWasmFilterById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilterById", reflect.TypeOf((*MockStorage)(nil).FindWasmFilterById), id)
}

// FindWasmFilters mocks base method.
func (m *MockStorage) FindWasmFilters() ([]*domain.WasmFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWasmFilters")
	ret0, _ := ret[0].([]*domain.WasmFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWasmFilters indicates an expected call of FindWasmFilters.
func (mr *MockStorageMockRecorder) FindWasmFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWasmFilters", reflect.TypeOf((*MockStorage)(nil).FindWasmFilters))
}

// Generate mocks base method.
func (m *MockStorage) Generate(uniqEntity domain.Unique) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", uniqEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockStorageMockRecorder) Generate(uniqEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockStorage)(nil).Generate), uniqEntity)
}

// Migrate mocks base method.
func (m *MockStorage) Migrate(ctx context.Context, db *bun.DB, migrations *migrate.Migrations) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, db, migrations)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockStorageMockRecorder) Migrate(ctx, db, migrations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockStorage)(nil).Migrate), ctx, db, migrations)
}

// SaveCluster mocks base method.
func (m *MockStorage) SaveCluster(cluster *domain.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCluster", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCluster indicates an expected call of SaveCluster.
func (mr *MockStorageMockRecorder) SaveCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCluster", reflect.TypeOf((*MockStorage)(nil).SaveCluster), cluster)
}

// SaveNamespace mocks base method.
func (m *MockStorage) SaveNamespace(namespace *domain.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNamespace indicates an expected call of SaveNamespace.
func (mr *MockStorageMockRecorder) SaveNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNamespace", reflect.TypeOf((*MockStorage)(nil).SaveNamespace), namespace)
}

// UpdateNamespaceByOldNamespace mocks base method.
func (m *MockStorage) UpdateNamespaceByOldNamespace(namespace *domain.Namespace, oldNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceByOldNamespace", namespace, oldNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespaceByOldNamespace indicates an expected call of UpdateNamespaceByOldNamespace.
func (mr *MockStorageMockRecorder) UpdateNamespaceByOldNamespace(namespace, oldNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceByOldNamespace", reflect.TypeOf((*MockStorage)(nil).UpdateNamespaceByOldNamespace), namespace, oldNamespace)
}

// UpdateVirtualHostDomainByOldDomain mocks base method.
func (m *MockStorage) UpdateVirtualHostDomainByOldDomain(domain *domain.VirtualHostDomain, oldDomain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualHostDomainByOldDomain", domain, oldDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualHostDomainByOldDomain indicates an expected call of UpdateVirtualHostDomainByOldDomain.
func (mr *MockStorageMockRecorder) UpdateVirtualHostDomainByOldDomain(domain, oldDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualHostDomainByOldDomain", reflect.TypeOf((*MockStorage)(nil).UpdateVirtualHostDomainByOldDomain), domain, oldDomain)
}

// WithTx mocks base method.
func (m *MockStorage) WithTx(f func(*bun.Conn) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockStorageMockRecorder) WithTx(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockStorage)(nil).WithTx), f)
}
