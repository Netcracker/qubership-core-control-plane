// Code generated by MockGen. DO NOT EDIT.
// Source: ../../services/httpFilter/extAuthz/service.go

// Package mock_extAuthz is a generated GoMock package.
package mock_extAuthz

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/netcracker/qubership-core-control-plane/control-plane/v2/restcontrollers/dto"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockService) Apply(ctx context.Context, extAuthz dto.ExtAuthz, gateways ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, extAuthz}
	for _, a := range gateways {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockServiceMockRecorder) Apply(ctx, extAuthz interface{}, gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, extAuthz}, gateways...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockService)(nil).Apply), varargs...)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, extAuthz dto.ExtAuthz, gateways ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, extAuthz}
	for _, a := range gateways {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, extAuthz interface{}, gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, extAuthz}, gateways...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, gateway string) (*dto.ExtAuthz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, gateway)
	ret0, _ := ret[0].(*dto.ExtAuthz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, gateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, gateway)
}

// ValidateApply mocks base method.
func (m *MockService) ValidateApply(ctx context.Context, extAuthz dto.ExtAuthz, gateways ...string) (bool, string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, extAuthz}
	for _, a := range gateways {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateApply", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateApply indicates an expected call of ValidateApply.
func (mr *MockServiceMockRecorder) ValidateApply(ctx, extAuthz interface{}, gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, extAuthz}, gateways...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApply", reflect.TypeOf((*MockService)(nil).ValidateApply), varargs...)
}

// ValidateDelete mocks base method.
func (m *MockService) ValidateDelete(ctx context.Context, extAuthz dto.ExtAuthz, gateways ...string) (bool, string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, extAuthz}
	for _, a := range gateways {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateDelete", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateDelete indicates an expected call of ValidateDelete.
func (mr *MockServiceMockRecorder) ValidateDelete(ctx, extAuthz interface{}, gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, extAuthz}, gateways...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDelete", reflect.TypeOf((*MockService)(nil).ValidateDelete), varargs...)
}
