// Code generated by MockGen. DO NOT EDIT.
// Source: ../../services/route/registration.go

// Package mock_route is a generated GoMock package.
package mock_route

import (
	context "context"
	dao "github.com/netcracker/qubership-core-control-plane/control-plane/v2/dao"
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClusterRegistrationService is a mock of ClusterRegistrationService interface.
type MockClusterRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRegistrationServiceMockRecorder
}

// MockClusterRegistrationServiceMockRecorder is the mock recorder for MockClusterRegistrationService.
type MockClusterRegistrationServiceMockRecorder struct {
	mock *MockClusterRegistrationService
}

// NewMockClusterRegistrationService creates a new mock instance.
func NewMockClusterRegistrationService(ctrl *gomock.Controller) *MockClusterRegistrationService {
	mock := &MockClusterRegistrationService{ctrl: ctrl}
	mock.recorder = &MockClusterRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRegistrationService) EXPECT() *MockClusterRegistrationServiceMockRecorder {
	return m.recorder
}

// SaveCluster mocks base method.
func (m *MockClusterRegistrationService) SaveCluster(ctx context.Context, dao dao.Repository, clusterToSave domain.Cluster, tlsConfigName string, clusterNodeGroups ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dao, clusterToSave, tlsConfigName}
	for _, a := range clusterNodeGroups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCluster indicates an expected call of SaveCluster.
func (mr *MockClusterRegistrationServiceMockRecorder) SaveCluster(ctx, dao, clusterToSave, tlsConfigName interface{}, clusterNodeGroups ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dao, clusterToSave, tlsConfigName}, clusterNodeGroups...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCluster", reflect.TypeOf((*MockClusterRegistrationService)(nil).SaveCluster), varargs...)
}
