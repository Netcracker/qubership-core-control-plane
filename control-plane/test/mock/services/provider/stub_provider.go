// Code generated by MockGen. DO NOT EDIT.
// Source: ../../services/provider/provider.go

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	domain "github.com/netcracker/qubership-core-control-plane/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTlsService is a mock of TlsService interface.
type MockTlsService struct {
	ctrl     *gomock.Controller
	recorder *MockTlsServiceMockRecorder
}

// MockTlsServiceMockRecorder is the mock recorder for MockTlsService.
type MockTlsServiceMockRecorder struct {
	mock *MockTlsService
}

// NewMockTlsService creates a new mock instance.
func NewMockTlsService(ctrl *gomock.Controller) *MockTlsService {
	mock := &MockTlsService{ctrl: ctrl}
	mock.recorder = &MockTlsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTlsService) EXPECT() *MockTlsServiceMockRecorder {
	return m.recorder
}

// GetGlobalTlsConfigs mocks base method.
func (m *MockTlsService) GetGlobalTlsConfigs(cluster *domain.Cluster, affectedNodeGroups ...string) ([]*domain.TlsConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{cluster}
	for _, a := range affectedNodeGroups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalTlsConfigs", varargs...)
	ret0, _ := ret[0].([]*domain.TlsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalTlsConfigs indicates an expected call of GetGlobalTlsConfigs.
func (mr *MockTlsServiceMockRecorder) GetGlobalTlsConfigs(cluster interface{}, affectedNodeGroups ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cluster}, affectedNodeGroups...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalTlsConfigs", reflect.TypeOf((*MockTlsService)(nil).GetGlobalTlsConfigs), varargs...)
}
