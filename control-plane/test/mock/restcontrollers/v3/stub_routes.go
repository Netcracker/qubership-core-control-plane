// Code generated by MockGen. DO NOT EDIT.
// Source: ../../restcontrollers/v3/routes.go

// Package mock_v3 is a generated GoMock package.
package mock_v3

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	dto "github.com/netcracker/qubership-core-control-plane/control-plane/v2/restcontrollers/dto"
	errors "github.com/pkg/errors"
)

// MockRouteService is a mock of RouteService interface.
type MockRouteService struct {
	ctrl     *gomock.Controller
	recorder *MockRouteServiceMockRecorder
}

// MockRouteServiceMockRecorder is the mock recorder for MockRouteService.
type MockRouteServiceMockRecorder struct {
	mock *MockRouteService
}

// NewMockRouteService creates a new mock instance.
func NewMockRouteService(ctrl *gomock.Controller) *MockRouteService {
	mock := &MockRouteService{ctrl: ctrl}
	mock.recorder = &MockRouteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteService) EXPECT() *MockRouteServiceMockRecorder {
	return m.recorder
}

// CreateVirtualService mocks base method.
func (m *MockRouteService) CreateVirtualService(ctx context.Context, nodeGroup string, request dto.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualService", ctx, nodeGroup, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualService indicates an expected call of CreateVirtualService.
func (mr *MockRouteServiceMockRecorder) CreateVirtualService(ctx, nodeGroup, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockRouteService)(nil).CreateVirtualService), ctx, nodeGroup, request)
}

// DeleteDomains mocks base method.
func (m *MockRouteService) DeleteDomains(ctx context.Context, request []dto.DomainDeleteRequestV3) ([]*domain.VirtualHostDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomains", ctx, request)
	ret0, _ := ret[0].([]*domain.VirtualHostDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomains indicates an expected call of DeleteDomains.
func (mr *MockRouteServiceMockRecorder) DeleteDomains(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomains", reflect.TypeOf((*MockRouteService)(nil).DeleteDomains), ctx, request)
}

// DeleteEndpoints mocks base method.
func (m *MockRouteService) DeleteEndpoints(ctx context.Context, endpointsToDelete []domain.Endpoint, version string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoints", ctx, endpointsToDelete, version)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpoints indicates an expected call of DeleteEndpoints.
func (mr *MockRouteServiceMockRecorder) DeleteEndpoints(ctx, endpointsToDelete, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoints", reflect.TypeOf((*MockRouteService)(nil).DeleteEndpoints), ctx, endpointsToDelete, version)
}

// DeleteRouteByUUID mocks base method.
func (m *MockRouteService) DeleteRouteByUUID(ctx context.Context, routeUUID string) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteByUUID", ctx, routeUUID)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteByUUID indicates an expected call of DeleteRouteByUUID.
func (mr *MockRouteServiceMockRecorder) DeleteRouteByUUID(ctx, routeUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteByUUID", reflect.TypeOf((*MockRouteService)(nil).DeleteRouteByUUID), ctx, routeUUID)
}

// DeleteRoutes mocks base method.
func (m *MockRouteService) DeleteRoutes(ctx context.Context, request []dto.RouteDeleteRequestV3) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutes", ctx, request)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutes indicates an expected call of DeleteRoutes.
func (mr *MockRouteServiceMockRecorder) DeleteRoutes(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutes", reflect.TypeOf((*MockRouteService)(nil).DeleteRoutes), ctx, request)
}

// DeleteVirtualService mocks base method.
func (m *MockRouteService) DeleteVirtualService(ctx context.Context, nodeGroup, virtualService string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualService", ctx, nodeGroup, virtualService)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService.
func (mr *MockRouteServiceMockRecorder) DeleteVirtualService(ctx, nodeGroup, virtualService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockRouteService)(nil).DeleteVirtualService), ctx, nodeGroup, virtualService)
}

// DeleteVirtualServiceRoutes mocks base method.
func (m *MockRouteService) DeleteVirtualServiceRoutes(ctx context.Context, rawPrefixes []string, nodeGroup, virtualService, namespace, version string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualServiceRoutes", ctx, rawPrefixes, nodeGroup, virtualService, namespace, version)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualServiceRoutes indicates an expected call of DeleteVirtualServiceRoutes.
func (mr *MockRouteServiceMockRecorder) DeleteVirtualServiceRoutes(ctx, rawPrefixes, nodeGroup, virtualService, namespace, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualServiceRoutes", reflect.TypeOf((*MockRouteService)(nil).DeleteVirtualServiceRoutes), ctx, rawPrefixes, nodeGroup, virtualService, namespace, version)
}

// GetVirtualService mocks base method.
func (m *MockRouteService) GetVirtualService(nodeGroup, virtualService string) (dto.VirtualServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualService", nodeGroup, virtualService)
	ret0, _ := ret[0].(dto.VirtualServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualService indicates an expected call of GetVirtualService.
func (mr *MockRouteServiceMockRecorder) GetVirtualService(nodeGroup, virtualService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualService", reflect.TypeOf((*MockRouteService)(nil).GetVirtualService), nodeGroup, virtualService)
}

// RegisterRoutingConfig mocks base method.
func (m *MockRouteService) RegisterRoutingConfig(ctx context.Context, request dto.RoutingConfigRequestV3) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRoutingConfig", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRoutingConfig indicates an expected call of RegisterRoutingConfig.
func (mr *MockRouteServiceMockRecorder) RegisterRoutingConfig(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutingConfig", reflect.TypeOf((*MockRouteService)(nil).RegisterRoutingConfig), ctx, request)
}

// UpdateVirtualService mocks base method.
func (m *MockRouteService) UpdateVirtualService(ctx context.Context, nodeGroup, virtualServiceName string, virtualService dto.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualService", ctx, nodeGroup, virtualServiceName, virtualService)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService.
func (mr *MockRouteServiceMockRecorder) UpdateVirtualService(ctx, nodeGroup, virtualServiceName, virtualService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockRouteService)(nil).UpdateVirtualService), ctx, nodeGroup, virtualServiceName, virtualService)
}

// MockRequestValidator is a mock of RequestValidator interface.
type MockRequestValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRequestValidatorMockRecorder
}

// MockRequestValidatorMockRecorder is the mock recorder for MockRequestValidator.
type MockRequestValidatorMockRecorder struct {
	mock *MockRequestValidator
}

// NewMockRequestValidator creates a new mock instance.
func NewMockRequestValidator(ctrl *gomock.Controller) *MockRequestValidator {
	mock := &MockRequestValidator{ctrl: ctrl}
	mock.recorder = &MockRequestValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestValidator) EXPECT() *MockRequestValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockRequestValidator) Validate(request dto.RoutingConfigRequestV3) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockRequestValidatorMockRecorder) Validate(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRequestValidator)(nil).Validate), request)
}

// ValidateDomainDeleteRequestV3 mocks base method.
func (m *MockRequestValidator) ValidateDomainDeleteRequestV3(req []dto.DomainDeleteRequestV3) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDomainDeleteRequestV3", req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateDomainDeleteRequestV3 indicates an expected call of ValidateDomainDeleteRequestV3.
func (mr *MockRequestValidatorMockRecorder) ValidateDomainDeleteRequestV3(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDomainDeleteRequestV3", reflect.TypeOf((*MockRequestValidator)(nil).ValidateDomainDeleteRequestV3), req)
}

// ValidateRouteStatefulSession mocks base method.
func (m *MockRequestValidator) ValidateRouteStatefulSession(request dto.StatefulSession) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRouteStatefulSession", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateRouteStatefulSession indicates an expected call of ValidateRouteStatefulSession.
func (mr *MockRequestValidatorMockRecorder) ValidateRouteStatefulSession(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRouteStatefulSession", reflect.TypeOf((*MockRequestValidator)(nil).ValidateRouteStatefulSession), request)
}

// ValidateStatefulSession mocks base method.
func (m *MockRequestValidator) ValidateStatefulSession(req dto.StatefulSession) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStatefulSession", req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateStatefulSession indicates an expected call of ValidateStatefulSession.
func (mr *MockRequestValidatorMockRecorder) ValidateStatefulSession(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStatefulSession", reflect.TypeOf((*MockRequestValidator)(nil).ValidateStatefulSession), req)
}

// ValidateVirtualService mocks base method.
func (m *MockRequestValidator) ValidateVirtualService(req dto.VirtualService, gateways []string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVirtualService", req, gateways)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateVirtualService indicates an expected call of ValidateVirtualService.
func (mr *MockRequestValidatorMockRecorder) ValidateVirtualService(req, gateways interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVirtualService", reflect.TypeOf((*MockRequestValidator)(nil).ValidateVirtualService), req, gateways)
}

// ValidateVirtualServiceUpdate mocks base method.
func (m *MockRequestValidator) ValidateVirtualServiceUpdate(req dto.VirtualService, nodeGroup string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVirtualServiceUpdate", req, nodeGroup)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ValidateVirtualServiceUpdate indicates an expected call of ValidateVirtualServiceUpdate.
func (mr *MockRequestValidatorMockRecorder) ValidateVirtualServiceUpdate(req, nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVirtualServiceUpdate", reflect.TypeOf((*MockRequestValidator)(nil).ValidateVirtualServiceUpdate), req, nodeGroup)
}

// MockstackTracer is a mock of stackTracer interface.
type MockstackTracer struct {
	ctrl     *gomock.Controller
	recorder *MockstackTracerMockRecorder
}

// MockstackTracerMockRecorder is the mock recorder for MockstackTracer.
type MockstackTracerMockRecorder struct {
	mock *MockstackTracer
}

// NewMockstackTracer creates a new mock instance.
func NewMockstackTracer(ctrl *gomock.Controller) *MockstackTracer {
	mock := &MockstackTracer{ctrl: ctrl}
	mock.recorder = &MockstackTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstackTracer) EXPECT() *MockstackTracerMockRecorder {
	return m.recorder
}

// StackTrace mocks base method.
func (m *MockstackTracer) StackTrace() errors.StackTrace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackTrace")
	ret0, _ := ret[0].(errors.StackTrace)
	return ret0
}

// StackTrace indicates an expected call of StackTrace.
func (mr *MockstackTracerMockRecorder) StackTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackTrace", reflect.TypeOf((*MockstackTracer)(nil).StackTrace))
}

// Mockunwrapper is a mock of unwrapper interface.
type Mockunwrapper struct {
	ctrl     *gomock.Controller
	recorder *MockunwrapperMockRecorder
}

// MockunwrapperMockRecorder is the mock recorder for Mockunwrapper.
type MockunwrapperMockRecorder struct {
	mock *Mockunwrapper
}

// NewMockunwrapper creates a new mock instance.
func NewMockunwrapper(ctrl *gomock.Controller) *Mockunwrapper {
	mock := &Mockunwrapper{ctrl: ctrl}
	mock.recorder = &MockunwrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockunwrapper) EXPECT() *MockunwrapperMockRecorder {
	return m.recorder
}

// Unwrap mocks base method.
func (m *Mockunwrapper) Unwrap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockunwrapperMockRecorder) Unwrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*Mockunwrapper)(nil).Unwrap))
}
