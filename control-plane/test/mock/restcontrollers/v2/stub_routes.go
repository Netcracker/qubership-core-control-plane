// Code generated by MockGen. DO NOT EDIT.
// Source: routes.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	dto "github.com/netcracker/qubership-core-control-plane/control-plane/v2/restcontrollers/dto"
	configresources "github.com/netcracker/qubership-core-control-plane/control-plane/v2/services/configresources"
)

// MockRouteService is a mock of RouteService interface.
type MockRouteService struct {
	ctrl     *gomock.Controller
	recorder *MockRouteServiceMockRecorder
}

// MockRouteServiceMockRecorder is the mock recorder for MockRouteService.
type MockRouteServiceMockRecorder struct {
	mock *MockRouteService
}

// NewMockRouteService creates a new mock instance.
func NewMockRouteService(ctrl *gomock.Controller) *MockRouteService {
	mock := &MockRouteService{ctrl: ctrl}
	mock.recorder = &MockRouteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteService) EXPECT() *MockRouteServiceMockRecorder {
	return m.recorder
}

// DeleteEndpoints mocks base method.
func (m *MockRouteService) DeleteEndpoints(ctx context.Context, endpointsToDelete []domain.Endpoint, version string) ([]*domain.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoints", ctx, endpointsToDelete, version)
	ret0, _ := ret[0].([]*domain.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpoints indicates an expected call of DeleteEndpoints.
func (mr *MockRouteServiceMockRecorder) DeleteEndpoints(ctx, endpointsToDelete, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoints", reflect.TypeOf((*MockRouteService)(nil).DeleteEndpoints), ctx, endpointsToDelete, version)
}

// DeleteRouteByUUID mocks base method.
func (m *MockRouteService) DeleteRouteByUUID(ctx context.Context, routeUUID string) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteByUUID", ctx, routeUUID)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteByUUID indicates an expected call of DeleteRouteByUUID.
func (mr *MockRouteServiceMockRecorder) DeleteRouteByUUID(ctx, routeUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteByUUID", reflect.TypeOf((*MockRouteService)(nil).DeleteRouteByUUID), ctx, routeUUID)
}

// DeleteRoutes mocks base method.
func (m *MockRouteService) DeleteRoutes(ctx context.Context, nodeGroup, namespace, version string, prefixes ...string) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, nodeGroup, namespace, version}
	for _, a := range prefixes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoutes", varargs...)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutes indicates an expected call of DeleteRoutes.
func (mr *MockRouteServiceMockRecorder) DeleteRoutes(ctx, nodeGroup, namespace, version interface{}, prefixes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, nodeGroup, namespace, version}, prefixes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutes", reflect.TypeOf((*MockRouteService)(nil).DeleteRoutes), varargs...)
}

// GetNodeGroups mocks base method.
func (m *MockRouteService) GetNodeGroups() ([]*domain.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeGroups")
	ret0, _ := ret[0].([]*domain.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeGroups indicates an expected call of GetNodeGroups.
func (mr *MockRouteServiceMockRecorder) GetNodeGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeGroups", reflect.TypeOf((*MockRouteService)(nil).GetNodeGroups))
}

// GetRegisterRoutesResource mocks base method.
func (m *MockRouteService) GetRegisterRoutesResource() configresources.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterRoutesResource")
	ret0, _ := ret[0].(configresources.Resource)
	return ret0
}

// GetRegisterRoutesResource indicates an expected call of GetRegisterRoutesResource.
func (mr *MockRouteServiceMockRecorder) GetRegisterRoutesResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterRoutesResource", reflect.TypeOf((*MockRouteService)(nil).GetRegisterRoutesResource))
}

// RegisterRoutes mocks base method.
func (m *MockRouteService) RegisterRoutes(ctx context.Context, requests []dto.RouteRegistrationRequest, nodeGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRoutes", ctx, requests, nodeGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRoutes indicates an expected call of RegisterRoutes.
func (mr *MockRouteServiceMockRecorder) RegisterRoutes(ctx, requests, nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutes", reflect.TypeOf((*MockRouteService)(nil).RegisterRoutes), ctx, requests, nodeGroup)
}

// MockRequestValidator is a mock of RequestValidator interface.
type MockRequestValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRequestValidatorMockRecorder
}

// MockRequestValidatorMockRecorder is the mock recorder for MockRequestValidator.
type MockRequestValidatorMockRecorder struct {
	mock *MockRequestValidator
}

// NewMockRequestValidator creates a new mock instance.
func NewMockRequestValidator(ctrl *gomock.Controller) *MockRequestValidator {
	mock := &MockRequestValidator{ctrl: ctrl}
	mock.recorder = &MockRequestValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestValidator) EXPECT() *MockRequestValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockRequestValidator) Validate(requests []dto.RouteRegistrationRequest, nodeGroup string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", requests, nodeGroup)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockRequestValidatorMockRecorder) Validate(requests, nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRequestValidator)(nil).Validate), requests, nodeGroup)
}
