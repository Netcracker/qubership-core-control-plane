// Code generated by MockGen. DO NOT EDIT.
// Source: ../../envoy/cache/builder/listener/listener.go

// Package mock_listener is a generated GoMock package.
package mock_listener

import (
	reflect "reflect"

	listenerv3 "github.com/envoyproxy/go-control-plane/envoy/config/listener/v3"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
)

// MockListenerBuilder is a mock of ListenerBuilder interface.
type MockListenerBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockListenerBuilderMockRecorder
}

// MockListenerBuilderMockRecorder is the mock recorder for MockListenerBuilder.
type MockListenerBuilderMockRecorder struct {
	mock *MockListenerBuilder
}

// NewMockListenerBuilder creates a new mock instance.
func NewMockListenerBuilder(ctrl *gomock.Controller) *MockListenerBuilder {
	mock := &MockListenerBuilder{ctrl: ctrl}
	mock.recorder = &MockListenerBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerBuilder) EXPECT() *MockListenerBuilderMockRecorder {
	return m.recorder
}

// BuildListener mocks base method.
func (m *MockListenerBuilder) BuildListener(listener *domain.Listener, namespaceMapping string, withTls bool) (*listenerv3.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildListener", listener, namespaceMapping, withTls)
	ret0, _ := ret[0].(*listenerv3.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildListener indicates an expected call of BuildListener.
func (mr *MockListenerBuilderMockRecorder) BuildListener(listener, namespaceMapping, withTls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildListener", reflect.TypeOf((*MockListenerBuilder)(nil).BuildListener), listener, namespaceMapping, withTls)
}
