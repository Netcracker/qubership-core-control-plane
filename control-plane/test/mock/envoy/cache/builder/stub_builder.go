// Code generated by MockGen. DO NOT EDIT.
// Source: ../../envoy/cache/builder/builder.go

// Package mock_builder is a generated GoMock package.
package mock_builder

import (
	domain "github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	reflect "reflect"

	clusterv3 "github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3"
	listenerv3 "github.com/envoyproxy/go-control-plane/envoy/config/listener/v3"
	routev3 "github.com/envoyproxy/go-control-plane/envoy/config/route/v3"
	runtimev3 "github.com/envoyproxy/go-control-plane/envoy/service/runtime/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockEnvoyConfigBuilder is a mock of EnvoyConfigBuilder interface.
type MockEnvoyConfigBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyConfigBuilderMockRecorder
}

// MockEnvoyConfigBuilderMockRecorder is the mock recorder for MockEnvoyConfigBuilder.
type MockEnvoyConfigBuilderMockRecorder struct {
	mock *MockEnvoyConfigBuilder
}

// NewMockEnvoyConfigBuilder creates a new mock instance.
func NewMockEnvoyConfigBuilder(ctrl *gomock.Controller) *MockEnvoyConfigBuilder {
	mock := &MockEnvoyConfigBuilder{ctrl: ctrl}
	mock.recorder = &MockEnvoyConfigBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyConfigBuilder) EXPECT() *MockEnvoyConfigBuilderMockRecorder {
	return m.recorder
}

// BuildCluster mocks base method.
func (m *MockEnvoyConfigBuilder) BuildCluster(nodeGroup string, clusterEntity *domain.Cluster) (*clusterv3.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCluster", nodeGroup, clusterEntity)
	ret0, _ := ret[0].(*clusterv3.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildCluster indicates an expected call of BuildCluster.
func (mr *MockEnvoyConfigBuilderMockRecorder) BuildCluster(nodeGroup, clusterEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCluster", reflect.TypeOf((*MockEnvoyConfigBuilder)(nil).BuildCluster), nodeGroup, clusterEntity)
}

// BuildListener mocks base method.
func (m *MockEnvoyConfigBuilder) BuildListener(listener *domain.Listener, namespaceMapping string, withTls bool) (*listenerv3.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildListener", listener, namespaceMapping, withTls)
	ret0, _ := ret[0].(*listenerv3.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildListener indicates an expected call of BuildListener.
func (mr *MockEnvoyConfigBuilderMockRecorder) BuildListener(listener, namespaceMapping, withTls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildListener", reflect.TypeOf((*MockEnvoyConfigBuilder)(nil).BuildListener), listener, namespaceMapping, withTls)
}

// BuildRouteConfig mocks base method.
func (m *MockEnvoyConfigBuilder) BuildRouteConfig(routeConfig *domain.RouteConfiguration) (*routev3.RouteConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRouteConfig", routeConfig)
	ret0, _ := ret[0].(*routev3.RouteConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRouteConfig indicates an expected call of BuildRouteConfig.
func (mr *MockEnvoyConfigBuilderMockRecorder) BuildRouteConfig(routeConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRouteConfig", reflect.TypeOf((*MockEnvoyConfigBuilder)(nil).BuildRouteConfig), routeConfig)
}

// BuildRuntime mocks base method.
func (m *MockEnvoyConfigBuilder) BuildRuntime(arg0, runtimeName string) (*runtimev3.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRuntime", arg0, runtimeName)
	ret0, _ := ret[0].(*runtimev3.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRuntime indicates an expected call of BuildRuntime.
func (mr *MockEnvoyConfigBuilderMockRecorder) BuildRuntime(arg0, runtimeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRuntime", reflect.TypeOf((*MockEnvoyConfigBuilder)(nil).BuildRuntime), arg0, runtimeName)
}

// RegisterGateway mocks base method.
func (m *MockEnvoyConfigBuilder) RegisterGateway(gateway *domain.NodeGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterGateway", gateway)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterGateway indicates an expected call of RegisterGateway.
func (mr *MockEnvoyConfigBuilderMockRecorder) RegisterGateway(gateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGateway", reflect.TypeOf((*MockEnvoyConfigBuilder)(nil).RegisterGateway), gateway)
}
