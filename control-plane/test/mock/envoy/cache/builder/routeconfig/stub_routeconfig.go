// Code generated by MockGen. DO NOT EDIT.
// Source: ../../envoy/cache/builder/routeconfig/routeconfig.go

// Package mock_routeconfig is a generated GoMock package.
package mock_routeconfig

import (
	domain "github.com/netcracker/qubership-core-control-plane/domain"
	reflect "reflect"

	routev3 "github.com/envoyproxy/go-control-plane/envoy/config/route/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockVirtualHostBuilder is a mock of VirtualHostBuilder interface.
type MockVirtualHostBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostBuilderMockRecorder
}

// MockVirtualHostBuilderMockRecorder is the mock recorder for MockVirtualHostBuilder.
type MockVirtualHostBuilderMockRecorder struct {
	mock *MockVirtualHostBuilder
}

// NewMockVirtualHostBuilder creates a new mock instance.
func NewMockVirtualHostBuilder(ctrl *gomock.Controller) *MockVirtualHostBuilder {
	mock := &MockVirtualHostBuilder{ctrl: ctrl}
	mock.recorder = &MockVirtualHostBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostBuilder) EXPECT() *MockVirtualHostBuilderMockRecorder {
	return m.recorder
}

// BuildVirtualHosts mocks base method.
func (m *MockVirtualHostBuilder) BuildVirtualHosts(routeConfig *domain.RouteConfiguration) ([]*routev3.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVirtualHosts", routeConfig)
	ret0, _ := ret[0].([]*routev3.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildVirtualHosts indicates an expected call of BuildVirtualHosts.
func (mr *MockVirtualHostBuilderMockRecorder) BuildVirtualHosts(routeConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVirtualHosts", reflect.TypeOf((*MockVirtualHostBuilder)(nil).BuildVirtualHosts), routeConfig)
}

// MockRouteBuilder is a mock of RouteBuilder interface.
type MockRouteBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBuilderMockRecorder
}

// MockRouteBuilderMockRecorder is the mock recorder for MockRouteBuilder.
type MockRouteBuilderMockRecorder struct {
	mock *MockRouteBuilder
}

// NewMockRouteBuilder creates a new mock instance.
func NewMockRouteBuilder(ctrl *gomock.Controller) *MockRouteBuilder {
	mock := &MockRouteBuilder{ctrl: ctrl}
	mock.recorder = &MockRouteBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBuilder) EXPECT() *MockRouteBuilderMockRecorder {
	return m.recorder
}

// BuildRoute mocks base method.
func (m *MockRouteBuilder) BuildRoute(route *domain.Route) (*routev3.Route, *domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRoute", route)
	ret0, _ := ret[0].(*routev3.Route)
	ret1, _ := ret[1].(*domain.RateLimit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildRoute indicates an expected call of BuildRoute.
func (mr *MockRouteBuilderMockRecorder) BuildRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRoute", reflect.TypeOf((*MockRouteBuilder)(nil).BuildRoute), route)
}

// BuildRoutes mocks base method.
func (m *MockRouteBuilder) BuildRoutes(routes []*domain.Route) ([]*routev3.Route, map[string]*domain.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRoutes", routes)
	ret0, _ := ret[0].([]*routev3.Route)
	ret1, _ := ret[1].(map[string]*domain.RateLimit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildRoutes indicates an expected call of BuildRoutes.
func (mr *MockRouteBuilderMockRecorder) BuildRoutes(routes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRoutes", reflect.TypeOf((*MockRouteBuilder)(nil).BuildRoutes), routes)
}
