// Code generated by MockGen. DO NOT EDIT.
// Source: ../../envoy/cache/action/factory.go

// Package mock_action is a generated GoMock package.
package mock_action

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	action "github.com/netcracker/qubership-core-control-plane/control-plane/v2/envoy/cache/action"
)

// MockUpdateActionFactory is a mock of UpdateActionFactory interface.
type MockUpdateActionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateActionFactoryMockRecorder
}

// MockUpdateActionFactoryMockRecorder is the mock recorder for MockUpdateActionFactory.
type MockUpdateActionFactoryMockRecorder struct {
	mock *MockUpdateActionFactory
}

// NewMockUpdateActionFactory creates a new mock instance.
func NewMockUpdateActionFactory(ctrl *gomock.Controller) *MockUpdateActionFactory {
	mock := &MockUpdateActionFactory{ctrl: ctrl}
	mock.recorder = &MockUpdateActionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateActionFactory) EXPECT() *MockUpdateActionFactoryMockRecorder {
	return m.recorder
}

// ClusterDelete mocks base method.
func (m *MockUpdateActionFactory) ClusterDelete(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDelete", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// ClusterDelete indicates an expected call of ClusterDelete.
func (mr *MockUpdateActionFactoryMockRecorder) ClusterDelete(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelete", reflect.TypeOf((*MockUpdateActionFactory)(nil).ClusterDelete), nodeGroup, version, entity)
}

// ClusterDeleteAction mocks base method.
func (m *MockUpdateActionFactory) ClusterDeleteAction(version string, entity interface{}) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDeleteAction", version, entity)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// ClusterDeleteAction indicates an expected call of ClusterDeleteAction.
func (mr *MockUpdateActionFactoryMockRecorder) ClusterDeleteAction(version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDeleteAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).ClusterDeleteAction), version, entity)
}

// ClusterUpdate mocks base method.
func (m *MockUpdateActionFactory) ClusterUpdate(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterUpdate", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// ClusterUpdate indicates an expected call of ClusterUpdate.
func (mr *MockUpdateActionFactoryMockRecorder) ClusterUpdate(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterUpdate", reflect.TypeOf((*MockUpdateActionFactory)(nil).ClusterUpdate), nodeGroup, version, entity)
}

// ClusterUpdateAction mocks base method.
func (m *MockUpdateActionFactory) ClusterUpdateAction(nodeGroup, version string, entity interface{}) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterUpdateAction", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// ClusterUpdateAction indicates an expected call of ClusterUpdateAction.
func (mr *MockUpdateActionFactoryMockRecorder) ClusterUpdateAction(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterUpdateAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).ClusterUpdateAction), nodeGroup, version, entity)
}

// DeleteAllClustersAction mocks base method.
func (m *MockUpdateActionFactory) DeleteAllClustersAction(version string) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllClustersAction", version)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// DeleteAllClustersAction indicates an expected call of DeleteAllClustersAction.
func (mr *MockUpdateActionFactoryMockRecorder) DeleteAllClustersAction(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllClustersAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).DeleteAllClustersAction), version)
}

// DeleteAllListenersAction mocks base method.
func (m *MockUpdateActionFactory) DeleteAllListenersAction(version string) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllListenersAction", version)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// DeleteAllListenersAction indicates an expected call of DeleteAllListenersAction.
func (mr *MockUpdateActionFactoryMockRecorder) DeleteAllListenersAction(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllListenersAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).DeleteAllListenersAction), version)
}

// DeleteAllRouteConfigsAction mocks base method.
func (m *MockUpdateActionFactory) DeleteAllRouteConfigsAction(version string) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRouteConfigsAction", version)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// DeleteAllRouteConfigsAction indicates an expected call of DeleteAllRouteConfigsAction.
func (mr *MockUpdateActionFactoryMockRecorder) DeleteAllRouteConfigsAction(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRouteConfigsAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).DeleteAllRouteConfigsAction), version)
}

// ListenerDelete mocks base method.
func (m *MockUpdateActionFactory) ListenerDelete(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenerDelete", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// ListenerDelete indicates an expected call of ListenerDelete.
func (mr *MockUpdateActionFactoryMockRecorder) ListenerDelete(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenerDelete", reflect.TypeOf((*MockUpdateActionFactory)(nil).ListenerDelete), nodeGroup, version, entity)
}

// ListenerDeleteAction mocks base method.
func (m *MockUpdateActionFactory) ListenerDeleteAction(version string, entity interface{}) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenerDeleteAction", version, entity)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// ListenerDeleteAction indicates an expected call of ListenerDeleteAction.
func (mr *MockUpdateActionFactoryMockRecorder) ListenerDeleteAction(version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenerDeleteAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).ListenerDeleteAction), version, entity)
}

// ListenerUpdate mocks base method.
func (m *MockUpdateActionFactory) ListenerUpdate(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenerUpdate", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// ListenerUpdate indicates an expected call of ListenerUpdate.
func (mr *MockUpdateActionFactoryMockRecorder) ListenerUpdate(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenerUpdate", reflect.TypeOf((*MockUpdateActionFactory)(nil).ListenerUpdate), nodeGroup, version, entity)
}

// ListenerUpdateAction mocks base method.
func (m *MockUpdateActionFactory) ListenerUpdateAction(version string, entity interface{}) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenerUpdateAction", version, entity)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// ListenerUpdateAction indicates an expected call of ListenerUpdateAction.
func (mr *MockUpdateActionFactoryMockRecorder) ListenerUpdateAction(version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenerUpdateAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).ListenerUpdateAction), version, entity)
}

// RouteConfigDelete mocks base method.
func (m *MockUpdateActionFactory) RouteConfigDelete(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteConfigDelete", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// RouteConfigDelete indicates an expected call of RouteConfigDelete.
func (mr *MockUpdateActionFactoryMockRecorder) RouteConfigDelete(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteConfigDelete", reflect.TypeOf((*MockUpdateActionFactory)(nil).RouteConfigDelete), nodeGroup, version, entity)
}

// RouteConfigDeleteAction mocks base method.
func (m *MockUpdateActionFactory) RouteConfigDeleteAction(version string, entity interface{}) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteConfigDeleteAction", version, entity)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// RouteConfigDeleteAction indicates an expected call of RouteConfigDeleteAction.
func (mr *MockUpdateActionFactoryMockRecorder) RouteConfigDeleteAction(version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteConfigDeleteAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).RouteConfigDeleteAction), version, entity)
}

// RouteConfigUpdate mocks base method.
func (m *MockUpdateActionFactory) RouteConfigUpdate(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteConfigUpdate", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// RouteConfigUpdate indicates an expected call of RouteConfigUpdate.
func (mr *MockUpdateActionFactoryMockRecorder) RouteConfigUpdate(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteConfigUpdate", reflect.TypeOf((*MockUpdateActionFactory)(nil).RouteConfigUpdate), nodeGroup, version, entity)
}

// RouteConfigUpdateAction mocks base method.
func (m *MockUpdateActionFactory) RouteConfigUpdateAction(version string, entity interface{}) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteConfigUpdateAction", version, entity)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// RouteConfigUpdateAction indicates an expected call of RouteConfigUpdateAction.
func (mr *MockUpdateActionFactoryMockRecorder) RouteConfigUpdateAction(version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteConfigUpdateAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).RouteConfigUpdateAction), version, entity)
}

// RuntimeUpdate mocks base method.
func (m *MockUpdateActionFactory) RuntimeUpdate(nodeGroup, version string, entity interface{}) action.GranularEntityUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeUpdate", nodeGroup, version, entity)
	ret0, _ := ret[0].(action.GranularEntityUpdate)
	return ret0
}

// RuntimeUpdate indicates an expected call of RuntimeUpdate.
func (mr *MockUpdateActionFactoryMockRecorder) RuntimeUpdate(nodeGroup, version, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeUpdate", reflect.TypeOf((*MockUpdateActionFactory)(nil).RuntimeUpdate), nodeGroup, version, entity)
}

// RuntimeUpdateAction mocks base method.
func (m *MockUpdateActionFactory) RuntimeUpdateAction(nodeGroup string) action.SnapshotUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeUpdateAction", nodeGroup)
	ret0, _ := ret[0].(action.SnapshotUpdateAction)
	return ret0
}

// RuntimeUpdateAction indicates an expected call of RuntimeUpdateAction.
func (mr *MockUpdateActionFactoryMockRecorder) RuntimeUpdateAction(nodeGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeUpdateAction", reflect.TypeOf((*MockUpdateActionFactory)(nil).RuntimeUpdateAction), nodeGroup)
}

// MockActionsMap is a mock of ActionsMap interface.
type MockActionsMap struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMapMockRecorder
}

// MockActionsMapMockRecorder is the mock recorder for MockActionsMap.
type MockActionsMapMockRecorder struct {
	mock *MockActionsMap
}

// NewMockActionsMap creates a new mock instance.
func NewMockActionsMap(ctrl *gomock.Controller) *MockActionsMap {
	mock := &MockActionsMap{ctrl: ctrl}
	mock.recorder = &MockActionsMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionsMap) EXPECT() *MockActionsMapMockRecorder {
	return m.recorder
}

// CompositeAction mocks base method.
func (m *MockActionsMap) CompositeAction() *action.CompositeUpdateAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompositeAction")
	ret0, _ := ret[0].(*action.CompositeUpdateAction)
	return ret0
}

// CompositeAction indicates an expected call of CompositeAction.
func (mr *MockActionsMapMockRecorder) CompositeAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompositeAction", reflect.TypeOf((*MockActionsMap)(nil).CompositeAction))
}

// Put mocks base method.
func (m *MockActionsMap) Put(entityType action.EnvoyEntity, granularUpdate *action.GranularEntityUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", entityType, granularUpdate)
}

// Put indicates an expected call of Put.
func (mr *MockActionsMapMockRecorder) Put(entityType, granularUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockActionsMap)(nil).Put), entityType, granularUpdate)
}
