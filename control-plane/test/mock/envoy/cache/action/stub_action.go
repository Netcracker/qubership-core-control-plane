// Code generated by MockGen. DO NOT EDIT.
// Source: ../../envoy/cache/action/action.go

// Package mock_action is a generated GoMock package.
package mock_action

import (
	reflect "reflect"

	cache "github.com/envoyproxy/go-control-plane/pkg/cache/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockSnapshotUpdateAction is a mock of SnapshotUpdateAction interface.
type MockSnapshotUpdateAction struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotUpdateActionMockRecorder
}

// MockSnapshotUpdateActionMockRecorder is the mock recorder for MockSnapshotUpdateAction.
type MockSnapshotUpdateActionMockRecorder struct {
	mock *MockSnapshotUpdateAction
}

// NewMockSnapshotUpdateAction creates a new mock instance.
func NewMockSnapshotUpdateAction(ctrl *gomock.Controller) *MockSnapshotUpdateAction {
	mock := &MockSnapshotUpdateAction{ctrl: ctrl}
	mock.recorder = &MockSnapshotUpdateActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotUpdateAction) EXPECT() *MockSnapshotUpdateActionMockRecorder {
	return m.recorder
}

// Perform mocks base method.
func (m *MockSnapshotUpdateAction) Perform(original *cache.Snapshot) (*cache.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perform", original)
	ret0, _ := ret[0].(*cache.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Perform indicates an expected call of Perform.
func (mr *MockSnapshotUpdateActionMockRecorder) Perform(original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockSnapshotUpdateAction)(nil).Perform), original)
}
