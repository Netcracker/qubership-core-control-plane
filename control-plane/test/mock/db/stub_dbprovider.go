// Code generated by MockGen. DO NOT EDIT.
// Source: ../../db/dbprovider.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	db "github.com/netcracker/qubership-core-control-plane/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bun "github.com/uptrace/bun"
)

// MockDBProvider is a mock of DBProvider interface.
type MockDBProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDBProviderMockRecorder
}

// MockDBProviderMockRecorder is the mock recorder for MockDBProvider.
type MockDBProviderMockRecorder struct {
	mock *MockDBProvider
}

// NewMockDBProvider creates a new mock instance.
func NewMockDBProvider(ctrl *gomock.Controller) *MockDBProvider {
	mock := &MockDBProvider{ctrl: ctrl}
	mock.recorder = &MockDBProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBProvider) EXPECT() *MockDBProviderMockRecorder {
	return m.recorder
}

// GetConn mocks base method.
func (m *MockDBProvider) GetConn(ctx context.Context) (*bun.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", ctx)
	ret0, _ := ret[0].(*bun.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn.
func (mr *MockDBProviderMockRecorder) GetConn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockDBProvider)(nil).GetConn), ctx)
}

// GetDB mocks base method.
func (m *MockDBProvider) GetDB(ctx context.Context) (*bun.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", ctx)
	ret0, _ := ret[0].(*bun.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDBProviderMockRecorder) GetDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDBProvider)(nil).GetDB), ctx)
}

// Listen mocks base method.
func (m *MockDBProvider) Listen(channel string, connectCallback func(), notificationCallback func(string)) (db.PersistentStorageListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", channel, connectCallback, notificationCallback)
	ret0, _ := ret[0].(db.PersistentStorageListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockDBProviderMockRecorder) Listen(channel, connectCallback, notificationCallback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockDBProvider)(nil).Listen), channel, connectCallback, notificationCallback)
}

// NewDB mocks base method.
func (m *MockDBProvider) NewDB(subscribers ...func(db.PgDB, db.ConnEvent, error)) (db.PgDB, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range subscribers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDB", varargs...)
	ret0, _ := ret[0].(db.PgDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDB indicates an expected call of NewDB.
func (mr *MockDBProviderMockRecorder) NewDB(subscribers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDB", reflect.TypeOf((*MockDBProvider)(nil).NewDB), subscribers...)
}
