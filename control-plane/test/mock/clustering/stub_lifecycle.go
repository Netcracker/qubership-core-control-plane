// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clustering/lifecycle.go

// Package mock_clustering is a generated GoMock package.
package mock_clustering

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMasterNodeInitializer is a mock of MasterNodeInitializer interface.
type MockMasterNodeInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockMasterNodeInitializerMockRecorder
}

// MockMasterNodeInitializerMockRecorder is the mock recorder for MockMasterNodeInitializer.
type MockMasterNodeInitializerMockRecorder struct {
	mock *MockMasterNodeInitializer
}

// NewMockMasterNodeInitializer creates a new mock instance.
func NewMockMasterNodeInitializer(ctrl *gomock.Controller) *MockMasterNodeInitializer {
	mock := &MockMasterNodeInitializer{ctrl: ctrl}
	mock.recorder = &MockMasterNodeInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterNodeInitializer) EXPECT() *MockMasterNodeInitializerMockRecorder {
	return m.recorder
}

// InitMaster mocks base method.
func (m *MockMasterNodeInitializer) InitMaster() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitMaster")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitMaster indicates an expected call of InitMaster.
func (mr *MockMasterNodeInitializerMockRecorder) InitMaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMaster", reflect.TypeOf((*MockMasterNodeInitializer)(nil).InitMaster))
}

// MockinitError is a mock of initError interface.
type MockinitError struct {
	ctrl     *gomock.Controller
	recorder *MockinitErrorMockRecorder
}

// MockinitErrorMockRecorder is the mock recorder for MockinitError.
type MockinitErrorMockRecorder struct {
	mock *MockinitError
}

// NewMockinitError creates a new mock instance.
func NewMockinitError(ctrl *gomock.Controller) *MockinitError {
	mock := &MockinitError{ctrl: ctrl}
	mock.recorder = &MockinitErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinitError) EXPECT() *MockinitErrorMockRecorder {
	return m.recorder
}

// initError mocks base method.
func (m *MockinitError) initError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initError")
	ret0, _ := ret[0].(error)
	return ret0
}

// initError indicates an expected call of initError.
func (mr *MockinitErrorMockRecorder) initError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initError", reflect.TypeOf((*MockinitError)(nil).initError))
}
