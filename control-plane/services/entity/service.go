package entity

import (
	"context"
	"github.com/netcracker/qubership-core-control-plane/dao"
	"github.com/netcracker/qubership-core-control-plane/domain"
	"github.com/netcracker/qubership-core-control-plane/services/route/business"
	"github.com/netcracker/qubership-core-control-plane/util"
	"github.com/netcracker/qubership-core-lib-go/v3/logging"
)

var logger logging.Logger

func init() {
	logger = logging.GetLogger("entity-service")
}

type ServiceInterface interface {
	business.VersionService
	PutListener(dao dao.Repository, listener *domain.Listener) error
	LoadRouteRelations(dao dao.Repository, route *domain.Route) (*domain.Route, error)
	PutRoutes(dao dao.Repository, routes []*domain.Route) error
	PutRoute(dao dao.Repository, virtualHostId int32, updateRequest *domain.Route) error
	DeleteRoutesByAutoGeneratedAndDeploymentVersion(dao dao.Repository, autoGenerated bool, dVersion string) error
	DeleteRoutesByUUID(dao dao.Repository, routesToDelete []*domain.Route) error
	DeleteRouteByUUID(dao dao.Repository, routeToDelete *domain.Route) error
	deleteRouteByUUIDInternal(dao dao.Repository, routeToDelete *domain.Route) error
	mergeAndStoreRoute(dao dao.Repository, existingRoute *domain.Route, updateRequest *domain.Route) error
	FindRouteNodeGroup(dao dao.Repository, route *domain.Route) (*domain.NodeGroup, error)
	mergeRouteStatefulSession(dao dao.Repository, existingRoute *domain.Route, newRoute *domain.Route) error
	saveRouteStatefulSession(dao dao.Repository, route *domain.Route) error
	storeNewRoute(dao dao.Repository, newRoute *domain.Route) error
	DeleteRouteCascade(dao dao.Repository, route *domain.Route) error
	PutVirtualHost(dao dao.Repository, virtualHost *domain.VirtualHost) error
	mergeVirtualHosts(dao dao.Repository, newVirtualHost *domain.VirtualHost, existingVirtualHost *domain.VirtualHost) error
	DeleteVirtualHostDomains(dao dao.Repository, domains []*domain.VirtualHostDomain) error
	DeleteVirtualHostDomainsByVirtualHost(dao dao.Repository, virtualHost *domain.VirtualHost) error
	SaveVirtualHostDomains(dao dao.Repository, domains []*domain.VirtualHostDomain, virtualHostId int32) error
	validateVirtualHostDomain(dao dao.Repository, domainToSave *domain.VirtualHostDomain, virtualHostId int32) error
	FindVirtualHostsByRouteConfig(dao dao.Repository, routeConfigId int32) ([]*domain.VirtualHost, error)
	LoadVirtualHostRelations(dao dao.Repository, virtualHost *domain.VirtualHost) (*domain.VirtualHost, error)
	FindVirtualHostByNameAndNodeGroup(dao dao.Repository, nodeGroup string, virtualService string) (*domain.VirtualHost, error)
	LoadVirtualHostRelationByNameAndNodeGroup(dao dao.Repository, nodeGroup string, virtualService string) (*domain.VirtualHost, error)
	FindVirtualHostsByNodeGroup(dao dao.Repository, nodeGroup string) ([]*domain.VirtualHost, error)
	DeleteVirtualServiceByNodeGroupAndName(dao dao.Repository, nodeGroup string, virtualServiceName string) error
	getDefaultDeploymentVersion(dao dao.Repository) (*domain.DeploymentVersion, error)
	GetDefaultVersion() string
	GetActiveDeploymentVersion(dao dao.Repository) (*domain.DeploymentVersion, error)
	GetOrCreateDeploymentVersion(dao dao.Repository, version string) (*domain.DeploymentVersion, error)
	SaveDeploymentVersion(dao dao.Repository, version *domain.DeploymentVersion) error
	getOrCreateDeploymentVersionInternal(dao dao.Repository, version string, stage string) (*domain.DeploymentVersion, error)
	PutEndpoint(dao dao.Repository, endpoint *domain.Endpoint) error
	PutEndpoints(dao dao.Repository, clusterId int32, endpoints []*domain.Endpoint) error
	DeleteEndpointCascade(dao dao.Repository, endpoint *domain.Endpoint) error
	DeleteEndpointsCascade(dao dao.Repository, endpointsToDelete []*domain.Endpoint) error
	FindEndpointsByClusterId(dao dao.Repository, clusterId int32) ([]*domain.Endpoint, error)
	LoadEndpointRelations(dao dao.Repository, endpoint *domain.Endpoint) (*domain.Endpoint, error)
	PutHealthCheck(dao dao.Repository, healthCheck *domain.HealthCheck) error
	FindHealthChecksByClusterId(dao dao.Repository, clusterId int32) ([]*domain.HealthCheck, error)
	PutWasmFilter(dao dao.Repository, filter *domain.WasmFilter) error
	PutListenerWasmFilterIfAbsent(dao dao.Repository, relation *domain.ListenersWasmFilter) error
	CreateOrUpdateNodeGroup(dao dao.Repository, nodeGroup domain.NodeGroup) (domain.NodeGroup, error)
	PutCluster(dao dao.Repository, cluster *domain.Cluster) error
	PutClustersNodeGroupIfAbsent(dao dao.Repository, relation *domain.ClustersNodeGroup) error
	GetClustersWithRelations(dao dao.Repository) ([]*domain.Cluster, error)
	GetClusterWithRelations(dao dao.Repository, clusterName string) (*domain.Cluster, error)
	DeleteClusterCascade(dao dao.Repository, cluster *domain.Cluster) error
	DeleteClusterCascadeByName(dao dao.Repository, clusterName string) error
	DeleteOrphanedStatefulSessionByCluster(dao dao.Repository, cluster *domain.Cluster) error
	PutRouteConfig(dao dao.Repository, routeConfig *domain.RouteConfiguration) error
	GetRouteConfigurationsWithRelations(dao dao.Repository) ([]*domain.RouteConfiguration, error)
	FindRouteConfigurationByVirtualHostId(dao dao.Repository, virtualHostId int32) (*domain.RouteConfiguration, error)
	PutStatefulSession(dao dao.Repository, newSession *domain.StatefulSession) error
	FindListenersByVirtualHostId(dao dao.Repository, virtualHostId int32) ([]*domain.Listener, error)
	FindListenersByRouteConfiguration(dao dao.Repository, routeConfig *domain.RouteConfiguration) ([]*domain.Listener, error)
	GenerateEnvoyEntityVersions(ctx context.Context, repo dao.Repository, gateway string, entities ...string) error
	DeleteCircuitBreakerCascadeById(dao dao.Repository, id int32) error
}

type Service struct {
	routeKeyLock   *util.NamedResourceLock
	defaultVersion string
}

func NewService(defaultDeploymentVersion string) *Service {
	return &Service{routeKeyLock: util.NewNamedResourceLock(), defaultVersion: defaultDeploymentVersion}
}
