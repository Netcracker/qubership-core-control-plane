package domain

import (
	asrt "github.com/stretchr/testify/assert"
	"testing"
)

func TestHashPolicyEquals(t *testing.T) {
	assert := asrt.New(t)

	hashPolicy1 := HashPolicy{
		Id:         0,
		HeaderName: "header",
		EndpointId: 0,
		Endpoint:   nil,
	}
	hashPolicy2 := HashPolicy{
		Id:         123,
		HeaderName: "header",
		EndpointId: 123,
		Endpoint:   &Endpoint{Id: 123},
	}
	assert.True(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.HeaderName = "header2"
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.HeaderName = ""
	hashPolicy2.CookieName = "cookie"
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy1.HeaderName = ""
	hashPolicy1.CookieName = "cookie"
	hashPolicy1.CookiePath = "cookie_path"
	hashPolicy1.CookieTTL = NewNullInt(10)
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.CookieName = "cookie"
	hashPolicy2.CookiePath = "another_cookie_path"
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.CookiePath = "cookie_path"
	hashPolicy2.CookieTTL = NewNullInt(10)
	assert.True(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.CookieTTL = NewNullInt(20)
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.CookiePath = "another_cookie"
	hashPolicy2.CookieTTL = NewNullInt(10)
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.CookieName = "another_cookie"
	hashPolicy2.CookiePath = "cookie_path"
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy1.CookieName = "another_cookie"
	assert.True(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy1.CookieName = ""
	hashPolicy1.CookiePath = ""
	hashPolicy1.CookieTTL = NewNullInt(0)
	hashPolicy2.CookieName = ""
	hashPolicy2.CookiePath = ""
	hashPolicy2.CookieTTL = NewNullInt(0)

	hashPolicy1.QueryParamName = "param1"
	hashPolicy2.QueryParamName = "param2"
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy2.QueryParamName = "param1"
	assert.True(hashPolicy1.Equals(&hashPolicy2))

	sourceIp := true
	hashPolicy2.QueryParamSourceIP = NewNullBool(sourceIp)
	assert.False(hashPolicy1.Equals(&hashPolicy2))

	hashPolicy1.QueryParamSourceIP = NewNullBool(sourceIp)
	assert.True(hashPolicy1.Equals(&hashPolicy2))
	hashPolicy1.QueryParamSourceIP.Valid = false
	assert.False(hashPolicy1.Equals(&hashPolicy2))
}

func TestRouteActionBuilding(t *testing.T) {
	assert := asrt.New(t)
	ra1 := RouteAction{
		ClusterName:     "test-cluster",
		HostRewrite:     "another-host",
		HostAutoRewrite: NewNullBool(true),
		PrefixRewrite:   "/v1",
		PathRewrite:     "/path",
	}
	route := Route{
		Id:                 1,
		VirtualHostId:      2,
		RouteKey:           "someroutekey",
		DirectResponseCode: 0,
		Prefix:             "/api/v1/some-api",
		Path:               "/some-path",
		ClusterName:        "test-cluster",
		HostRewrite:        "another-host",
		HostAutoRewrite:    NewNullBool(true),
		PrefixRewrite:      "/v1",
		PathRewrite:        "/path",
	}
	ra2 := route.RouteAction()
	assert.True(ra1 == ra2)
	assert.False(&ra1 == &ra2)
}

func TestRouteCloning(t *testing.T) {
	assert := asrt.New(t)
	route := &Route{
		Id:                       1,
		VirtualHostId:            2,
		RouteKey:                 "someroutekey",
		DirectResponseCode:       0,
		Prefix:                   "/api/v1/some-api",
		Regexp:                   ".*",
		Path:                     "/some-path",
		ClusterName:              "test-cluster",
		HostRewrite:              "another-host",
		HostAutoRewrite:          NewNullBool(true),
		PrefixRewrite:            "/v1",
		PathRewrite:              "/path",
		Version:                  1,
		Timeout:                  NewNullInt(1000),
		IdleTimeout:              NewNullInt(1000),
		DeploymentVersion:        "v1",
		DeploymentVersionVal:     &DeploymentVersion{Version: "v1", Stage: "ACTIVE"},
		InitialDeploymentVersion: "v1",
		Autogenerated:            false,
		HeaderMatchers:           []*HeaderMatcher{{Id: 1, Name: "x-version"}},
		HashPolicies:             []*HashPolicy{{HeaderName: "BID"}, {HeaderName: "X-BID"}},
		StatefulSession:          &StatefulSession{CookieName: "sticky", Enabled: true},
	}
	routeCopy := route.Clone()
	assert.False(route == routeCopy)
	assert.Equal(route.RouteAction(), routeCopy.RouteAction())
	assert.Equal(route.Id, routeCopy.Id)
	assert.Equal(route.VirtualHostId, routeCopy.VirtualHostId)
	assert.Equal(route.RouteKey, routeCopy.RouteKey)
	assert.Equal(route.DirectResponseCode, routeCopy.DirectResponseCode)
	assert.Equal(route.Prefix, routeCopy.Prefix)
	assert.Equal(route.Regexp, routeCopy.Regexp)
	assert.Equal(route.Path, routeCopy.Path)
	assert.Equal(route.Version, routeCopy.Version)
	assert.Equal(route.Timeout, routeCopy.Timeout)
	assert.Equal(route.IdleTimeout, routeCopy.IdleTimeout)
	assert.Equal(route.DeploymentVersion, routeCopy.DeploymentVersion)
	assert.Equal(route.InitialDeploymentVersion, routeCopy.InitialDeploymentVersion)
	assert.Equal(route.Autogenerated, routeCopy.Autogenerated)
	assert.False(route.DeploymentVersionVal == routeCopy.DeploymentVersionVal)
	assert.Equal(route.DeploymentVersionVal.Version, routeCopy.DeploymentVersionVal.Version)
	assert.Equal(route.DeploymentVersionVal.Stage, routeCopy.DeploymentVersionVal.Stage)
	assert.True(route.StatefulSession.Equals(routeCopy.StatefulSession))
	for idx, headerMatcher := range route.HeaderMatchers {
		anotherHeaderMatcher := routeCopy.HeaderMatchers[idx]
		assert.False(headerMatcher == anotherHeaderMatcher)
		assert.Equal(headerMatcher.Name, anotherHeaderMatcher.Name)
		assert.Equal(headerMatcher.ExactMatch, anotherHeaderMatcher.ExactMatch)
	}
	for idx, hashPolicy := range route.HashPolicies {
		anotherHashPolicy := routeCopy.HashPolicies[idx]
		assert.False(hashPolicy == anotherHashPolicy)
		assert.Equal(hashPolicy.HeaderName, anotherHashPolicy.HeaderName)
	}

	routeCopy.HeaderMatchers = append(routeCopy.HeaderMatchers, &HeaderMatcher{Id: 2, Name: "gid"})
	assert.Equal(len(route.HeaderMatchers), 1)

	// assert that nil field don't fail cloning
	route.DeploymentVersionVal = nil
	route.HeaderMatchers = nil
	route.HashPolicies = nil
	assert.NotNil(route.Clone())
}

func TestStatefulSessionEquals(t *testing.T) {
	assert := asrt.New(t)

	ttl1 := int64(1000)
	ttl2 := int64(2000)

	a := StatefulSession{
		Id:         1,
		CookieName: "sticky",
		CookieTtl:  &ttl1,
		CookiePath: "/path",
		Enabled:    true,
	}
	b := StatefulSession{
		Id:          2,
		CookieName:  "sticky",
		CookieTtl:   &ttl1,
		CookiePath:  "/path",
		Enabled:     true,
		Namespace:   "test",
		ClusterName: "cluster",
	}
	assert.True(a.Equals(&b))
	assert.True(b.Equals(&a))

	b.CookieName = "another"
	assert.False(a.Equals(&b))
	assert.False(b.Equals(&a))

	b.CookieName = "sticky"
	a.CookieTtl = nil
	assert.False(a.Equals(&b))
	assert.False(b.Equals(&a))

	a.CookieTtl = &ttl2
	assert.False(a.Equals(&b))
	assert.False(b.Equals(&a))

	a.CookieTtl = &ttl1
	a.Enabled = false
	assert.False(a.Equals(&b))
	assert.False(b.Equals(&a))

	b = StatefulSession{
		Id:          2,
		CookieName:  "another",
		CookieTtl:   &ttl1,
		CookiePath:  "/another",
		Enabled:     false,
		Namespace:   "test",
		ClusterName: "cluster",
	}
	assert.True(a.Equals(&b))
	assert.True(b.Equals(&a))
}

func TestStatefulSessionClone(t *testing.T) {
	assert := asrt.New(t)

	ttl := int64(100)
	s := &StatefulSession{
		Id:                2,
		CookieName:        "another",
		CookieTtl:         &ttl,
		CookiePath:        "/another",
		Enabled:           true,
		Namespace:         "test",
		ClusterName:       "cluster",
		DeploymentVersion: "v1",
		DeploymentVersionVal: &DeploymentVersion{
			Version: "v1",
			Stage:   ActiveStage,
		},
	}

	clone := s.Clone()
	assert.False(s == clone)
	assert.Equal(*s, *clone)
	assert.Equal(*s.CookieTtl, *clone.CookieTtl)
	assert.Equal(*s.DeploymentVersionVal, *clone.DeploymentVersionVal)
	assert.True(s.Equals(clone))
}

func TestMicroserviceVersionClone(t *testing.T) {
	assert := asrt.New(t)

	original := &MicroserviceVersion{
		Name:                     "ms-name",
		Namespace:                "cloud-core",
		DeploymentVersion:        "v2",
		InitialDeploymentVersion: "v1",
		DeploymentVersionVal:     &DeploymentVersion{Version: "v2", Stage: ActiveStage},
	}

	clone := original.Clone()
	assert.False(original == clone)
	assert.Equal(*original, *clone)
	assert.Equal(*original.DeploymentVersionVal, *clone.DeploymentVersionVal)
}
