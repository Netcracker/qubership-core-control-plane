package dao

import (
	"github.com/google/uuid"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/ram"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/util/msaddr"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestInMemDao_StatefulSession(t *testing.T) {
	testable := &InMemRepo{
		storage:     ram.NewStorage(),
		idGenerator: &GeneratorMock{},
	}
	sessions := []*domain.StatefulSession{
		{
			CookieName:               "cookie1",
			CookiePath:               "/",
			Enabled:                  true,
			ClusterName:              "cluster1",
			Namespace:                "",
			Gateways:                 []string{"internal-gateway-service"},
			DeploymentVersion:        "v1",
			InitialDeploymentVersion: "v1",
		},
		{
			CookieName:               "cookie2",
			CookiePath:               "/",
			Enabled:                  true,
			ClusterName:              "cluster2",
			Namespace:                "",
			Gateways:                 []string{"internal-gateway-service"},
			DeploymentVersion:        "v1",
			InitialDeploymentVersion: "v1",
		},
	}
	_, err := testable.WithWTx(func(dao Repository) error {
		for _, session := range sessions {
			assert.Nil(t, dao.SaveStatefulSessionConfig(session))
		}
		return nil
	})
	assert.Nil(t, err)

	allSessions, err := testable.FindAllStatefulSessionConfigs()
	assert.Nil(t, err)
	assert.Equal(t, 2, len(allSessions))

	actualSession, err := testable.FindStatefulSessionConfigById(allSessions[0].Id)
	assert.Nil(t, err)
	assert.NotNil(t, actualSession)

	actualSessions, err := testable.FindStatefulSessionConfigsByClusterName("cluster1", msaddr.CurrentNamespace())
	assert.Nil(t, err)
	assert.Equal(t, 1, len(actualSessions))
	assert.True(t, actualSessions[0].Equals(sessions[0]))

	actualSessions, err = testable.FindStatefulSessionConfigsByClusterAndVersion("cluster1",
		msaddr.CurrentNamespace(), &domain.DeploymentVersion{Version: "v1"})
	assert.Nil(t, err)
	assert.Equal(t, 1, len(actualSessions))
	assert.True(t, actualSessions[0].Equals(sessions[0]))

	actualSessions, err = testable.FindStatefulSessionConfigsByCookieName("cookie1")
	assert.Nil(t, err)
	assert.Equal(t, 1, len(actualSessions))
	assert.True(t, actualSessions[0].Equals(sessions[0]))

	actualSessions, err = testable.FindStatefulSessionConfigsByCluster(&domain.Cluster{Name: "cluster1||cluster1||8080"})
	assert.Nil(t, err)
	assert.Equal(t, 1, len(actualSessions))
	assert.True(t, actualSessions[0].Equals(sessions[0]))

	_, err = testable.WithWTx(func(dao Repository) error {
		for _, session := range allSessions {
			assert.Nil(t, dao.DeleteStatefulSessionConfig(session.Id))
		}
		return nil
	})
	assert.Nil(t, err)

	actualSessions, err = testable.FindAllStatefulSessionConfigs()
	assert.Nil(t, err)
	assert.Empty(t, actualSessions)
}

func TestInMemDao_StatefulSessionRelations(t *testing.T) {
	testable := &InMemRepo{
		storage:     ram.NewStorage(),
		idGenerator: &GeneratorMock{},
	}
	endpoint := &domain.Endpoint{
		Address:                  "cluster1-v1",
		Port:                     8080,
		DeploymentVersion:        "v1",
		InitialDeploymentVersion: "v1",
	}
	route := &domain.Route{
		Uuid:                     uuid.NewString(),
		RouteKey:                 "key",
		Prefix:                   "/api/v1/some-srv/resource",
		Version:                  1,
		DeploymentVersion:        "v1",
		InitialDeploymentVersion: "v1",
		Autogenerated:            false,
	}
	sessions := []*domain.StatefulSession{
		{
			CookieName:               "cookie1",
			CookiePath:               "/",
			Enabled:                  true,
			ClusterName:              "cluster1",
			Namespace:                "",
			Gateways:                 []string{"internal-gateway-service"},
			DeploymentVersion:        "v1",
			InitialDeploymentVersion: "v1",
		},
		{
			CookieName:               "cookie2",
			CookiePath:               "/",
			Enabled:                  true,
			ClusterName:              "cluster2",
			Namespace:                "",
			Gateways:                 []string{"internal-gateway-service"},
			DeploymentVersion:        "v1",
			InitialDeploymentVersion: "v1",
		},
	}
	_, err := testable.WithWTx(func(dao Repository) error {
		assert.Nil(t, dao.SaveStatefulSessionConfig(sessions[0]))
		endpoint.StatefulSessionId = sessions[0].Id
		assert.Nil(t, dao.SaveEndpoint(endpoint))

		assert.Nil(t, dao.SaveStatefulSessionConfig(sessions[1]))
		route.StatefulSessionId = sessions[1].Id
		assert.Nil(t, dao.SaveRoute(route))
		return nil
	})
	assert.Nil(t, err)

	actualEndpoint, err := testable.FindEndpointByStatefulSession(sessions[0].Id)
	assert.Nil(t, err)
	assert.NotNil(t, actualEndpoint)
	assert.Equal(t, *endpoint, *actualEndpoint)

	actualRoute, err := testable.FindRouteByStatefulSession(sessions[1].Id)
	assert.Nil(t, err)
	assert.NotNil(t, actualRoute)
	assert.Equal(t, *route, *actualRoute)
}
