package dao

import (
	"github.com/google/uuid"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/domain"
	"github.com/netcracker/qubership-core-control-plane/control-plane/v2/ram"
	"github.com/stretchr/testify/assert"
	"sort"
	"testing"
)

func TestDeleteRouteConfigById(t *testing.T) {
	testable, routeConfigs := prepareRouteConfig(t)
	configId := int32(1)

	foundCluster, err := testable.FindRouteConfigById(configId)
	assert.Nil(t, err)
	assert.Equal(t, routeConfigs[0], foundCluster)

	testable.WithWTx(func(dao Repository) error {
		assert.Nil(t, dao.DeleteRouteConfigById(configId))
		return nil
	})

	foundCluster, err = testable.FindRouteConfigById(configId)
	assert.Nil(t, err)
	assert.Nil(t, foundCluster)
}

func TestFindRouteConfigsByNodeGroupId_shouldFoundConfiguration(t *testing.T) {
	testable, routeConfigs := prepareRouteConfig(t)

	nodeGroupId := "nodeGroup1"
	foundConfiguration, err := testable.FindRouteConfigsByNodeGroupId(nodeGroupId)
	assert.Nil(t, err)
	assert.Equal(t, 2, len(foundConfiguration))
	for i, routeConfig := range foundConfiguration {
		assert.Equal(t, routeConfigs[i], routeConfig)
	}
}

func TestFindRouteConfigsByNodeGroupId_shouldNotFoundConfiguration(t *testing.T) {
	testable, _ := prepareRouteConfig(t)

	nodeGroupId := "nodeGroup0"
	foundConfiguration, err := testable.FindRouteConfigsByNodeGroupId(nodeGroupId)
	assert.Nil(t, err)
	assert.Equal(t, 0, len(foundConfiguration))
}

func TestInMemRepo_FindRouteConfigById(t *testing.T) {
	testable, routeConfigs := prepareRouteConfig(t)

	foundRouteConfigs, err := testable.FindAllRouteConfigs()
	assert.Nil(t, err)
	assert.Equal(t, 3, len(foundRouteConfigs))

	foundCluster, err := testable.FindRouteConfigById(1)
	assert.Nil(t, err)
	assert.Equal(t, routeConfigs[0], foundCluster)

	foundCluster, err = testable.FindRouteConfigByNodeGroupIdAndName("nodeGroup1", "RouteConfig2")
	assert.Nil(t, err)
	assert.Equal(t, routeConfigs[1], foundCluster)
}

func prepareRouteConfig(t *testing.T) (*InMemRepo, []*domain.RouteConfiguration) {
	testable := &InMemRepo{
		storage:     ram.NewStorage(),
		idGenerator: &GeneratorMock{},
	}
	routeConfigs := []*domain.RouteConfiguration{
		{
			Id:          1,
			Name:        "RouteConfig1",
			NodeGroupId: "nodeGroup1",
		},
		{
			Id:          2,
			Name:        "RouteConfig2",
			NodeGroupId: "nodeGroup1",
		},
		{
			Id:          3,
			Name:        "RouteConfig3",
			NodeGroupId: "nodeGroup2",
		},
	}
	_, err := testable.WithWTx(func(dao Repository) error {
		for _, routeConfig := range routeConfigs {
			assert.Nil(t, dao.SaveRouteConfig(routeConfig))
		}
		return nil
	})
	assert.Nil(t, err)
	return testable, routeConfigs
}

func TestInMemRepo_FindRouteConfigsByRouteDeploymentVersion(t *testing.T) {
	testable := &InMemRepo{
		storage:     ram.NewStorage(),
		idGenerator: &DoNothingGenerator{},
	}
	routes := []*domain.Route{
		{
			Id:                1,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     1,
			Version:           1,
			DeploymentVersion: "v1",
			RouteKey:          "rkey",
			Autogenerated:     true,
		},
		{
			Id:                2,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     1,
			Version:           1,
			DeploymentVersion: "v1",
			RouteKey:          "rkey",
			Autogenerated:     true,
		},
		{
			Id:                3,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     2,
			Version:           1,
			DeploymentVersion: "v2",
			RouteKey:          "rkey",
			Autogenerated:     true,
		},
		{
			Id:                4,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     3,
			Version:           1,
			DeploymentVersion: "v2",
			RouteKey:          "rkey",
			Autogenerated:     true,
		},
	}

	vhosts := []*domain.VirtualHost{
		{
			Id:                   1,
			Name:                 "vhost1",
			RouteConfigurationId: 1,
		},
		{
			Id:                   2,
			Name:                 "vhost2",
			RouteConfigurationId: 2,
		},
		{
			Id:                   3,
			Name:                 "vhost3",
			RouteConfigurationId: 3,
		},
	}

	routeConfigs := []*domain.RouteConfiguration{
		{
			Id:          1,
			Name:        "RouteConfig1",
			NodeGroupId: "nodeGroup1",
		},
		{
			Id:          2,
			Name:        "RouteConfig2",
			NodeGroupId: "nodeGroup1",
		},
		{
			Id:          3,
			Name:        "RouteConfig3",
			NodeGroupId: "nodeGroup2",
		},
	}

	_, err := testable.WithWTx(func(repo Repository) error {
		for _, route := range routes {
			assert.Nil(t, repo.SaveRoute(route))
		}
		for _, vhost := range vhosts {
			assert.Nil(t, repo.SaveVirtualHost(vhost))
		}
		for _, routeConfig := range routeConfigs {
			assert.Nil(t, repo.SaveRouteConfig(routeConfig))
		}
		return nil
	})
	assert.Nil(t, err)

	foundRouteConfigs, err := testable.FindRouteConfigsByRouteDeploymentVersion("v1")
	assert.Nil(t, err)
	assert.Equal(t, 1, len(foundRouteConfigs))
	assert.Equal(t, int32(1), foundRouteConfigs[0].Id)

	foundRouteConfigs, err = testable.FindRouteConfigsByRouteDeploymentVersion("v2")
	assert.Nil(t, err)
	assert.Equal(t, 2, len(foundRouteConfigs))
	sort.Slice(foundRouteConfigs, func(i, j int) bool {
		return foundRouteConfigs[i].Id < foundRouteConfigs[j].Id
	})
	assert.Equal(t, int32(2), foundRouteConfigs[0].Id)
	assert.Equal(t, int32(3), foundRouteConfigs[1].Id)

	foundRouteConfigs, err = testable.FindRouteConfigsByRouteDeploymentVersion("v3")
	assert.Nil(t, err)
	assert.Equal(t, 0, len(foundRouteConfigs))
}

func TestInMemRepo_FindRouteConfigsByEndpoint(t *testing.T) {
	testable := &InMemRepo{
		storage:     ram.NewStorage(),
		idGenerator: &DoNothingGenerator{},
	}
	endpoints := []*domain.Endpoint{
		{
			Id:                1,
			ClusterId:         1,
			DeploymentVersion: "v1",
		},
		{
			Id:                2,
			ClusterId:         2,
			DeploymentVersion: "v1",
		},
		{
			Id:                3,
			ClusterId:         2,
			DeploymentVersion: "v2",
		},
	}
	clusters := []*domain.Cluster{
		{
			Id:   1,
			Name: "test-cluster1",
		},
		{
			Id:   2,
			Name: "test-cluster2",
		},
	}
	routes := []*domain.Route{
		{
			Id:                1,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     1,
			Version:           1,
			DeploymentVersion: "v1",
			RouteKey:          "rkey",
			Autogenerated:     true,
			ClusterName:       "test-cluster1",
		},
		{
			Id:                2,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     2,
			Version:           1,
			DeploymentVersion: "v1",
			RouteKey:          "rkey",
			Autogenerated:     true,
			ClusterName:       "test-cluster2",
		},
		{
			Id:                3,
			Uuid:              uuid.Nil.String(),
			VirtualHostId:     3,
			Version:           1,
			DeploymentVersion: "v1",
			RouteKey:          "rkey",
			Autogenerated:     true,
			ClusterName:       "test-cluster2",
		},
	}
	vhosts := []*domain.VirtualHost{
		{
			Id:                   1,
			RouteConfigurationId: 1,
			Name:                 "vhost1",
		},
		{
			Id:                   2,
			RouteConfigurationId: 2,
			Name:                 "vhost2",
		},
		{
			Id:                   3,
			RouteConfigurationId: 3,
			Name:                 "vhost3",
		},
	}
	routeConfigs := []*domain.RouteConfiguration{
		{
			Id:          1,
			Name:        "RouteConfig1",
			NodeGroupId: "nodeGroup1",
		},
		{
			Id:          2,
			Name:        "RouteConfig2",
			NodeGroupId: "nodeGroup2",
		},
		{
			Id:          3,
			Name:        "RouteConfig3",
			NodeGroupId: "nodeGroup3",
		},
	}
	_, err := testable.WithWTx(func(repo Repository) error {
		for _, endpoint := range endpoints {
			assert.Nil(t, repo.SaveEndpoint(endpoint))
		}
		for _, cluster := range clusters {
			assert.Nil(t, repo.SaveCluster(cluster))
		}
		for _, route := range routes {
			assert.Nil(t, repo.SaveRoute(route))
		}
		for _, vhost := range vhosts {
			assert.Nil(t, repo.SaveVirtualHost(vhost))
		}
		for _, routeConfig := range routeConfigs {
			assert.Nil(t, repo.SaveRouteConfig(routeConfig))
		}
		return nil
	})
	foundRouteConfigs, err := testable.FindRouteConfigsByEndpoint(endpoints[0])
	assert.Nil(t, err)
	assert.Equal(t, 1, len(foundRouteConfigs))
	assert.Equal(t, "RouteConfig1", foundRouteConfigs[0].Name)

	foundRouteConfigs, err = testable.FindRouteConfigsByEndpoint(endpoints[1])
	assert.Nil(t, err)
	assert.Equal(t, 2, len(foundRouteConfigs))

	sort.Slice(foundRouteConfigs, func(i, j int) bool {
		return foundRouteConfigs[i].Name < foundRouteConfigs[j].Name
	})
	assert.Equal(t, "RouteConfig2", foundRouteConfigs[0].Name)
	assert.Equal(t, "RouteConfig3", foundRouteConfigs[1].Name)

	foundRouteConfigs, err = testable.FindRouteConfigsByEndpoint(endpoints[2])
	assert.Nil(t, err)
	assert.Equal(t, 0, len(foundRouteConfigs))
}
